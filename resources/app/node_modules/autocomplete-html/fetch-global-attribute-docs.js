(function() {
  var AttributesURL, fetch, filterExcerpt, fs, mdnHTMLURL, mdnJSONAPI, path, request;

  path = require('path');

  fs = require('fs');

  request = require('request');

  mdnHTMLURL = 'https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes';

  mdnJSONAPI = 'https://developer.mozilla.org/en-US/search.json?topic=html&highlight=false';

  AttributesURL = 'https://raw.githubusercontent.com/adobe/brackets/master/src/extensions/default/HTMLCodeHints/HtmlAttributes.json';

  fetch = function() {
    var attributesPromise;
    attributesPromise = new Promise(function(resolve) {
      return request({
        json: true,
        url: AttributesURL
      }, function(error, response, attributes) {
        if (error != null) {
          console.error(error.message);
          resolve(null);
        }
        if (response.statusCode !== 200) {
          console.error("Request for HtmlAttributes.json failed: " + response.statusCode);
          resolve(null);
        }
        return resolve(attributes);
      });
    });
    return attributesPromise.then(function(attributes) {
      var MAX, attribute, docs, options, queue, running;
      if (attributes == null) {
        return;
      }
      MAX = 10;
      queue = [];
      for (attribute in attributes) {
        options = attributes[attribute];
        if (options.global && !attribute.startsWith('aria') && !attribute.startsWith('on') && attribute !== 'role') {
          queue.push(attribute);
        }
      }
      running = [];
      docs = {};
      return new Promise(function(resolve) {
        var checkEnd, handleRequest, i, ref, removeRunning, run, runNext;
        checkEnd = function() {
          if (queue.length === 0 && running.length === 0) {
            return resolve(docs);
          }
        };
        removeRunning = function(attributeName) {
          var index;
          index = running.indexOf(attributeName);
          if (index > -1) {
            return running.splice(index, 1);
          }
        };
        runNext = function() {
          var attributeName;
          checkEnd();
          if (queue.length !== 0) {
            attributeName = queue.pop();
            running.push(attributeName);
            return run(attributeName);
          }
        };
        run = function(attributeName) {
          var url;
          url = mdnJSONAPI + "&q=" + attributeName;
          return request({
            json: true,
            url: url
          }, function(error, response, searchResults) {
            if ((error == null) && response.statusCode === 200) {
              handleRequest(attributeName, searchResults);
            } else {
              console.error("Req failed " + url + "; " + response.statusCode + ", " + error);
            }
            removeRunning(attributeName);
            return runNext();
          });
        };
        handleRequest = function(attributeName, searchResults) {
          var doc, i, len, ref;
          if (searchResults.documents != null) {
            ref = searchResults.documents;
            for (i = 0, len = ref.length; i < len; i++) {
              doc = ref[i];
              if (doc.url === (mdnHTMLURL + "/" + attributeName)) {
                docs[attributeName] = filterExcerpt(attributeName, doc.excerpt);
                return;
              }
            }
          }
          return console.log("Could not find documentation for " + attributeName);
        };
        for (i = 0, ref = MAX; 0 <= ref ? i <= ref : i >= ref; 0 <= ref ? i++ : i--) {
          runNext();
        }
      });
    });
  };

  filterExcerpt = function(attributeName, excerpt) {
    var beginningPattern, periodIndex;
    beginningPattern = /^the [a-z-]+ global attribute (is )?(\w+)/i;
    excerpt = excerpt.replace(beginningPattern, function(match) {
      var firstWord, matches;
      matches = beginningPattern.exec(match);
      firstWord = matches[2];
      return firstWord[0].toUpperCase() + firstWord.slice(1);
    });
    periodIndex = excerpt.indexOf('.');
    if (periodIndex > -1) {
      excerpt = excerpt.slice(0, periodIndex + 1);
    }
    return excerpt;
  };

  if (require.main === module) {
    fetch().then(function(docs) {
      if (docs != null) {
        return fs.writeFileSync(path.join(__dirname, 'global-attribute-docs.json'), (JSON.stringify(docs, null, '  ')) + "\n");
      } else {
        return console.error('No docs');
      }
    });
  }

  module.exports = fetch;

}).call(this);

//# sourceMappingURL=data:application/json;base64,
