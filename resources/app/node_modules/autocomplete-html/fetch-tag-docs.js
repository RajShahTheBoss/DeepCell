(function() {
  var TagsURL, fetch, filterExcerpt, fs, mdnHTMLURL, mdnJSONAPI, path, request;

  path = require('path');

  fs = require('fs');

  request = require('request');

  mdnHTMLURL = 'https://developer.mozilla.org/en-US/docs/Web/HTML/Element';

  mdnJSONAPI = 'https://developer.mozilla.org/en-US/search.json?topic=html&highlight=false';

  TagsURL = 'https://raw.githubusercontent.com/adobe/brackets/master/src/extensions/default/HTMLCodeHints/HtmlTags.json';

  fetch = function() {
    var tagsPromise;
    tagsPromise = new Promise(function(resolve) {
      return request({
        json: true,
        url: TagsURL
      }, function(error, response, tags) {
        if (error != null) {
          console.error(error.message);
          resolve(null);
        }
        if (response.statusCode !== 200) {
          console.error("Request for HtmlTags.json failed: " + response.statusCode);
          resolve(null);
        }
        return resolve(tags);
      });
    });
    return tagsPromise.then(function(tags) {
      var MAX, docs, queue, running;
      if (tags == null) {
        return;
      }
      MAX = 10;
      queue = Object.keys(tags);
      running = [];
      docs = {};
      return new Promise(function(resolve) {
        var checkEnd, handleRequest, i, ref, removeRunning, run, runNext;
        checkEnd = function() {
          if (queue.length === 0 && running.length === 0) {
            return resolve(docs);
          }
        };
        removeRunning = function(tagName) {
          var index;
          index = running.indexOf(tagName);
          if (index > -1) {
            return running.splice(index, 1);
          }
        };
        runNext = function() {
          var tagName;
          checkEnd();
          if (queue.length !== 0) {
            tagName = queue.pop();
            running.push(tagName);
            return run(tagName);
          }
        };
        run = function(tagName) {
          var url;
          url = mdnJSONAPI + "&q=" + tagName;
          return request({
            json: true,
            url: url
          }, function(error, response, searchResults) {
            if ((error == null) && response.statusCode === 200) {
              handleRequest(tagName, searchResults);
            } else {
              console.error("Req failed " + url + "; " + response.statusCode + ", " + error);
            }
            removeRunning(tagName);
            return runNext();
          });
        };
        handleRequest = function(tagName, searchResults) {
          var doc, i, len, ref;
          if (searchResults.documents != null) {
            ref = searchResults.documents;
            for (i = 0, len = ref.length; i < len; i++) {
              doc = ref[i];
              if (doc.url === (mdnHTMLURL + "/" + tagName) || (/^h\d$/.test(tagName) && doc.url === (mdnHTMLURL + "/Heading_Elements"))) {
                if (doc.tags.includes('Obsolete')) {
                  docs[tagName] = "The " + tagName + " element is obsolete. Avoid using it and update existing code if possible.";
                } else if (doc.tags.includes('Deprecated')) {
                  docs[tagName] = "The " + tagName + " element is deprecated. Avoid using it and update existing code if possible.";
                } else {
                  docs[tagName] = filterExcerpt(tagName, doc.excerpt);
                }
                return;
              }
            }
          }
          return console.log("Could not find documentation for " + tagName);
        };
        for (i = 0, ref = MAX; 0 <= ref ? i <= ref : i >= ref; 0 <= ref ? i++ : i--) {
          runNext();
        }
      });
    });
  };

  filterExcerpt = function(tagName, excerpt) {
    var beginningPattern, periodIndex;
    beginningPattern = /^the html [a-z-]+ element (\([^)]+\) )?(is )?(\w+)/i;
    excerpt = excerpt.replace(beginningPattern, function(match) {
      var firstWord, matches;
      matches = beginningPattern.exec(match);
      firstWord = matches[3];
      return firstWord[0].toUpperCase() + firstWord.slice(1);
    });
    periodIndex = excerpt.indexOf('.');
    if (periodIndex > -1) {
      excerpt = excerpt.slice(0, periodIndex + 1);
    }
    return excerpt;
  };

  if (require.main === module) {
    fetch().then(function(docs) {
      if (docs != null) {
        return fs.writeFileSync(path.join(__dirname, 'tag-docs.json'), (JSON.stringify(docs, null, '  ')) + "\n");
      } else {
        return console.error('No docs');
      }
    });
  }

  module.exports = fetch;

}).call(this);

//# sourceMappingURL=data:application/json;base64,
