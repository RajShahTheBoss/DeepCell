(function() {
  var COMPLETIONS, attributePattern, firstCharsEqual, tagPattern;

  COMPLETIONS = require('../completions.json');

  attributePattern = /\s+([a-zA-Z][-a-zA-Z]*)\s*=\s*$/;

  tagPattern = /<([a-zA-Z][-a-zA-Z]*)(?:\s|$)/;

  module.exports = {
    selector: '.text.html',
    disableForSelector: '.text.html .comment',
    filterSuggestions: true,
    completions: COMPLETIONS,
    getSuggestions: function(request) {
      if (this.isAttributeValueStart(request)) {
        return this.getAttributeValueCompletions(request);
      } else if (this.isAttributeStart(request)) {
        return this.getAttributeNameCompletions(request);
      } else if (this.isTagStart(request)) {
        return this.getTagNameCompletions(request);
      } else {
        return [];
      }
    },
    onDidInsertSuggestion: function(arg) {
      var editor, suggestion;
      editor = arg.editor, suggestion = arg.suggestion;
      if (suggestion.type === 'attribute') {
        return setTimeout(this.triggerAutocomplete.bind(this, editor), 1);
      }
    },
    triggerAutocomplete: function(editor) {
      return atom.commands.dispatch(atom.views.getView(editor), 'autocomplete-plus:activate', {
        activatedManually: false
      });
    },
    isTagStart: function(arg) {
      var bufferPosition, editor, prefix, scopeDescriptor, scopes;
      prefix = arg.prefix, scopeDescriptor = arg.scopeDescriptor, bufferPosition = arg.bufferPosition, editor = arg.editor;
      if (prefix.trim() && prefix.indexOf('<') === -1) {
        return this.hasTagScope(scopeDescriptor.getScopesArray());
      }
      prefix = editor.getTextInRange([[bufferPosition.row, bufferPosition.column - 1], bufferPosition]);
      scopes = scopeDescriptor.getScopesArray();
      return prefix === '<' && scopes[0] === 'text.html.basic' && scopes.length === 1;
    },
    isAttributeStart: function(arg) {
      var bufferPosition, editor, prefix, previousBufferPosition, previousScopes, previousScopesArray, scopeDescriptor, scopes;
      prefix = arg.prefix, scopeDescriptor = arg.scopeDescriptor, bufferPosition = arg.bufferPosition, editor = arg.editor;
      scopes = scopeDescriptor.getScopesArray();
      if (!this.getPreviousAttribute(editor, bufferPosition) && prefix && !prefix.trim()) {
        return this.hasTagScope(scopes);
      }
      previousBufferPosition = [bufferPosition.row, Math.max(0, bufferPosition.column - 1)];
      previousScopes = editor.scopeDescriptorForBufferPosition(previousBufferPosition);
      previousScopesArray = previousScopes.getScopesArray();
      if (previousScopesArray.indexOf('entity.other.attribute-name.html') !== -1) {
        return true;
      }
      if (!this.hasTagScope(scopes)) {
        return false;
      }
      return scopes.indexOf('punctuation.definition.tag.end.html') !== -1 && previousScopesArray.indexOf('punctuation.definition.tag.end.html') === -1;
    },
    isAttributeValueStart: function(arg) {
      var bufferPosition, editor, previousBufferPosition, previousScopes, previousScopesArray, scopeDescriptor, scopes;
      scopeDescriptor = arg.scopeDescriptor, bufferPosition = arg.bufferPosition, editor = arg.editor;
      scopes = scopeDescriptor.getScopesArray();
      previousBufferPosition = [bufferPosition.row, Math.max(0, bufferPosition.column - 1)];
      previousScopes = editor.scopeDescriptorForBufferPosition(previousBufferPosition);
      previousScopesArray = previousScopes.getScopesArray();
      return this.hasStringScope(scopes) && this.hasStringScope(previousScopesArray) && previousScopesArray.indexOf('punctuation.definition.string.end.html') === -1 && this.hasTagScope(scopes) && (this.getPreviousAttribute(editor, bufferPosition) != null);
    },
    hasTagScope: function(scopes) {
      return scopes.indexOf('meta.tag.any.html') !== -1 || scopes.indexOf('meta.tag.other.html') !== -1 || scopes.indexOf('meta.tag.block.any.html') !== -1 || scopes.indexOf('meta.tag.inline.any.html') !== -1 || scopes.indexOf('meta.tag.structure.any.html') !== -1;
    },
    hasStringScope: function(scopes) {
      return scopes.indexOf('string.quoted.double.html') !== -1 || scopes.indexOf('string.quoted.single.html') !== -1;
    },
    getTagNameCompletions: function(arg) {
      var bufferPosition, completions, editor, ignorePrefix, options, prefix, ref, tag;
      prefix = arg.prefix, editor = arg.editor, bufferPosition = arg.bufferPosition;
      ignorePrefix = editor.getTextInRange([[bufferPosition.row, bufferPosition.column - 1], bufferPosition]) === '<';
      completions = [];
      ref = this.completions.tags;
      for (tag in ref) {
        options = ref[tag];
        if (ignorePrefix || firstCharsEqual(tag, prefix)) {
          completions.push(this.buildTagCompletion(tag, options));
        }
      }
      return completions;
    },
    buildTagCompletion: function(tag, arg) {
      var description;
      description = arg.description;
      return {
        text: tag,
        type: 'tag',
        description: description != null ? description : "HTML <" + tag + "> tag",
        descriptionMoreURL: description ? this.getTagDocsURL(tag) : null
      };
    },
    getAttributeNameCompletions: function(arg) {
      var attribute, bufferPosition, completions, editor, i, len, options, prefix, ref, tag, tagAttributes;
      prefix = arg.prefix, editor = arg.editor, bufferPosition = arg.bufferPosition;
      completions = [];
      tag = this.getPreviousTag(editor, bufferPosition);
      tagAttributes = this.getTagAttributes(tag);
      for (i = 0, len = tagAttributes.length; i < len; i++) {
        attribute = tagAttributes[i];
        if (!prefix.trim() || firstCharsEqual(attribute, prefix)) {
          completions.push(this.buildLocalAttributeCompletion(attribute, tag, this.completions.attributes[attribute]));
        }
      }
      ref = this.completions.attributes;
      for (attribute in ref) {
        options = ref[attribute];
        if (!prefix.trim() || firstCharsEqual(attribute, prefix)) {
          if (options.global) {
            completions.push(this.buildGlobalAttributeCompletion(attribute, options));
          }
        }
      }
      return completions;
    },
    buildLocalAttributeCompletion: function(attribute, tag, options) {
      return {
        snippet: (options != null ? options.type : void 0) === 'flag' ? attribute : attribute + "=\"$1\"$0",
        displayText: attribute,
        type: 'attribute',
        rightLabel: "<" + tag + ">",
        description: attribute + " attribute local to <" + tag + "> tags",
        descriptionMoreURL: this.getLocalAttributeDocsURL(attribute, tag)
      };
    },
    buildGlobalAttributeCompletion: function(attribute, arg) {
      var description, type;
      description = arg.description, type = arg.type;
      return {
        snippet: type === 'flag' ? attribute : attribute + "=\"$1\"$0",
        displayText: attribute,
        type: 'attribute',
        description: description != null ? description : "Global " + attribute + " attribute",
        descriptionMoreURL: description ? this.getGlobalAttributeDocsURL(attribute) : null
      };
    },
    getAttributeValueCompletions: function(arg) {
      var attribute, bufferPosition, completions, editor, i, len, prefix, ref, tag, value, values;
      prefix = arg.prefix, editor = arg.editor, bufferPosition = arg.bufferPosition;
      completions = [];
      tag = this.getPreviousTag(editor, bufferPosition);
      attribute = this.getPreviousAttribute(editor, bufferPosition);
      values = this.getAttributeValues(tag, attribute);
      for (i = 0, len = values.length; i < len; i++) {
        value = values[i];
        if (!prefix || firstCharsEqual(value, prefix)) {
          completions.push(this.buildAttributeValueCompletion(tag, attribute, value));
        }
      }
      if (completions.length === 0 && ((ref = this.completions.attributes[attribute]) != null ? ref.type : void 0) === 'boolean') {
        completions.push(this.buildAttributeValueCompletion(tag, attribute, 'true'));
        completions.push(this.buildAttributeValueCompletion(tag, attribute, 'false'));
      }
      return completions;
    },
    buildAttributeValueCompletion: function(tag, attribute, value) {
      if (this.completions.attributes[attribute].global) {
        return {
          text: value,
          type: 'value',
          description: value + " value for global " + attribute + " attribute",
          descriptionMoreURL: this.getGlobalAttributeDocsURL(attribute)
        };
      } else {
        return {
          text: value,
          type: 'value',
          rightLabel: "<" + tag + ">",
          description: value + " value for " + attribute + " attribute local to <" + tag + ">",
          descriptionMoreURL: this.getLocalAttributeDocsURL(attribute, tag)
        };
      }
    },
    getPreviousTag: function(editor, bufferPosition) {
      var ref, row, tag;
      row = bufferPosition.row;
      while (row >= 0) {
        tag = (ref = tagPattern.exec(editor.lineTextForBufferRow(row))) != null ? ref[1] : void 0;
        if (tag) {
          return tag;
        }
        row--;
      }
    },
    getPreviousAttribute: function(editor, bufferPosition) {
      var quoteIndex, ref, scopes, scopesArray;
      quoteIndex = bufferPosition.column - 1;
      while (quoteIndex) {
        scopes = editor.scopeDescriptorForBufferPosition([bufferPosition.row, quoteIndex]);
        scopesArray = scopes.getScopesArray();
        if (!this.hasStringScope(scopesArray) || scopesArray.indexOf('punctuation.definition.string.begin.html') !== -1) {
          break;
        }
        quoteIndex--;
      }
      return (ref = attributePattern.exec(editor.getTextInRange([[bufferPosition.row, 0], [bufferPosition.row, quoteIndex]]))) != null ? ref[1] : void 0;
    },
    getAttributeValues: function(tag, attribute) {
      var ref, ref1, ref2, ref3;
      return (ref = (ref1 = (ref2 = this.completions.attributes[attribute]) != null ? ref2.attribOption : void 0) != null ? ref1 : (ref3 = this.completions.attributes[tag + "/" + attribute]) != null ? ref3.attribOption : void 0) != null ? ref : [];
    },
    getTagAttributes: function(tag) {
      var ref, ref1;
      return (ref = (ref1 = this.completions.tags[tag]) != null ? ref1.attributes : void 0) != null ? ref : [];
    },
    getTagDocsURL: function(tag) {
      return "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/" + tag;
    },
    getLocalAttributeDocsURL: function(attribute, tag) {
      return (this.getTagDocsURL(tag)) + "#attr-" + attribute;
    },
    getGlobalAttributeDocsURL: function(attribute) {
      return "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/" + attribute;
    }
  };

  firstCharsEqual = function(str1, str2) {
    return str1[0].toLowerCase() === str2[0].toLowerCase();
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
