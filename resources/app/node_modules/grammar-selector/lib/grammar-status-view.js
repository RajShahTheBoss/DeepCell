Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

/** @babel */

var _atom = require('atom');

var GrammarStatusView = (function () {
  function GrammarStatusView(statusBar) {
    var _this = this;

    _classCallCheck(this, GrammarStatusView);

    this.statusBar = statusBar;
    this.element = document.createElement('grammar-selector-status');
    this.element.classList.add('grammar-status', 'inline-block');
    this.grammarLink = document.createElement('a');
    this.grammarLink.classList.add('inline-block');
    this.element.appendChild(this.grammarLink);

    // TODO[v1.19]: Remove conditional once atom.workspace.observeActiveTextEditor ships in Atom v1.19
    if (atom.workspace.observeActiveTextEditor) {
      this.activeItemSubscription = atom.workspace.observeActiveTextEditor(this.subscribeToActiveTextEditor.bind(this));
    } else {
      this.activeItemSubscription = atom.workspace.observeActivePaneItem(this.subscribeToActiveTextEditor.bind(this));
    }

    this.configSubscription = atom.config.observe('grammar-selector.showOnRightSideOfStatusBar', this.attach.bind(this));
    var clickHandler = function clickHandler(event) {
      event.preventDefault();
      atom.commands.dispatch(atom.views.getView(atom.workspace.getActiveTextEditor()), 'grammar-selector:show');
    };
    this.element.addEventListener('click', clickHandler);
    this.clickSubscription = new _atom.Disposable(function () {
      _this.element.removeEventListener('click', clickHandler);
    });
  }

  _createClass(GrammarStatusView, [{
    key: 'attach',
    value: function attach() {
      if (this.statusBarTile) {
        this.statusBarTile.destroy();
      }

      this.statusBarTile = atom.config.get('grammar-selector.showOnRightSideOfStatusBar') ? this.statusBar.addRightTile({ item: this.element, priority: 10 }) : this.statusBar.addLeftTile({ item: this.element, priority: 10 });
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      if (this.activeItemSubscription) {
        this.activeItemSubscription.dispose();
      }

      if (this.grammarSubscription) {
        this.grammarSubscription.dispose();
      }

      if (this.clickSubscription) {
        this.clickSubscription.dispose();
      }

      if (this.configSubscription) {
        this.configSubscription.dispose();
      }

      if (this.statusBarTile) {
        this.statusBarTile.destroy();
      }
    }
  }, {
    key: 'subscribeToActiveTextEditor',
    value: function subscribeToActiveTextEditor() {
      if (this.grammarSubscription) {
        this.grammarSubscription.dispose();
        this.grammarSubscription = null;
      }

      var editor = atom.workspace.getActiveTextEditor();
      if (editor) {
        this.grammarSubscription = editor.onDidChangeGrammar(this.updateGrammarText.bind(this));
      }
      this.updateGrammarText();
    }
  }, {
    key: 'updateGrammarText',
    value: function updateGrammarText() {
      var _this2 = this;

      atom.views.updateDocument(function () {
        var editor = atom.workspace.getActiveTextEditor();
        var grammar = editor ? editor.getGrammar() : null;
        if (grammar) {
          var grammarName = null;
          if (grammar === atom.grammars.nullGrammar) {
            grammarName = 'Plain Text';
          } else {
            grammarName = grammar.name || grammar.scopeName;
          }

          _this2.grammarLink.textContent = grammarName;
          _this2.grammarLink.dataset.grammar = grammarName;
          _this2.element.style.display = '';
        } else {
          _this2.element.style.display = 'none';
        }
      });
    }
  }]);

  return GrammarStatusView;
})();

exports['default'] = GrammarStatusView;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,