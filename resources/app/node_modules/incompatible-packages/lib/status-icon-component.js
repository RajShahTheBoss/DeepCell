Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

/** @babel */
/** @jsx etch.dom */

var _etch = require('etch');

var _etch2 = _interopRequireDefault(_etch);

var StatusIconComponent = (function () {
  function StatusIconComponent(_ref) {
    var count = _ref.count;

    _classCallCheck(this, StatusIconComponent);

    this.count = count;
    _etch2['default'].initialize(this);
  }

  _createClass(StatusIconComponent, [{
    key: 'update',
    value: function update() {}
  }, {
    key: 'render',
    value: function render() {
      return _etch2['default'].dom(
        'div',
        { className: 'incompatible-packages-status inline-block text text-error' },
        _etch2['default'].dom('span', { className: 'icon icon-bug' }),
        _etch2['default'].dom(
          'span',
          { className: 'incompatible-packages-count' },
          this.count
        )
      );
    }
  }]);

  return StatusIconComponent;
})();

exports['default'] = StatusIconComponent;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vQzovcHJvamVjdHMvYXRvbS9vdXQvYXBwL25vZGVfbW9kdWxlcy9pbmNvbXBhdGlibGUtcGFja2FnZXMvbGliL3N0YXR1cy1pY29uLWNvbXBvbmVudC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O29CQUdpQixNQUFNOzs7O0lBRUYsbUJBQW1CO0FBQzFCLFdBRE8sbUJBQW1CLENBQ3pCLElBQU8sRUFBRTtRQUFSLEtBQUssR0FBTixJQUFPLENBQU4sS0FBSzs7MEJBREEsbUJBQW1COztBQUVwQyxRQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtBQUNsQixzQkFBSyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUE7R0FDdEI7O2VBSmtCLG1CQUFtQjs7V0FNL0Isa0JBQUcsRUFBRTs7O1dBRUwsa0JBQUc7QUFDUixhQUNFOztVQUFLLFNBQVMsRUFBQywyREFBMkQ7UUFDeEUsZ0NBQU0sU0FBUyxFQUFDLGVBQWUsR0FBUTtRQUN2Qzs7WUFBTSxTQUFTLEVBQUMsNkJBQTZCO1VBQUUsSUFBSSxDQUFDLEtBQUs7U0FBUTtPQUM3RCxDQUNQO0tBQ0Y7OztTQWZrQixtQkFBbUI7OztxQkFBbkIsbUJBQW1CIiwiZmlsZSI6ImZpbGU6Ly8vQzovcHJvamVjdHMvYXRvbS9vdXQvYXBwL25vZGVfbW9kdWxlcy9pbmNvbXBhdGlibGUtcGFja2FnZXMvbGliL3N0YXR1cy1pY29uLWNvbXBvbmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAYmFiZWwgKi9cbi8qKiBAanN4IGV0Y2guZG9tICovXG5cbmltcG9ydCBldGNoIGZyb20gJ2V0Y2gnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0YXR1c0ljb25Db21wb25lbnQge1xuICBjb25zdHJ1Y3RvciAoe2NvdW50fSkge1xuICAgIHRoaXMuY291bnQgPSBjb3VudFxuICAgIGV0Y2guaW5pdGlhbGl6ZSh0aGlzKVxuICB9XG5cbiAgdXBkYXRlICgpIHt9XG5cbiAgcmVuZGVyICgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9J2luY29tcGF0aWJsZS1wYWNrYWdlcy1zdGF0dXMgaW5saW5lLWJsb2NrIHRleHQgdGV4dC1lcnJvcic+XG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT0naWNvbiBpY29uLWJ1Zyc+PC9zcGFuPlxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9J2luY29tcGF0aWJsZS1wYWNrYWdlcy1jb3VudCc+e3RoaXMuY291bnR9PC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59XG4iXX0=