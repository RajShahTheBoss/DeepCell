(function() {
  var CompositeDisposable, Directory, DirectoryView, FileView, repoForPath;

  CompositeDisposable = require('event-kit').CompositeDisposable;

  Directory = require('./directory');

  FileView = require('./file-view');

  repoForPath = require('./helpers').repoForPath;

  module.exports = DirectoryView = (function() {
    function DirectoryView(directory) {
      var iconClass, ref, squashedDirectoryNameNode;
      this.directory = directory;
      this.subscriptions = new CompositeDisposable();
      this.subscriptions.add(this.directory.onDidDestroy((function(_this) {
        return function() {
          return _this.subscriptions.dispose();
        };
      })(this)));
      this.subscribeToDirectory();
      this.element = document.createElement('li');
      this.element.setAttribute('is', 'tree-view-directory');
      this.element.classList.add('directory', 'entry', 'list-nested-item', 'collapsed');
      this.header = document.createElement('div');
      this.header.classList.add('header', 'list-item');
      this.directoryName = document.createElement('span');
      this.directoryName.classList.add('name', 'icon');
      this.entries = document.createElement('ol');
      this.entries.classList.add('entries', 'list-tree');
      if (this.directory.symlink) {
        iconClass = 'icon-file-symlink-directory';
      } else {
        iconClass = 'icon-file-directory';
        if (this.directory.isRoot) {
          if ((ref = repoForPath(this.directory.path)) != null ? ref.isProjectAtRoot() : void 0) {
            iconClass = 'icon-repo';
          }
        } else {
          if (this.directory.submodule) {
            iconClass = 'icon-file-submodule';
          }
        }
      }
      this.directoryName.classList.add(iconClass);
      this.directoryName.dataset.path = this.directory.path;
      if (this.directory.squashedNames != null) {
        this.directoryName.dataset.name = this.directory.squashedNames.join('');
        this.directoryName.title = this.directory.squashedNames.join('');
        squashedDirectoryNameNode = document.createElement('span');
        squashedDirectoryNameNode.classList.add('squashed-dir');
        squashedDirectoryNameNode.textContent = this.directory.squashedNames[0];
        this.directoryName.appendChild(squashedDirectoryNameNode);
        this.directoryName.appendChild(document.createTextNode(this.directory.squashedNames[1]));
      } else {
        this.directoryName.dataset.name = this.directory.name;
        this.directoryName.title = this.directory.name;
        this.directoryName.textContent = this.directory.name;
      }
      this.element.appendChild(this.header);
      this.header.appendChild(this.directoryName);
      this.element.appendChild(this.entries);
      if (this.directory.isRoot) {
        this.element.classList.add('project-root');
        this.header.classList.add('project-root-header');
      } else {
        this.element.draggable = true;
        this.subscriptions.add(this.directory.onDidStatusChange((function(_this) {
          return function() {
            return _this.updateStatus();
          };
        })(this)));
        this.updateStatus();
      }
      if (this.directory.expansionState.isExpanded) {
        this.expand();
      }
      this.element.collapse = this.collapse.bind(this);
      this.element.expand = this.expand.bind(this);
      this.element.toggleExpansion = this.toggleExpansion.bind(this);
      this.element.reload = this.reload.bind(this);
      this.element.isExpanded = this.isExpanded;
      this.element.updateStatus = this.updateStatus.bind(this);
      this.element.isPathEqual = this.isPathEqual.bind(this);
      this.element.getPath = this.getPath.bind(this);
      this.element.directory = this.directory;
      this.element.header = this.header;
      this.element.entries = this.entries;
      this.element.directoryName = this.directoryName;
    }

    DirectoryView.prototype.updateStatus = function() {
      this.element.classList.remove('status-ignored', 'status-modified', 'status-added');
      if (this.directory.status != null) {
        return this.element.classList.add("status-" + this.directory.status);
      }
    };

    DirectoryView.prototype.subscribeToDirectory = function() {
      return this.subscriptions.add(this.directory.onDidAddEntries((function(_this) {
        return function(addedEntries) {
          var entry, i, insertionIndex, len, numberOfEntries, results, view;
          if (!_this.isExpanded) {
            return;
          }
          numberOfEntries = _this.entries.children.length;
          results = [];
          for (i = 0, len = addedEntries.length; i < len; i++) {
            entry = addedEntries[i];
            view = _this.createViewForEntry(entry);
            insertionIndex = entry.indexInParentDirectory;
            if (insertionIndex < numberOfEntries) {
              _this.entries.insertBefore(view.element, _this.entries.children[insertionIndex]);
            } else {
              _this.entries.appendChild(view.element);
            }
            results.push(numberOfEntries++);
          }
          return results;
        };
      })(this)));
    };

    DirectoryView.prototype.getPath = function() {
      return this.directory.path;
    };

    DirectoryView.prototype.isPathEqual = function(pathToCompare) {
      return this.directory.isPathEqual(pathToCompare);
    };

    DirectoryView.prototype.createViewForEntry = function(entry) {
      var subscription, view;
      if (entry instanceof Directory) {
        view = new DirectoryView(entry);
      } else {
        view = new FileView(entry);
      }
      subscription = this.directory.onDidRemoveEntries(function(removedEntries) {
        var removedEntry, removedName, results;
        results = [];
        for (removedName in removedEntries) {
          removedEntry = removedEntries[removedName];
          if (!(entry === removedEntry)) {
            continue;
          }
          view.element.remove();
          subscription.dispose();
          break;
        }
        return results;
      });
      this.subscriptions.add(subscription);
      return view;
    };

    DirectoryView.prototype.reload = function() {
      if (this.isExpanded) {
        return this.directory.reload();
      }
    };

    DirectoryView.prototype.toggleExpansion = function(isRecursive) {
      if (isRecursive == null) {
        isRecursive = false;
      }
      if (this.isExpanded) {
        return this.collapse(isRecursive);
      } else {
        return this.expand(isRecursive);
      }
    };

    DirectoryView.prototype.expand = function(isRecursive) {
      var entry, i, len, ref;
      if (isRecursive == null) {
        isRecursive = false;
      }
      if (!this.isExpanded) {
        this.isExpanded = true;
        this.element.isExpanded = this.isExpanded;
        this.element.classList.add('expanded');
        this.element.classList.remove('collapsed');
        this.directory.expand();
      }
      if (isRecursive) {
        ref = this.entries.children;
        for (i = 0, len = ref.length; i < len; i++) {
          entry = ref[i];
          if (entry.classList.contains('directory')) {
            entry.expand(true);
          }
        }
      }
      return false;
    };

    DirectoryView.prototype.collapse = function(isRecursive) {
      var entry, i, len, ref;
      if (isRecursive == null) {
        isRecursive = false;
      }
      this.isExpanded = false;
      this.element.isExpanded = false;
      if (isRecursive) {
        ref = this.entries.children;
        for (i = 0, len = ref.length; i < len; i++) {
          entry = ref[i];
          if (entry.isExpanded) {
            entry.collapse(true);
          }
        }
      }
      this.element.classList.remove('expanded');
      this.element.classList.add('collapsed');
      this.directory.collapse();
      return this.entries.innerHTML = '';
    };

    return DirectoryView;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,
