Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** @babel */
/** @jsx etch.dom */
/* eslint-disable react/no-unknown-property */

var _etch = require('etch');

var _etch2 = _interopRequireDefault(_etch);

var _etchComponent = require('../etch-component');

var _etchComponent2 = _interopRequireDefault(_etchComponent);

var _updateManager = require('../update-manager');

var _updateManager2 = _interopRequireDefault(_updateManager);

var UpdateView = (function (_EtchComponent) {
  _inherits(UpdateView, _EtchComponent);

  function UpdateView(props) {
    _classCallCheck(this, UpdateView);

    _get(Object.getPrototypeOf(UpdateView.prototype), 'constructor', this).call(this, props);

    if (this.props.updateManager.getAutoUpdatesEnabled() && this.props.updateManager.getState() === _updateManager2['default'].State.Idle) {
      this.props.updateManager.checkForUpdate();
    }
  }

  _createClass(UpdateView, [{
    key: 'handleAutoUpdateCheckbox',
    value: function handleAutoUpdateCheckbox(e) {
      atom.config.set('core.automaticallyUpdate', e.target.checked);
    }
  }, {
    key: 'shouldUpdateActionButtonBeDisabled',
    value: function shouldUpdateActionButtonBeDisabled() {
      var state = this.props.updateManager.state;

      return state === _updateManager2['default'].State.CheckingForUpdate || state === _updateManager2['default'].State.DownloadingUpdate;
    }
  }, {
    key: 'executeUpdateAction',
    value: function executeUpdateAction() {
      if (this.props.updateManager.state === _updateManager2['default'].State.UpdateAvailableToInstall) {
        this.props.updateManager.restartAndInstallUpdate();
      } else {
        this.props.updateManager.checkForUpdate();
      }
    }
  }, {
    key: 'renderUpdateStatus',
    value: function renderUpdateStatus() {
      var updateStatus = '';

      switch (this.props.updateManager.state) {
        case _updateManager2['default'].State.Idle:
          updateStatus = _etch2['default'].dom(
            'div',
            { className: 'about-updates-item is-shown about-default-update-message' },
            this.props.updateManager.getAutoUpdatesEnabled() ? 'Atom will check for updates automatically' : 'Automatic updates are disabled please check manually'
          );
          break;
        case _updateManager2['default'].State.CheckingForUpdate:
          updateStatus = _etch2['default'].dom(
            'div',
            { className: 'about-updates-item app-checking-for-updates' },
            _etch2['default'].dom(
              'span',
              { className: 'about-updates-label icon icon-search' },
              'Checking for updates...'
            )
          );
          break;
        case _updateManager2['default'].State.DownloadingUpdate:
          updateStatus = _etch2['default'].dom(
            'div',
            { className: 'about-updates-item app-downloading-update' },
            _etch2['default'].dom('span', { className: 'loading loading-spinner-tiny inline-block' }),
            _etch2['default'].dom(
              'span',
              { className: 'about-updates-label' },
              'Downloading update'
            )
          );
          break;
        case _updateManager2['default'].State.UpdateAvailableToInstall:
          updateStatus = _etch2['default'].dom(
            'div',
            { className: 'about-updates-item app-update-available-to-install' },
            _etch2['default'].dom(
              'span',
              { className: 'about-updates-label icon icon-squirrel' },
              'New update'
            ),
            _etch2['default'].dom(
              'span',
              { className: 'about-updates-version' },
              this.props.availableVersion
            ),
            _etch2['default'].dom(
              'a',
              { className: 'about-updates-release-notes', onclick: this.props.viewUpdateReleaseNotes },
              'Release Notes'
            )
          );
          break;
        case _updateManager2['default'].State.UpToDate:
          updateStatus = _etch2['default'].dom(
            'div',
            { className: 'about-updates-item app-up-to-date' },
            _etch2['default'].dom('span', { className: 'icon icon-check' }),
            _etch2['default'].dom(
              'span',
              { className: 'about-updates-label is-strong' },
              'Atom is up to date!'
            )
          );
          break;
        case _updateManager2['default'].State.Error:
          updateStatus = _etch2['default'].dom(
            'div',
            { className: 'about-updates-item app-update-error' },
            _etch2['default'].dom('span', { className: 'icon icon-x' }),
            _etch2['default'].dom(
              'span',
              { className: 'about-updates-label app-error-message is-strong' },
              this.props.updateManager.getErrorMessage()
            )
          );
          break;
      }

      return updateStatus;
    }
  }, {
    key: 'render',
    value: function render() {
      return _etch2['default'].dom(
        'div',
        { className: 'about-updates group-start', style: {
            display: this.props.updateManager.state === _updateManager2['default'].State.Unsupported ? 'none' : 'block'
          } },
        _etch2['default'].dom(
          'div',
          { className: 'about-updates-box' },
          _etch2['default'].dom(
            'div',
            { className: 'about-updates-status' },
            this.renderUpdateStatus()
          ),
          _etch2['default'].dom(
            'button',
            { className: 'btn about-update-action-button', disabled: this.shouldUpdateActionButtonBeDisabled(), onclick: this.executeUpdateAction.bind(this) },
            this.props.updateManager.state === 'update-available' ? 'Restart and install' : 'Check now'
          )
        ),
        _etch2['default'].dom(
          'div',
          { className: 'about-auto-updates' },
          _etch2['default'].dom(
            'label',
            null,
            _etch2['default'].dom('input', { className: 'input-checkbox', type: 'checkbox', checked: this.props.updateManager.getAutoUpdatesEnabled(), onchange: this.handleAutoUpdateCheckbox.bind(this) }),
            _etch2['default'].dom(
              'span',
              null,
              'Automatically download updates'
            )
          )
        )
      );
    }
  }]);

  return UpdateView;
})(_etchComponent2['default']);

exports['default'] = UpdateView;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,