Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

/** @babel */
/** @jsx etch.dom */

var _atom = require('atom');

var _etch = require('etch');

var _etch2 = _interopRequireDefault(_etch);

var WindowPanelView = (function () {
  function WindowPanelView() {
    _classCallCheck(this, WindowPanelView);

    _etch2['default'].initialize(this);

    this.disposables = new _atom.CompositeDisposable();
    this.disposables.add(atom.tooltips.add(this.refs.windowTiming, { title: 'The time taken to load this window' }));
    this.disposables.add(atom.tooltips.add(this.refs.shellTiming, { title: 'The time taken to launch the app' }));
    this.disposables.add(atom.tooltips.add(this.refs.workspaceTiming, { title: 'The time taken to rebuild the previously opened editors' }));
    this.disposables.add(atom.tooltips.add(this.refs.projectTiming, { title: 'The time taken to rebuild the previously opened buffers' }));
    this.disposables.add(atom.tooltips.add(this.refs.atomTiming, { title: 'The time taken to read and parse the stored window state' }));
  }

  _createClass(WindowPanelView, [{
    key: 'update',
    value: function update() {}
  }, {
    key: 'destroy',
    value: function destroy() {
      this.disposables.dispose();
      return _etch2['default'].destroy(this);
    }
  }, {
    key: 'render',
    value: function render() {
      return _etch2['default'].dom(
        'div',
        { className: 'tool-panel padded package-panel' },
        _etch2['default'].dom(
          'div',
          { className: 'inset-panel' },
          _etch2['default'].dom(
            'div',
            { className: 'panel-heading' },
            'Startup Time'
          ),
          _etch2['default'].dom(
            'div',
            { className: 'panel-body padded' },
            _etch2['default'].dom(
              'div',
              { className: 'timing', ref: 'windowTiming' },
              _etch2['default'].dom(
                'span',
                { className: 'inline-block' },
                'Window load time'
              ),
              _etch2['default'].dom('span', { className: 'inline-block', ref: 'windowLoadTime' })
            ),
            _etch2['default'].dom(
              'div',
              { className: 'timing', ref: 'shellTiming' },
              _etch2['default'].dom(
                'span',
                { className: 'inline-block' },
                'Shell load time'
              ),
              _etch2['default'].dom('span', { className: 'inline-block', ref: 'shellLoadTime' })
            ),
            _etch2['default'].dom(
              'div',
              { ref: 'deserializeTimings' },
              _etch2['default'].dom(
                'div',
                { className: 'timing', ref: 'workspaceTiming' },
                _etch2['default'].dom(
                  'span',
                  { className: 'inline-block' },
                  'Workspace load time'
                ),
                _etch2['default'].dom('span', { className: 'inline-block', ref: 'workspaceLoadTime' })
              ),
              _etch2['default'].dom(
                'div',
                { className: 'timing', ref: 'projectTiming' },
                _etch2['default'].dom(
                  'span',
                  { className: 'inline-block' },
                  'Project load time'
                ),
                _etch2['default'].dom('span', { className: 'inline-block', ref: 'projectLoadTime' })
              ),
              _etch2['default'].dom(
                'div',
                { className: 'timing', ref: 'atomTiming' },
                _etch2['default'].dom(
                  'span',
                  { className: 'inline-block' },
                  'Window state load time'
                ),
                _etch2['default'].dom('span', { className: 'inline-block', ref: 'atomLoadTime' })
              )
            )
          )
        )
      );
    }
  }, {
    key: 'populate',
    value: function populate() {
      var time = atom.getWindowLoadTime();
      this.refs.windowLoadTime.classList.add(this.getHighlightClass(time));
      this.refs.windowLoadTime.textContent = time + 'ms';

      var _atom$getLoadSettings = atom.getLoadSettings();

      var shellLoadTime = _atom$getLoadSettings.shellLoadTime;

      if (shellLoadTime != null) {
        this.refs.shellLoadTime.classList.add(this.getHighlightClass(shellLoadTime));
        this.refs.shellLoadTime.textContent = shellLoadTime + 'ms';
      } else {
        this.refs.shellTiming.style.display = 'none';
      }

      if (atom.deserializeTimings != null) {
        this.refs.workspaceLoadTime.classList.add(this.getHighlightClass(atom.deserializeTimings.workspace));
        this.refs.workspaceLoadTime.textContent = atom.deserializeTimings.workspace + 'ms';
        this.refs.projectLoadTime.classList.add(this.getHighlightClass(atom.deserializeTimings.project));
        this.refs.projectLoadTime.textContent = atom.deserializeTimings.project + 'ms';
        this.refs.atomLoadTime.classList.add(this.getHighlightClass(atom.deserializeTimings.atom));
        this.refs.atomLoadTime.textContent = atom.deserializeTimings.atom + 'ms';
      } else {
        this.refs.deserializeTimings.style.display = 'none';
      }
    }
  }, {
    key: 'getHighlightClass',
    value: function getHighlightClass(time) {
      if (time > 1000) {
        return 'highlight-error';
      } else if (time > 800) {
        return 'highlight-warning';
      } else {
        return 'highlight-info';
      }
    }
  }]);

  return WindowPanelView;
})();

exports['default'] = WindowPanelView;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,