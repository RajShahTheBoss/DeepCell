Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

/** @babel */

var _atomSelectList = require('atom-select-list');

var _atomSelectList2 = _interopRequireDefault(_atomSelectList);

var _underscorePlus = require('underscore-plus');

var _fuzzaldrin = require('fuzzaldrin');

var _fuzzaldrin2 = _interopRequireDefault(_fuzzaldrin);

var _fuzzaldrinPlus = require('fuzzaldrin-plus');

var _fuzzaldrinPlus2 = _interopRequireDefault(_fuzzaldrinPlus);

var CommandPaletteView = (function () {
  function CommandPaletteView() {
    var _this = this;

    _classCallCheck(this, CommandPaletteView);

    this.keyBindingsForActiveElement = [];
    this.commandsForActiveElement = [];
    this.selectListView = new _atomSelectList2['default']({
      items: this.commandsForActiveElement,
      emptyMessage: 'No matches found',
      filterKeyForItem: function filterKeyForItem(item) {
        return item.displayName;
      },
      elementForItem: function elementForItem(_ref) {
        var name = _ref.name;
        var displayName = _ref.displayName;

        var li = document.createElement('li');
        li.classList.add('event');
        li.dataset.eventName = name;

        var div = document.createElement('div');
        div.classList.add('pull-right');
        for (var keyBinding of _this.keyBindingsForActiveElement) {
          if (keyBinding.command === name) {
            var kbd = document.createElement('kbd');
            kbd.classList.add('key-binding');
            kbd.textContent = (0, _underscorePlus.humanizeKeystroke)(keyBinding.keystrokes);
            div.appendChild(kbd);
          }
        }
        li.appendChild(div);

        var span = document.createElement('span');
        span.title = name;

        var query = _this.selectListView.getQuery();
        var matches = _this.useAlternateScoring ? _fuzzaldrinPlus2['default'].match(displayName, query) : _fuzzaldrin2['default'].match(displayName, query);
        var matchedChars = [];
        var lastIndex = 0;
        for (var matchIndex of matches) {
          var _unmatched = displayName.substring(lastIndex, matchIndex);
          if (_unmatched) {
            if (matchedChars.length > 0) {
              var matchSpan = document.createElement('span');
              matchSpan.classList.add('character-match');
              matchSpan.textContent = matchedChars.join('');
              span.appendChild(matchSpan);
              matchedChars = [];
            }

            span.appendChild(document.createTextNode(_unmatched));
          }

          matchedChars.push(displayName[matchIndex]);
          lastIndex = matchIndex + 1;
        }

        if (matchedChars.length > 0) {
          var matchSpan = document.createElement('span');
          matchSpan.classList.add('character-match');
          matchSpan.textContent = matchedChars.join('');
          span.appendChild(matchSpan);
        }

        var unmatched = displayName.substring(lastIndex);
        if (unmatched) {
          span.appendChild(document.createTextNode(unmatched));
        }

        li.appendChild(span);
        return li;
      },
      didConfirmSelection: function didConfirmSelection(keyBinding) {
        _this.hide();
        var event = new CustomEvent(keyBinding.name, { bubbles: true, cancelable: true });
        _this.activeElement.dispatchEvent(event);
      },
      didCancelSelection: function didCancelSelection() {
        _this.hide();
      }
    });
    this.selectListView.element.classList.add('command-palette');
  }

  _createClass(CommandPaletteView, [{
    key: 'destroy',
    value: _asyncToGenerator(function* () {
      yield this.selectListView.destroy();
    })
  }, {
    key: 'toggle',
    value: function toggle() {
      if (this.panel && this.panel.isVisible()) {
        this.hide();
        return Promise.resolve();
      } else {
        return this.show();
      }
    }
  }, {
    key: 'show',
    value: _asyncToGenerator(function* () {
      if (!this.panel) {
        this.panel = atom.workspace.addModalPanel({ item: this.selectListView });
      }

      if (!this.preserveLastSearch) {
        this.selectListView.reset();
      } else {
        this.selectListView.refs.queryEditor.selectAll();
      }

      this.activeElement = document.activeElement === document.body ? atom.views.getView(atom.workspace) : document.activeElement;
      this.keyBindingsForActiveElement = atom.keymaps.findKeyBindings({ target: this.activeElement });
      this.commandsForActiveElement = atom.commands.findCommands({ target: this.activeElement });
      this.commandsForActiveElement.sort(function (a, b) {
        return a.displayName.localeCompare(b.displayName);
      });
      yield this.selectListView.update({ items: this.commandsForActiveElement });

      this.previouslyFocusedElement = document.activeElement;
      this.panel.show();
      this.selectListView.focus();
    })
  }, {
    key: 'hide',
    value: function hide() {
      this.panel.hide();
      if (this.previouslyFocusedElement) {
        this.previouslyFocusedElement.focus();
        this.previouslyFocusedElement = null;
      }
    }
  }, {
    key: 'update',
    value: _asyncToGenerator(function* (props) {
      if (props.hasOwnProperty('preserveLastSearch')) {
        this.preserveLastSearch = props.preserveLastSearch;
      }

      if (props.hasOwnProperty('useAlternateScoring')) {
        this.useAlternateScoring = props.useAlternateScoring;
        if (this.useAlternateScoring) {
          yield this.selectListView.update({
            filter: function filter(items, query) {
              return query ? _fuzzaldrinPlus2['default'].filter(items, query, { key: 'displayName' }) : items;
            }
          });
        } else {
          yield this.selectListView.update({ filter: null });
        }
      }
    })
  }]);

  return CommandPaletteView;
})();

exports['default'] = CommandPaletteView;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,