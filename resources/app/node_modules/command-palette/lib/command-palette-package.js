Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

/** @babel */

var _atom = require('atom');

var _commandPaletteView = require('./command-palette-view');

var _commandPaletteView2 = _interopRequireDefault(_commandPaletteView);

var CommandPalettePackage = (function () {
  function CommandPalettePackage() {
    _classCallCheck(this, CommandPalettePackage);
  }

  _createClass(CommandPalettePackage, [{
    key: 'activate',
    value: function activate() {
      var _this = this;

      this.commandPaletteView = new _commandPaletteView2['default']();
      this.disposables = new _atom.CompositeDisposable();
      this.disposables.add(atom.commands.add('atom-workspace', 'command-palette:toggle', function () {
        _this.commandPaletteView.toggle();
      }));
      this.disposables.add(atom.config.observe('command-palette.useAlternateScoring', function (newValue) {
        _this.commandPaletteView.update({ useAlternateScoring: newValue });
      }));
      this.disposables.add(atom.config.observe('command-palette.preserveLastSearch', function (newValue) {
        _this.commandPaletteView.update({ preserveLastSearch: newValue });
      }));
      return this.commandPaletteView.show();
    }
  }, {
    key: 'deactivate',
    value: _asyncToGenerator(function* () {
      this.disposables.dispose();
      yield this.commandPaletteView.destroy();
    })
  }]);

  return CommandPalettePackage;
})();

var pack = new CommandPalettePackage();
exports['default'] = pack;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vQzovcHJvamVjdHMvYXRvbS9vdXQvYXBwL25vZGVfbW9kdWxlcy9jb21tYW5kLXBhbGV0dGUvbGliL2NvbW1hbmQtcGFsZXR0ZS1wYWNrYWdlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O29CQUVrQyxNQUFNOztrQ0FDVCx3QkFBd0I7Ozs7SUFFakQscUJBQXFCO1dBQXJCLHFCQUFxQjswQkFBckIscUJBQXFCOzs7ZUFBckIscUJBQXFCOztXQUNoQixvQkFBRzs7O0FBQ1YsVUFBSSxDQUFDLGtCQUFrQixHQUFHLHFDQUF3QixDQUFBO0FBQ2xELFVBQUksQ0FBQyxXQUFXLEdBQUcsK0JBQXlCLENBQUE7QUFDNUMsVUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsd0JBQXdCLEVBQUUsWUFBTTtBQUN2RixjQUFLLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxDQUFBO09BQ2pDLENBQUMsQ0FBQyxDQUFBO0FBQ0gsVUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMscUNBQXFDLEVBQUUsVUFBQyxRQUFRLEVBQUs7QUFDNUYsY0FBSyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsRUFBQyxtQkFBbUIsRUFBRSxRQUFRLEVBQUMsQ0FBQyxDQUFBO09BQ2hFLENBQUMsQ0FBQyxDQUFBO0FBQ0gsVUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsb0NBQW9DLEVBQUUsVUFBQyxRQUFRLEVBQUs7QUFDM0YsY0FBSyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsRUFBQyxrQkFBa0IsRUFBRSxRQUFRLEVBQUMsQ0FBQyxDQUFBO09BQy9ELENBQUMsQ0FBQyxDQUFBO0FBQ0gsYUFBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDdEM7Ozs2QkFFZ0IsYUFBRztBQUNsQixVQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFBO0FBQzFCLFlBQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sRUFBRSxDQUFBO0tBQ3hDOzs7U0FuQkcscUJBQXFCOzs7QUFzQjNCLElBQU0sSUFBSSxHQUFHLElBQUkscUJBQXFCLEVBQUUsQ0FBQTtxQkFDekIsSUFBSSIsImZpbGUiOiJmaWxlOi8vL0M6L3Byb2plY3RzL2F0b20vb3V0L2FwcC9ub2RlX21vZHVsZXMvY29tbWFuZC1wYWxldHRlL2xpYi9jb21tYW5kLXBhbGV0dGUtcGFja2FnZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAYmFiZWwgKi9cblxuaW1wb3J0IHtDb21wb3NpdGVEaXNwb3NhYmxlfSBmcm9tICdhdG9tJ1xuaW1wb3J0IENvbW1hbmRQYWxldHRlVmlldyBmcm9tICcuL2NvbW1hbmQtcGFsZXR0ZS12aWV3J1xuXG5jbGFzcyBDb21tYW5kUGFsZXR0ZVBhY2thZ2Uge1xuICBhY3RpdmF0ZSAoKSB7XG4gICAgdGhpcy5jb21tYW5kUGFsZXR0ZVZpZXcgPSBuZXcgQ29tbWFuZFBhbGV0dGVWaWV3KClcbiAgICB0aGlzLmRpc3Bvc2FibGVzID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICAgIHRoaXMuZGlzcG9zYWJsZXMuYWRkKGF0b20uY29tbWFuZHMuYWRkKCdhdG9tLXdvcmtzcGFjZScsICdjb21tYW5kLXBhbGV0dGU6dG9nZ2xlJywgKCkgPT4ge1xuICAgICAgdGhpcy5jb21tYW5kUGFsZXR0ZVZpZXcudG9nZ2xlKClcbiAgICB9KSlcbiAgICB0aGlzLmRpc3Bvc2FibGVzLmFkZChhdG9tLmNvbmZpZy5vYnNlcnZlKCdjb21tYW5kLXBhbGV0dGUudXNlQWx0ZXJuYXRlU2NvcmluZycsIChuZXdWYWx1ZSkgPT4ge1xuICAgICAgdGhpcy5jb21tYW5kUGFsZXR0ZVZpZXcudXBkYXRlKHt1c2VBbHRlcm5hdGVTY29yaW5nOiBuZXdWYWx1ZX0pXG4gICAgfSkpXG4gICAgdGhpcy5kaXNwb3NhYmxlcy5hZGQoYXRvbS5jb25maWcub2JzZXJ2ZSgnY29tbWFuZC1wYWxldHRlLnByZXNlcnZlTGFzdFNlYXJjaCcsIChuZXdWYWx1ZSkgPT4ge1xuICAgICAgdGhpcy5jb21tYW5kUGFsZXR0ZVZpZXcudXBkYXRlKHtwcmVzZXJ2ZUxhc3RTZWFyY2g6IG5ld1ZhbHVlfSlcbiAgICB9KSlcbiAgICByZXR1cm4gdGhpcy5jb21tYW5kUGFsZXR0ZVZpZXcuc2hvdygpXG4gIH1cblxuICBhc3luYyBkZWFjdGl2YXRlICgpIHtcbiAgICB0aGlzLmRpc3Bvc2FibGVzLmRpc3Bvc2UoKVxuICAgIGF3YWl0IHRoaXMuY29tbWFuZFBhbGV0dGVWaWV3LmRlc3Ryb3koKVxuICB9XG59XG5cbmNvbnN0IHBhY2sgPSBuZXcgQ29tbWFuZFBhbGV0dGVQYWNrYWdlKClcbmV4cG9ydCBkZWZhdWx0IHBhY2tcbiJdfQ==