'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _desc, _value, _class, _class2, _temp, _class3, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _coreDecorators = require('core-decorators');

var _simpleTooltip = require('./simple-tooltip');

var _simpleTooltip2 = _interopRequireDefault(_simpleTooltip);

var _contextMenuInterceptor = require('../context-menu-interceptor');

var _contextMenuInterceptor2 = _interopRequireDefault(_contextMenuInterceptor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

let HunkView = (_class = (_temp = _class2 = class HunkView extends _react2.default.Component {

  constructor(props, context) {
    super(props, context);

    this.lineElements = new WeakMap();
    this.lastMousemoveLine = null;
  }

  render() {
    const hunkSelectedClass = this.props.isSelected ? 'is-selected' : '';
    const hunkModeClass = this.props.hunkSelectionMode ? 'is-hunkMode' : '';

    return _react2.default.createElement(
      'div',
      { className: `github-HunkView ${hunkModeClass} ${hunkSelectedClass}`, ref: e => {
          this.element = e;
        } },
      _react2.default.createElement(
        'div',
        { className: 'github-HunkView-header',
          onMouseDown: e => this.props.mousedownOnHeader(e) },
        _react2.default.createElement(
          'span',
          { className: 'github-HunkView-title' },
          this.props.hunk.getHeader().trim(),
          ' ',
          this.props.hunk.getSectionHeading().trim()
        ),
        _react2.default.createElement(
          'button',
          {
            className: 'github-HunkView-stageButton',
            onClick: this.props.didClickStageButton,
            onMouseDown: event => event.stopPropagation() },
          this.props.stageButtonLabel
        ),
        this.props.unstaged && _react2.default.createElement(
          _simpleTooltip2.default,
          {
            tooltips: this.props.tooltips,
            title: this.props.discardButtonLabel },
          _react2.default.createElement('button', {
            className: 'icon-trashcan github-HunkView-discardButton',
            onClick: this.props.didClickDiscardButton,
            onMouseDown: event => event.stopPropagation()
          })
        )
      ),
      this.props.hunk.getLines().map((line, idx) => _react2.default.createElement(LineView, {
        key: idx,
        line: line,
        isSelected: this.props.selectedLines.has(line),
        registerLineElement: this.registerLineElement,
        mousedown: this.mousedownOnLine,
        mousemove: this.mousemoveOnLine,
        contextMenuOnItem: (e, clickedLine) => this.props.contextMenuOnItem(e, this.props.hunk, clickedLine)
      }))
    );
  }

  mousedownOnLine(event, line) {
    this.props.mousedownOnLine(event, this.props.hunk, line);
  }

  mousemoveOnLine(event, line) {
    if (line !== this.lastMousemoveLine) {
      this.lastMousemoveLine = line;
      this.props.mousemoveOnLine(event, this.props.hunk, line);
    }
  }

  registerLineElement(line, element) {
    this.lineElements.set(line, element);
  }

  componentDidUpdate() {
    const selectedLine = Array.from(this.props.selectedLines)[0];
    if (selectedLine && this.lineElements.get(selectedLine)) {
      // QUESTION: why is this setTimeout needed?
      const element = this.lineElements.get(selectedLine);
      setTimeout(() => {
        element.scrollIntoViewIfNeeded();
      }, 0);
    } else if (this.props.headHunk === this.props.hunk) {
      this.element.scrollIntoViewIfNeeded();
    } else if (this.props.headLine && this.lineElements.has(this.props.headLine)) {
      this.lineElements.get(this.props.headLine).scrollIntoViewIfNeeded();
    }
  }
}, _class2.propTypes = {
  tooltips: _propTypes2.default.object.isRequired,
  hunk: _propTypes2.default.object.isRequired,
  headHunk: _propTypes2.default.object,
  headLine: _propTypes2.default.object,
  isSelected: _propTypes2.default.bool.isRequired,
  selectedLines: _propTypes2.default.instanceOf(Set).isRequired,
  hunkSelectionMode: _propTypes2.default.bool.isRequired,
  stageButtonLabel: _propTypes2.default.string.isRequired,
  discardButtonLabel: _propTypes2.default.string.isRequired,
  unstaged: _propTypes2.default.bool.isRequired,
  mousedownOnHeader: _propTypes2.default.func.isRequired,
  mousedownOnLine: _propTypes2.default.func.isRequired,
  mousemoveOnLine: _propTypes2.default.func.isRequired,
  contextMenuOnItem: _propTypes2.default.func.isRequired,
  didClickStageButton: _propTypes2.default.func.isRequired,
  didClickDiscardButton: _propTypes2.default.func.isRequired
}, _temp), (_applyDecoratedDescriptor(_class.prototype, 'mousedownOnLine', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'mousedownOnLine'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'mousemoveOnLine', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'mousemoveOnLine'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'registerLineElement', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'registerLineElement'), _class.prototype)), _class);
exports.default = HunkView;
let LineView = (_temp2 = _class3 = class LineView extends _react2.default.Component {

  render() {
    const line = this.props.line;
    const oldLineNumber = line.getOldLineNumber() === -1 ? ' ' : line.getOldLineNumber();
    const newLineNumber = line.getNewLineNumber() === -1 ? ' ' : line.getNewLineNumber();
    const lineSelectedClass = this.props.isSelected ? 'is-selected' : '';

    return _react2.default.createElement(
      _contextMenuInterceptor2.default,
      { onWillShowContextMenu: event => this.props.contextMenuOnItem(event, line) },
      _react2.default.createElement(
        'div',
        {
          className: `github-HunkView-line ${lineSelectedClass} is-${line.getStatus()}`,
          onMouseDown: event => this.props.mousedown(event, line),
          onMouseMove: event => this.props.mousemove(event, line),
          ref: e => this.props.registerLineElement(line, e) },
        _react2.default.createElement(
          'div',
          { className: 'github-HunkView-lineNumber is-old' },
          oldLineNumber
        ),
        _react2.default.createElement(
          'div',
          { className: 'github-HunkView-lineNumber is-new' },
          newLineNumber
        ),
        _react2.default.createElement(
          'div',
          { className: 'github-HunkView-lineContent' },
          _react2.default.createElement(
            'span',
            { className: 'github-HunkView-plusMinus' },
            line.getOrigin()
          ),
          _react2.default.createElement(
            'span',
            null,
            line.getText()
          )
        )
      )
    );
  }
}, _class3.propTypes = {
  line: _propTypes2.default.object.isRequired,
  isSelected: _propTypes2.default.bool.isRequired,
  mousedown: _propTypes2.default.func.isRequired,
  mousemove: _propTypes2.default.func.isRequired,
  contextMenuOnItem: _propTypes2.default.func.isRequired,
  registerLineElement: _propTypes2.default.func.isRequired
}, _temp2);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,