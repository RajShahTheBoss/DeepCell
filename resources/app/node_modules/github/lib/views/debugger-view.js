'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _etch = require('etch');

var _etch2 = _interopRequireDefault(_etch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } /** @jsx etch.dom */
/* eslint react/no-unknown-property: "off" */

const defaultStyle = {
  position: 'fixed',
  zIndex: 100000000,
  backgroundColor: 'white',
  minWidth: '300px',
  minHeight: '300px',
  top: '400px',
  left: '600px',
  maxWidth: '800px',
  maxHeight: '400px',
  overflow: 'auto',
  whiteSpace: 'pre',
  fontFamily: 'monospace',
  border: '3px solid black'
};

let DebuggerView = class DebuggerView {
  constructor(props) {
    this.props = props;
    _etch2.default.initialize(this);
  }

  update(props) {
    this.props = props;
    _etch2.default.update(this);
  }

  render() {
    var _props = this.props;

    const data = _props.data,
          style = _props.style,
          others = _objectWithoutProperties(_props, ['data', 'style']);

    const finalStyle = _extends({}, defaultStyle, style);

    return _etch2.default.dom(
      'div',
      _extends({ style: finalStyle }, others),
      JSON.stringify(data, null, '  ')
    );
  }
};
exports.default = DebuggerView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlYnVnZ2VyLXZpZXcuanMiXSwibmFtZXMiOlsiZGVmYXVsdFN0eWxlIiwicG9zaXRpb24iLCJ6SW5kZXgiLCJiYWNrZ3JvdW5kQ29sb3IiLCJtaW5XaWR0aCIsIm1pbkhlaWdodCIsInRvcCIsImxlZnQiLCJtYXhXaWR0aCIsIm1heEhlaWdodCIsIm92ZXJmbG93Iiwid2hpdGVTcGFjZSIsImZvbnRGYW1pbHkiLCJib3JkZXIiLCJEZWJ1Z2dlclZpZXciLCJjb25zdHJ1Y3RvciIsInByb3BzIiwiaW5pdGlhbGl6ZSIsInVwZGF0ZSIsInJlbmRlciIsImRhdGEiLCJzdHlsZSIsIm90aGVycyIsImZpbmFsU3R5bGUiLCJKU09OIiwic3RyaW5naWZ5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFHQTs7Ozs7OzZOQUhBO0FBQ0E7O0FBSUEsTUFBTUEsZUFBZTtBQUNuQkMsWUFBVSxPQURTO0FBRW5CQyxVQUFRLFNBRlc7QUFHbkJDLG1CQUFpQixPQUhFO0FBSW5CQyxZQUFVLE9BSlM7QUFLbkJDLGFBQVcsT0FMUTtBQU1uQkMsT0FBSyxPQU5jO0FBT25CQyxRQUFNLE9BUGE7QUFRbkJDLFlBQVUsT0FSUztBQVNuQkMsYUFBVyxPQVRRO0FBVW5CQyxZQUFVLE1BVlM7QUFXbkJDLGNBQVksS0FYTztBQVluQkMsY0FBWSxXQVpPO0FBYW5CQyxVQUFRO0FBYlcsQ0FBckI7O0lBZ0JxQkMsWSxHQUFOLE1BQU1BLFlBQU4sQ0FBbUI7QUFDaENDLGNBQVlDLEtBQVosRUFBbUI7QUFDakIsU0FBS0EsS0FBTCxHQUFhQSxLQUFiO0FBQ0EsbUJBQUtDLFVBQUwsQ0FBZ0IsSUFBaEI7QUFDRDs7QUFFREMsU0FBT0YsS0FBUCxFQUFjO0FBQ1osU0FBS0EsS0FBTCxHQUFhQSxLQUFiO0FBQ0EsbUJBQUtFLE1BQUwsQ0FBWSxJQUFaO0FBQ0Q7O0FBRURDLFdBQVM7QUFBQSxpQkFDMEIsS0FBS0gsS0FEL0I7O0FBQUEsVUFDQUksSUFEQSxVQUNBQSxJQURBO0FBQUEsVUFDTUMsS0FETixVQUNNQSxLQUROO0FBQUEsVUFDZ0JDLE1BRGhCOztBQUVQLFVBQU1DLDBCQUNEdkIsWUFEQyxFQUVEcUIsS0FGQyxDQUFOOztBQUtBLFdBQU87QUFBQTtBQUFBLGlCQUFLLE9BQU9FLFVBQVosSUFBNEJELE1BQTVCO0FBQXFDRSxXQUFLQyxTQUFMLENBQWVMLElBQWYsRUFBcUIsSUFBckIsRUFBMkIsSUFBM0I7QUFBckMsS0FBUDtBQUNEO0FBbkIrQixDO2tCQUFiTixZIiwiZmlsZSI6ImRlYnVnZ2VyLXZpZXcuanMiLCJzb3VyY2VSb290IjoiQzovcHJvamVjdHMvYXRvbS9vdXQvYXBwL25vZGVfbW9kdWxlcy9naXRodWIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGpzeCBldGNoLmRvbSAqL1xuLyogZXNsaW50IHJlYWN0L25vLXVua25vd24tcHJvcGVydHk6IFwib2ZmXCIgKi9cblxuaW1wb3J0IGV0Y2ggZnJvbSAnZXRjaCc7XG5cbmNvbnN0IGRlZmF1bHRTdHlsZSA9IHtcbiAgcG9zaXRpb246ICdmaXhlZCcsXG4gIHpJbmRleDogMTAwMDAwMDAwLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXG4gIG1pbldpZHRoOiAnMzAwcHgnLFxuICBtaW5IZWlnaHQ6ICczMDBweCcsXG4gIHRvcDogJzQwMHB4JyxcbiAgbGVmdDogJzYwMHB4JyxcbiAgbWF4V2lkdGg6ICc4MDBweCcsXG4gIG1heEhlaWdodDogJzQwMHB4JyxcbiAgb3ZlcmZsb3c6ICdhdXRvJyxcbiAgd2hpdGVTcGFjZTogJ3ByZScsXG4gIGZvbnRGYW1pbHk6ICdtb25vc3BhY2UnLFxuICBib3JkZXI6ICczcHggc29saWQgYmxhY2snLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGVidWdnZXJWaWV3IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgZXRjaC5pbml0aWFsaXplKHRoaXMpO1xuICB9XG5cbiAgdXBkYXRlKHByb3BzKSB7XG4gICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgIGV0Y2gudXBkYXRlKHRoaXMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtkYXRhLCBzdHlsZSwgLi4ub3RoZXJzfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgZmluYWxTdHlsZSA9IHtcbiAgICAgIC4uLmRlZmF1bHRTdHlsZSxcbiAgICAgIC4uLnN0eWxlLFxuICAgIH07XG5cbiAgICByZXR1cm4gPGRpdiBzdHlsZT17ZmluYWxTdHlsZX0gey4uLm90aGVyc30+e0pTT04uc3RyaW5naWZ5KGRhdGEsIG51bGwsICcgICcpfTwvZGl2PjtcbiAgfVxufVxuIl19