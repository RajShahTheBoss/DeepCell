'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _desc, _value, _class, _class2, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _coreDecorators = require('core-decorators');

var _propTypes3 = require('../prop-types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

let PushPullMenuView = (_class = (_temp = _class2 = class PushPullMenuView extends _react2.default.Component {

  constructor(props, context) {
    super(props, context);

    this.state = {
      errorMessage: ''
    };
  }

  render() {
    const errorMessage = this.getErrorMessage();
    const fetchDisabled = !this.props.currentRemote.isPresent() || this.props.inProgress;
    const pullDisabled = !this.props.currentRemote.isPresent() || this.props.currentBranch.isDetached() || this.props.inProgress;
    const pushDisabled = this.props.currentBranch.isDetached() || !this.props.currentRemote.isPresent() && !this.props.originExists || this.props.inProgress;

    return _react2.default.createElement(
      'div',
      { className: 'github-PushPullMenuView' + (this.props.inProgress ? ' in-progress' : '') },
      _react2.default.createElement(
        'div',
        { className: 'github-PushPullMenuView-selector' },
        _react2.default.createElement('span', { className: 'github-PushPullMenuView-item icon icon-mark-github', onClick: this.handleIconClick }),
        _react2.default.createElement(
          'button',
          { className: 'github-PushPullMenuView-item btn', onClick: this.fetch, disabled: fetchDisabled },
          'Fetch'
        ),
        _react2.default.createElement(
          'div',
          { className: 'github-PushPullMenuView-item is-flexible btn-group' },
          _react2.default.createElement(
            'button',
            { className: 'btn github-PushPullMenuView-pull', onClick: this.pull, disabled: pullDisabled },
            _react2.default.createElement('span', { className: 'icon icon-arrow-down' }),
            _react2.default.createElement(
              'span',
              null,
              'Pull ',
              this.props.behindCount ? `(${this.props.behindCount})` : ''
            )
          ),
          _react2.default.createElement(
            'button',
            { className: 'btn github-PushPullMenuView-push', onClick: this.push, disabled: pushDisabled },
            _react2.default.createElement('span', { className: 'icon icon-arrow-up' }),
            _react2.default.createElement(
              'span',
              null,
              'Push ',
              this.props.aheadCount ? `(${this.props.aheadCount})` : ''
            )
          )
        )
      ),
      _react2.default.createElement(
        'div',
        { className: 'github-PushPullMenuView-message' },
        errorMessage
      )
    );
  }

  getErrorMessage() {
    if (this.state.errorMessage !== '') {
      return this.state.errorMessage;
    }

    if (this.props.currentBranch.isDetached()) {
      return 'Note: you are not on a branch. Please create one if you wish to push your work anywhere.';
    }

    if (!this.props.currentRemote.isPresent()) {
      if (this.props.originExists) {
        return `Note: No remote detected for branch ${this.props.currentBranch.getName()}. ` + 'Pushing will set up a remote tracking branch on remote repo "origin"';
      } else {
        return `Note: No remote detected for branch ${this.props.currentBranch.getName()}. ` + 'Cannot push because there is no remote named "origin" for which to create a remote tracking branch.';
      }
    }

    return '';
  }

  handleIconClick(evt) {
    if (evt.shiftKey) {
      this.props.onMarkSpecialClick();
    }
  }

  fetch() {
    return this.props.fetch();
  }

  pull() {
    return this.props.pull();
  }

  push(e) {
    return this.props.push({ force: e.metaKey || e.ctrlKey, setUpstream: !this.props.currentRemote.isPresent() });
  }
}, _class2.propTypes = {
  currentBranch: _propTypes3.BranchPropType.isRequired,
  currentRemote: _propTypes3.RemotePropType.isRequired,
  inProgress: _propTypes2.default.bool,
  aheadCount: _propTypes2.default.number,
  behindCount: _propTypes2.default.number,
  onMarkSpecialClick: _propTypes2.default.func.isRequired,
  fetch: _propTypes2.default.func.isRequired,
  push: _propTypes2.default.func.isRequired,
  pull: _propTypes2.default.func.isRequired,
  originExists: _propTypes2.default.bool.isRequired
}, _class2.defaultProps = {
  inProgress: false,
  onMarkSpecialClick: () => {}
}, _temp), (_applyDecoratedDescriptor(_class.prototype, 'handleIconClick', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'handleIconClick'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'fetch', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'fetch'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'pull', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'pull'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'push', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'push'), _class.prototype)), _class);
exports.default = PushPullMenuView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,