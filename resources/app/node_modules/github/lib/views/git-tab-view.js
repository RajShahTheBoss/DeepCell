'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _desc, _value, _class, _class2, _temp; /** @jsx etch.dom */
/* eslint react/no-unknown-property: "off" */

var _etch = require('etch');

var _etch2 = _interopRequireDefault(_etch);

var _coreDecorators = require('core-decorators');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _stagingView = require('./staging-view');

var _stagingView2 = _interopRequireDefault(_stagingView);

var _gitLogo = require('./git-logo');

var _gitLogo2 = _interopRequireDefault(_gitLogo);

var _commitViewController = require('../controllers/commit-view-controller');

var _commitViewController2 = _interopRequireDefault(_commitViewController);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

let GitTabView = (_class = (_temp = _class2 = class GitTabView {

  constructor(props) {
    this.props = props;
    _etch2.default.initialize(this);

    this.subscriptions = this.props.commandRegistry.add(this.element, {
      'tool-panel:unfocus': this.blur,
      'core:focus-next': this.advanceFocus,
      'core:focus-previous': this.retreatFocus
    });
  }

  update(props) {
    this.props = props;
    return _etch2.default.update(this);
  }

  render() {
    if (this.props.repository.showGitTabInit()) {
      const inProgress = this.props.repository.showGitTabInitInProgress();
      const message = this.props.repository.hasDirectory() ? 'Initialize this project directory with a git repository' : 'Initialize a new project directory with a git repository';

      return _etch2.default.dom(
        'div',
        { className: 'github-Panel is-empty', tabIndex: '-1' },
        _etch2.default.dom(
          'div',
          { ref: 'noRepoMessage', className: 'github-Panel no-repository' },
          _etch2.default.dom(
            'div',
            { className: 'large-icon' },
            _etch2.default.dom(_gitLogo2.default, null)
          ),
          _etch2.default.dom(
            'div',
            { className: 'initialize-repo-description' },
            message
          ),
          _etch2.default.dom(
            'button',
            { onclick: this.initializeRepo, disabled: inProgress, className: 'btn btn-primary' },
            inProgress ? 'Creating repository...' : 'Create repository'
          )
        )
      );
    } else {
      const isLoading = this.props.fetchInProgress || this.props.repository.showGitTabLoading();

      return _etch2.default.dom(
        'div',
        { className: (0, _classnames2.default)('github-Panel', { 'is-loading': isLoading }), tabIndex: '-1' },
        _etch2.default.dom(_stagingView2.default, {
          ref: 'stagingView',
          commandRegistry: this.props.commandRegistry,
          stagedChanges: this.props.stagedChanges,
          unstagedChanges: this.props.unstagedChanges,
          mergeConflicts: this.props.mergeConflicts,
          workingDirectoryPath: this.props.workingDirectoryPath,
          resolutionProgress: this.props.resolutionProgress,
          didSelectFilePath: this.props.didSelectFilePath,
          didSelectMergeConflictFile: this.props.didSelectMergeConflictFile,
          didDiveIntoFilePath: this.props.didDiveIntoFilePath,
          didDiveIntoMergeConflictPath: this.props.didDiveIntoMergeConflictPath,
          openFiles: this.props.openFiles,
          discardWorkDirChangesForPaths: this.props.discardWorkDirChangesForPaths,
          focusFilePatchView: this.props.focusFilePatchView,
          attemptFileStageOperation: this.props.attemptFileStageOperation,
          undoLastDiscard: this.props.undoLastDiscard,
          abortMerge: this.props.abortMerge,
          resolveAsOurs: this.props.resolveAsOurs,
          resolveAsTheirs: this.props.resolveAsTheirs,
          lastCommit: this.props.lastCommit,
          isLoading: this.props.isLoading,
          isAmending: this.props.isAmending,
          hasUndoHistory: this.props.hasUndoHistory,
          isMerging: this.props.isMerging
        }),
        _etch2.default.dom(_commitViewController2.default, {
          ref: 'commitViewController',
          stagedChangesExist: this.props.stagedChanges.length > 0,
          mergeConflictsExist: this.props.mergeConflicts.length > 0,
          prepareToCommit: this.props.prepareToCommit,
          commit: this.props.commit,
          amending: this.props.amending,
          setAmending: this.props.setAmending,
          abortMerge: this.props.abortMerge,
          branchName: this.props.branchName,
          commandRegistry: this.props.commandRegistry,
          notificationManager: this.props.notificationManager,
          mergeMessage: this.props.mergeMessage,
          isMerging: this.props.isMerging,
          isAmending: this.props.isAmending,
          isLoading: this.props.isLoading,
          lastCommit: this.props.lastCommit,
          repository: this.props.repository
        })
      );
    }
  }

  destroy() {
    this.subscriptions.dispose();
    return _etch2.default.destroy(this);
  }

  initializeRepo(event) {
    var _this = this;

    return _asyncToGenerator(function* () {
      event.preventDefault();
      yield _this.props.initializeRepo();
    })();
  }

  rememberFocus(event) {
    let currentFocus = null;

    if (this.refs.stagingView) {
      currentFocus = this.refs.stagingView.rememberFocus(event);
    }

    if (!currentFocus && this.refs.commitViewController) {
      currentFocus = this.refs.commitViewController.rememberFocus(event);
    }

    return currentFocus;
  }

  setFocus(focus) {
    if (this.refs.stagingView) {
      if (this.refs.stagingView.setFocus(focus)) {
        return true;
      }
    }

    if (this.refs.commitViewController) {
      if (this.refs.commitViewController.setFocus(focus)) {
        return true;
      }
    }

    return false;
  }

  blur() {
    this.props.workspace.getActivePane().activate();
  }

  advanceFocus() {
    if (!this.refs.stagingView.activateNextList()) {
      this.refs.commitViewController.setFocus(GitTabView.focus.EDITOR);
    }
  }

  retreatFocus() {
    var _refs = this.refs;
    const stagingView = _refs.stagingView,
          commitViewController = _refs.commitViewController;


    if (commitViewController.hasFocus()) {
      if (stagingView.activateLastList()) {
        this.setFocus(GitTabView.focus.STAGING);
      }
    } else {
      stagingView.activatePreviousList();
    }
  }

  focusAndSelectStagingItem(filePath, stagingStatus) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      yield _this2.refs.stagingView.quietlySelectItem(filePath, stagingStatus);
      _this2.setFocus(GitTabView.focus.STAGING);
    })();
  }

  hasFocus() {
    return this.element.contains(document.activeElement);
  }

  quietlySelectItem(filePath, stagingStatus) {
    return this.refs.stagingView.quietlySelectItem(filePath, stagingStatus);
  }
}, _class2.focus = _extends({}, _stagingView2.default.focus, _commitViewController2.default.focus), _temp), (_applyDecoratedDescriptor(_class.prototype, 'initializeRepo', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'initializeRepo'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'blur', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'blur'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'advanceFocus', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'advanceFocus'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'retreatFocus', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'retreatFocus'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'quietlySelectItem', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'quietlySelectItem'), _class.prototype)), _class);
exports.default = GitTabView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,