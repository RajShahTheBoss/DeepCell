'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _portal = require('./portal');

var _portal2 = _interopRequireDefault(_portal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let Tooltip = (_temp = _class = class Tooltip extends _react2.default.Component {

  constructor(props, context) {
    super(props, context);

    this.disposable = null;
  }

  componentWillReceiveProps(nextProps) {
    const propKeys = ['tooltips', 'title', 'html', 'className', 'placement', 'trigger', 'showDelay', 'hideDelay', 'keyBindingCommand', 'keyBindingTarget'];

    if (propKeys.some(key => this.props[key] !== nextProps[key])) {
      this.disposable && this.disposable.dispose();
      this.disposable = null;

      this.setupTooltip(nextProps);
    }
  }

  componentDidMount() {
    this.setupTooltip(this.props);
  }

  render() {
    if (this.props.children !== undefined) {
      return _react2.default.createElement(
        _portal2.default,
        { ref: c => {
            this.portal = c;
          } },
        this.props.children
      );
    } else {
      return null;
    }
  }

  componentWillUnmount() {
    this.disposable && this.disposable.dispose();
  }

  setupTooltip(props) {
    if (this.disposable) {
      return;
    }

    const options = {};
    ['title', 'html', 'placement', 'trigger', 'keyBindingCommand', 'keyBindingTarget'].forEach(key => {
      if (props[key] !== undefined) {
        options[key] = props[key];
      }
    });
    if (props.className !== undefined) {
      options.class = props.className;
    }
    if (props.showDelay !== undefined || props.hideDelay !== undefined) {
      const delayDefaults = (props.trigger === 'hover' || props.trigger === undefined) && { show: 1000, hide: 100 } || { show: 0, hide: 0 };

      options.delay = {
        show: props.showDelay !== undefined ? props.showDelay : delayDefaults.show,
        hide: props.hideDelay !== undefined ? props.hideDelay : delayDefaults.hide
      };
    }
    if (props.children !== undefined) {
      options.item = this.portal;
    }

    const target = this.getCurrentTarget(props);
    this.disposable = props.manager.add(target, options);
  }

  getCurrentTarget(props) {
    const target = props.target();
    if (target !== null && target.element !== undefined) {
      return target.element;
    } else {
      return target;
    }
  }
}, _class.propTypes = {
  manager: _propTypes2.default.object.isRequired,
  target: _propTypes2.default.func.isRequired,
  title: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
  html: _propTypes2.default.bool,
  className: _propTypes2.default.string,
  placement: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
  trigger: _propTypes2.default.oneOf(['hover', 'click', 'focus', 'manual']),
  showDelay: _propTypes2.default.number,
  hideDelay: _propTypes2.default.number,
  keyBindingCommand: _propTypes2.default.string,
  keyBindingTarget: _propTypes2.default.element,
  children: _propTypes2.default.element
}, _temp);
exports.default = Tooltip;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,