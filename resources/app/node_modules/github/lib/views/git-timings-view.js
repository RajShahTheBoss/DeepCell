'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _class, _temp, _desc, _value, _class2, _class3, _temp2, _desc2, _value2, _class4, _class5, _temp3, _desc3, _value3, _class6, _class7, _temp4, _desc4, _value4, _class8, _class9, _temp5;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _atom = require('atom');

var _eventKit = require('event-kit');

var _electron = require('electron');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _coreDecorators = require('core-decorators');

var _lodash = require('lodash.memoize');

var _lodash2 = _interopRequireDefault(_lodash);

var _helpers = require('../helpers');

var _octicon = require('./octicon');

var _octicon2 = _interopRequireDefault(_octicon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

const dialog = _electron.remote.dialog;


const genArray = (0, _lodash2.default)(function genArray(interval, count) {
  const arr = [];
  for (let i = 1; i <= count; i++) {
    arr.push(interval * i);
  }
  return arr;
}, (interval, count) => `${interval}:${count}`);

let Marker = class Marker {
  static deserialize(data) {
    const marker = new Marker(data.label, () => {});
    marker.end = data.end;
    marker.markers = data.markers;
    return marker;
  }

  constructor(label, didUpdate) {
    this.label = label;
    this.didUpdate = didUpdate;
    this.end = null;
    this.markers = [];
  }

  getStart() {
    return this.markers.length ? this.markers[0].start : null;
  }

  getEnd() {
    return this.end;
  }

  mark(sectionName, start) {
    this.markers.push({ name: sectionName, start: start || performance.now() });
  }

  finalize() {
    this.end = performance.now();
    this.didUpdate();
  }

  getTimings() {
    return this.markers.map((timing, idx, ary) => {
      const next = ary[idx + 1];
      const end = next ? next.start : this.getEnd();
      return _extends({}, timing, { end });
    });
  }

  serialize() {
    return {
      label: this.label,
      end: this.end,
      markers: this.markers.slice()
    };
  }
};
let MarkerTooltip = (_temp = _class = class MarkerTooltip extends _react2.default.Component {

  render() {
    const marker = this.props.marker;

    const timings = marker.getTimings();

    return _react2.default.createElement(
      'div',
      { style: { textAlign: 'left', maxWidth: 300, whiteSpace: 'initial' } },
      _react2.default.createElement(
        'strong',
        null,
        _react2.default.createElement(
          'tt',
          null,
          marker.label
        )
      ),
      _react2.default.createElement(
        'ul',
        { style: { paddingLeft: 20, marginTop: 10 } },
        timings.map((_ref) => {
          let name = _ref.name,
              start = _ref.start,
              end = _ref.end;

          const duration = end - start;
          return _react2.default.createElement(
            'li',
            { key: name },
            name,
            ': ',
            Math.floor(duration * 100) / 100,
            'ms'
          );
        })
      )
    );
  }
}, _class.propTypes = {
  marker: _propTypes2.default.instanceOf(Marker).isRequired
}, _temp);


const COLORS = {
  queued: 'red',
  prepare: 'cyan',
  nexttick: 'yellow',
  execute: 'green',
  ipc: 'pink'
};
let MarkerSpan = (_class2 = (_temp2 = _class3 = class MarkerSpan extends _react2.default.Component {

  render() {
    var _props = this.props;

    const marker = _props.marker,
          others = _objectWithoutProperties(_props, ['marker']);

    const timings = marker.getTimings();
    const totalTime = marker.getEnd() - marker.getStart();
    const percentages = timings.map((_ref2) => {
      let name = _ref2.name,
          start = _ref2.start,
          end = _ref2.end;

      const duration = end - start;
      return { color: COLORS[name], percent: duration / totalTime * 100 };
    });
    return _react2.default.createElement(
      'span',
      _extends({}, others, {
        ref: c => {
          this.element = c;
        },
        onMouseOver: this.handleMouseOver,
        onMouseOut: this.handleMouseOut }),
      percentages.map((_ref3, i) => {
        let color = _ref3.color,
            percent = _ref3.percent;

        const style = {
          width: `${percent}%`,
          background: color
        };
        return _react2.default.createElement('span', { className: 'waterfall-marker-section', key: i, style: style });
      })
    );
  }

  handleMouseOver(e) {
    const elem = document.createElement('div');
    _reactDom2.default.render(_react2.default.createElement(MarkerTooltip, { marker: this.props.marker }), elem);
    this.tooltipDisposable = atom.tooltips.add(this.element, {
      item: elem,
      placement: 'auto bottom',
      trigger: 'manual'
    });
  }

  closeTooltip() {
    this.tooltipDisposable && this.tooltipDisposable.dispose();
    this.tooltipDisposable = null;
  }

  handleMouseOut(e) {
    this.closeTooltip();
  }

  componentWillUnmount() {
    this.closeTooltip();
  }
}, _class3.propTypes = {
  marker: _propTypes2.default.instanceOf(Marker).isRequired
}, _temp2), (_applyDecoratedDescriptor(_class2.prototype, 'handleMouseOver', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleMouseOver'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleMouseOut', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleMouseOut'), _class2.prototype)), _class2);
let Waterfall = (_class4 = (_temp3 = _class5 = class Waterfall extends _react2.default.Component {

  constructor(props, context) {
    super(props, context);
    this.state = this.getNextState(props);
  }

  componentWillReceiveProps(nextProps) {
    this.setState(this.getNextState(nextProps));
  }

  getNextState(props) {
    const markers = props.markers;

    const firstMarker = markers[0];
    const lastMarker = markers[markers.length - 1];

    const startTime = firstMarker.getStart();
    const endTime = lastMarker.getEnd();
    const totalDuration = endTime - startTime;
    let timelineMarkInterval = null;
    if (props.zoomFactor <= 0.15) {
      timelineMarkInterval = 1000;
    } else if (props.zoomFactor <= 0.3) {
      timelineMarkInterval = 500;
    } else if (props.zoomFactor <= 0.6) {
      timelineMarkInterval = 250;
    } else {
      timelineMarkInterval = 100;
    }
    const timelineMarks = genArray(timelineMarkInterval, Math.ceil(totalDuration / timelineMarkInterval));

    return { firstMarker, lastMarker, startTime, endTime, totalDuration, timelineMarks };
  }

  render() {
    return _react2.default.createElement(
      'div',
      { className: 'waterfall-scroller' },
      _react2.default.createElement(
        'div',
        { className: 'waterfall-container' },
        this.renderTimeMarkers(),
        this.renderTimeline(),
        this.props.markers.map(this.renderMarker)
      )
    );
  }

  renderTimeline() {
    return _react2.default.createElement(
      'div',
      { className: 'waterfall-timeline' },
      '\xA0',
      this.state.timelineMarks.map(time => {
        const leftPos = time * this.props.zoomFactor;
        const style = {
          left: leftPos
        };
        return _react2.default.createElement(
          'span',
          { className: 'waterfall-timeline-label', style: style, key: `tl:${time}` },
          time,
          'ms'
        );
      })
    );
  }

  renderTimeMarkers() {
    return _react2.default.createElement(
      'div',
      { className: 'waterfall-time-markers' },
      this.state.timelineMarks.map(time => {
        const leftPos = time * this.props.zoomFactor;
        const style = {
          left: leftPos
        };
        return _react2.default.createElement('span', { className: 'waterfall-time-marker', style: style, key: `tm:${time}` });
      })
    );
  }

  renderMarker(marker, i) {
    if (marker.getStart() === null || marker.getEnd() === null) {
      return _react2.default.createElement('div', { key: i });
    }

    const startOffset = marker.getStart() - this.state.startTime;
    const duration = marker.getEnd() - marker.getStart();
    const markerStyle = {
      left: startOffset * this.props.zoomFactor,
      width: duration * this.props.zoomFactor
    };

    return _react2.default.createElement(
      'div',
      { className: 'waterfall-row', key: i },
      _react2.default.createElement(
        'span',
        {
          className: 'waterfall-row-label',
          style: { paddingLeft: markerStyle.left + markerStyle.width } },
        marker.label
      ),
      _react2.default.createElement(MarkerSpan, { className: 'waterfall-marker', style: markerStyle, marker: marker })
    );
  }
}, _class5.propTypes = {
  markers: _propTypes2.default.arrayOf(_propTypes2.default.instanceOf(Marker)).isRequired,
  zoomFactor: _propTypes2.default.number.isRequired
}, _temp3), (_applyDecoratedDescriptor(_class4.prototype, 'renderMarker', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class4.prototype, 'renderMarker'), _class4.prototype)), _class4);
let WaterfallWidget = (_class6 = (_temp4 = _class7 = class WaterfallWidget extends _react2.default.Component {

  constructor(props, context) {
    super(props, context);
    this.state = {
      zoomFactor: 0.3,
      collapsed: false
    };
  }

  render() {
    const markers = this.props.markers;

    const firstMarker = markers[0];
    const lastMarker = markers[markers.length - 1];

    const startTime = firstMarker.getStart();
    const endTime = lastMarker.getEnd();
    const duration = endTime - startTime;

    return _react2.default.createElement(
      'div',
      { className: 'waterfall-widget inset-pannel' },
      _react2.default.createElement(
        'div',
        { className: 'waterfall-header' },
        _react2.default.createElement(
          'div',
          { className: 'waterfall-header-text' },
          _react2.default.createElement(
            'span',
            { onClick: this.handleCollapseClick, className: 'collapse-toggle' },
            this.state.collapsed ? '\u25b6' : '\u25bc'
          ),
          this.props.markers.length,
          ' event(s) over ',
          Math.floor(duration),
          'ms'
        ),
        _react2.default.createElement(
          'div',
          { className: 'waterfall-header-controls' },
          _react2.default.createElement(
            'button',
            {
              className: 'waterfall-export-button btn btn-sm',
              onClick: this.handleExportClick },
            'Export'
          ),
          _react2.default.createElement(_octicon2.default, { icon: 'search' }),
          _react2.default.createElement('input', {
            type: 'range',
            className: 'input-range',
            min: 0.1,
            max: 1,
            step: 0.01,
            value: this.state.zoomFactor,
            onChange: this.handleZoomFactorChange
          })
        )
      ),
      this.state.collapsed ? null : _react2.default.createElement(Waterfall, { markers: this.props.markers, zoomFactor: this.state.zoomFactor })
    );
  }

  handleZoomFactorChange(e) {
    this.setState({ zoomFactor: parseFloat(e.target.value) });
  }

  handleCollapseClick(e) {
    this.setState(s => ({ collapsed: !s.collapsed }));
  }

  handleExportClick(e) {
    e.preventDefault();
    const json = JSON.stringify(this.props.markers.map(m => m.serialize()), null, '  ');
    const buffer = new _atom.TextBuffer({ text: json });
    dialog.showSaveDialog({
      defaultPath: 'git-timings.json'
    }, filename => {
      if (!filename) {
        return;
      }
      buffer.saveAs(filename);
    });
  }
}, _class7.propTypes = {
  markers: _propTypes2.default.arrayOf(_propTypes2.default.instanceOf(Marker)).isRequired
}, _temp4), (_applyDecoratedDescriptor(_class6.prototype, 'handleZoomFactorChange', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class6.prototype, 'handleZoomFactorChange'), _class6.prototype), _applyDecoratedDescriptor(_class6.prototype, 'handleCollapseClick', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class6.prototype, 'handleCollapseClick'), _class6.prototype), _applyDecoratedDescriptor(_class6.prototype, 'handleExportClick', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class6.prototype, 'handleExportClick'), _class6.prototype)), _class6);


let markers = null;
let groupId = 0;
const groups = [];
let lastMarkerTime = null;
let updateTimer = null;

let GitTimingsView = (_class8 = (_temp5 = _class9 = class GitTimingsView extends _react2.default.Component {

  static createPaneItem() {
    let element;
    return {
      serialize() {
        return { deserializer: 'GitTimingsView' };
      },
      getURI() {
        return 'atom-github://debug/markers';
      },
      getTitle() {
        return 'GitHub Package Timings View';
      },
      get element() {
        if (!element) {
          element = document.createElement('div');
          _reactDom2.default.render(_react2.default.createElement(GitTimingsView, { container: element }), element);
        }
        return element;
      }
    };
  }

  static deserialize() {
    return this.createPaneItem();
  }

  static generateMarker(label) {
    const marker = new Marker(label, () => {
      GitTimingsView.scheduleUpdate();
    });
    const now = performance.now();
    if (!markers || lastMarkerTime && Math.abs(now - lastMarkerTime) >= 5000) {
      groupId++;
      markers = [];
      groups.unshift({ id: groupId, markers });
      if (groups.length > 100) {
        groups.pop();
      }
    }
    lastMarkerTime = now;
    markers.push(marker);
    GitTimingsView.scheduleUpdate();
    return marker;
  }

  static restoreGroup(group) {
    groupId++;
    groups.unshift({ id: groupId, markers: group });
    GitTimingsView.scheduleUpdate(true);
  }

  static scheduleUpdate() {
    let immediate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    if (updateTimer) {
      clearTimeout(updateTimer);
    }

    updateTimer = setTimeout(() => {
      GitTimingsView.emitter.emit('did-update');
    }, immediate ? 0 : 1000);
  }

  static onDidUpdate(callback) {
    return GitTimingsView.emitter.on('did-update', callback);
  }

  componentDidMount() {
    this.subscriptions = new _eventKit.CompositeDisposable(GitTimingsView.onDidUpdate(() => this.forceUpdate()), atom.workspace.onDidDestroyPaneItem((_ref4) => {
      let item = _ref4.item;

      if (item.element === this.props.container) {
        // we just got closed
        _reactDom2.default.unmountComponentAtNode(this.props.container);
      }
    }));
  }

  componentWillUnmount() {
    this.subscriptions.dispose();
  }

  render() {
    return _react2.default.createElement(
      'div',
      { className: 'github-GitTimingsView' },
      _react2.default.createElement(
        'div',
        { className: 'github-GitTimingsView-header' },
        _react2.default.createElement(
          'button',
          { className: 'import-button btn', onClick: this.handleImportClick },
          'Import'
        )
      ),
      groups.map((group, idx) => _react2.default.createElement(WaterfallWidget, { key: group.id, markers: group.markers }))
    );
  }

  handleImportClick(e) {
    e.preventDefault();
    dialog.showOpenDialog({
      properties: ['openFile']
    }, (() => {
      var _ref5 = _asyncToGenerator(function* (filenames) {
        if (!filenames) {
          return;
        }
        const filename = filenames[0];
        try {
          const contents = yield (0, _helpers.readFile)(filename);
          const data = JSON.parse(contents);
          const restoredMarkers = data.map(function (item) {
            return Marker.deserialize(item);
          });
          GitTimingsView.restoreGroup(restoredMarkers);
        } catch (_err) {
          atom.notifications.addError(`Could not import timings from ${filename}`);
        }
      });

      return function (_x2) {
        return _ref5.apply(this, arguments);
      };
    })());
  }
}, _class9.propTypes = {
  container: _propTypes2.default.any.isRequired
}, _class9.emitter = new _eventKit.Emitter(), _temp5), (_applyDecoratedDescriptor(_class8.prototype, 'handleImportClick', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class8.prototype, 'handleImportClick'), _class8.prototype)), _class8);
exports.default = GitTimingsView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,