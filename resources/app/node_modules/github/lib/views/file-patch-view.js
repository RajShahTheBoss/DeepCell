'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _desc, _value, _class, _class2, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _eventKit = require('event-kit');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _coreDecorators = require('core-decorators');

var _hunkView = require('./hunk-view');

var _hunkView2 = _interopRequireDefault(_hunkView);

var _simpleTooltip = require('./simple-tooltip');

var _simpleTooltip2 = _interopRequireDefault(_simpleTooltip);

var _commands = require('./commands');

var _commands2 = _interopRequireDefault(_commands);

var _filePatchSelection = require('./file-patch-selection');

var _filePatchSelection2 = _interopRequireDefault(_filePatchSelection);

var _switchboard = require('../switchboard');

var _switchboard2 = _interopRequireDefault(_switchboard);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

let FilePatchView = (_class = (_temp = _class2 = class FilePatchView extends _react2.default.Component {

  constructor(props, context) {
    super(props, context);

    this.mouseSelectionInProgress = false;
    this.disposables = new _eventKit.CompositeDisposable();

    this.state = {
      selection: new _filePatchSelection2.default(this.props.hunks)
    };
  }

  componentDidMount() {
    window.addEventListener('mouseup', this.mouseup);
    this.disposables.add(new _eventKit.Disposable(() => window.removeEventListener('mouseup', this.mouseup)));
  }

  componentWillReceiveProps(nextProps) {
    const hunksChanged = this.props.hunks.length !== nextProps.hunks.length || this.props.hunks.some((hunk, index) => hunk !== nextProps.hunks[index]);

    if (hunksChanged) {
      this.setState(prevState => {
        return {
          selection: prevState.selection.updateHunks(nextProps.hunks)
        };
      }, () => {
        nextProps.switchboard.didChangePatch();
      });
    }
  }

  render() {
    const selectedHunks = this.state.selection.getSelectedHunks();
    const selectedLines = this.state.selection.getSelectedLines();
    const headHunk = this.state.selection.getHeadHunk();
    const headLine = this.state.selection.getHeadLine();
    const hunkSelectionMode = this.state.selection.getMode() === 'hunk';

    const unstaged = this.props.stagingStatus === 'unstaged';
    const stageButtonLabelPrefix = unstaged ? 'Stage' : 'Unstage';

    return _react2.default.createElement(
      'div',
      {
        className: (0, _classnames2.default)('github-FilePatchView', { 'is-staged': !unstaged, 'is-unstaged': unstaged }),
        tabIndex: '-1',
        onMouseUp: this.mouseup,
        ref: e => {
          this.element = e;
        } },
      _react2.default.createElement(
        _commands2.default,
        { registry: this.props.commandRegistry, target: '.github-FilePatchView' },
        _react2.default.createElement(_commands.Command, { command: 'github:toggle-patch-selection-mode', callback: this.togglePatchSelectionMode }),
        _react2.default.createElement(_commands.Command, { command: 'core:confirm', callback: this.didConfirm }),
        _react2.default.createElement(_commands.Command, { command: 'core:move-up', callback: this.selectPrevious }),
        _react2.default.createElement(_commands.Command, { command: 'core:move-down', callback: this.selectNext }),
        _react2.default.createElement(_commands.Command, { command: 'core:move-right', callback: this.didMoveRight }),
        _react2.default.createElement(_commands.Command, { command: 'core:move-to-top', callback: this.selectFirst }),
        _react2.default.createElement(_commands.Command, { command: 'core:move-to-bottom', callback: this.selectLast }),
        _react2.default.createElement(_commands.Command, { command: 'core:select-up', callback: this.selectToPrevious }),
        _react2.default.createElement(_commands.Command, { command: 'core:select-down', callback: this.selectToNext }),
        _react2.default.createElement(_commands.Command, { command: 'core:select-to-top', callback: this.selectToFirst }),
        _react2.default.createElement(_commands.Command, { command: 'core:select-to-bottom', callback: this.selectToLast }),
        _react2.default.createElement(_commands.Command, { command: 'core:select-all', callback: this.selectAll }),
        _react2.default.createElement(_commands.Command, { command: 'github:select-next-hunk', callback: this.selectNextHunk }),
        _react2.default.createElement(_commands.Command, { command: 'github:select-previous-hunk', callback: this.selectPreviousHunk }),
        _react2.default.createElement(_commands.Command, { command: 'github:open-file', callback: this.openFile }),
        _react2.default.createElement(_commands.Command, {
          command: 'github:view-corresponding-diff',
          callback: () => this.props.isPartiallyStaged && this.props.didDiveIntoCorrespondingFilePatch()
        }),
        _react2.default.createElement(_commands.Command, { command: 'github:discard-selected-lines', callback: this.discardSelection }),
        _react2.default.createElement(_commands.Command, {
          command: 'core:undo',
          callback: () => this.props.hasUndoHistory && this.props.undoLastDiscard()
        })
      ),
      _react2.default.createElement(
        _commands2.default,
        { registry: this.props.commandRegistry, target: 'atom-workspace' },
        _react2.default.createElement(_commands.Command, {
          command: 'github:undo-last-discard-in-diff-view',
          callback: () => this.props.hasUndoHistory && this.props.undoLastDiscard()
        })
      ),
      _react2.default.createElement(
        'header',
        { className: 'github-FilePatchView-header' },
        _react2.default.createElement(
          'span',
          { className: 'github-FilePatchView-title' },
          unstaged ? 'Unstaged Changes for ' : 'Staged Changes for ',
          this.props.filePath
        ),
        this.renderButtonGroup()
      ),
      _react2.default.createElement(
        'main',
        { className: 'github-FilePatchView-container' },
        this.props.hunks.map(hunk => {
          const isSelected = selectedHunks.has(hunk);
          let stageButtonSuffix = hunkSelectionMode || !isSelected ? ' Hunk' : ' Selection';
          if (selectedHunks.size > 1 && selectedHunks.has(hunk)) {
            stageButtonSuffix += 's';
          }
          const stageButtonLabel = stageButtonLabelPrefix + stageButtonSuffix;
          const discardButtonLabel = 'Discard' + stageButtonSuffix;

          return _react2.default.createElement(_hunkView2.default, {
            key: hunk.getHeader(),
            tooltips: this.props.tooltips,
            hunk: hunk,
            isSelected: selectedHunks.has(hunk),
            hunkSelectionMode: hunkSelectionMode,
            unstaged: unstaged,
            stageButtonLabel: stageButtonLabel,
            discardButtonLabel: discardButtonLabel,
            selectedLines: selectedLines,
            headLine: headLine,
            headHunk: headHunk,
            mousedownOnHeader: e => this.mousedownOnHeader(e, hunk),
            mousedownOnLine: this.mousedownOnLine,
            mousemoveOnLine: this.mousemoveOnLine,
            contextMenuOnItem: this.contextMenuOnItem,
            didClickStageButton: () => this.didClickStageButtonForHunk(hunk),
            didClickDiscardButton: () => this.didClickDiscardButtonForHunk(hunk)
          });
        })
      )
    );
  }

  renderButtonGroup() {
    const unstaged = this.props.stagingStatus === 'unstaged';

    return _react2.default.createElement(
      'span',
      { className: 'btn-group' },
      this.props.hasUndoHistory && unstaged ? _react2.default.createElement(
        'button',
        {
          className: 'btn icon icon-history',
          onClick: this.props.undoLastDiscard },
        'Undo Discard'
      ) : null,
      this.props.isPartiallyStaged ? _react2.default.createElement(
        _simpleTooltip2.default,
        {
          tooltips: this.props.tooltips,
          title: `View ${unstaged ? 'staged' : 'unstaged'} changes` },
        _react2.default.createElement('button', {
          className: (0, _classnames2.default)('btn', 'icon', { 'icon-tasklist': unstaged, 'icon-list-unordered': !unstaged }),
          onClick: this.props.didDiveIntoCorrespondingFilePatch
        })
      ) : null,
      _react2.default.createElement(
        _simpleTooltip2.default,
        {
          tooltips: this.props.tooltips,
          title: 'Open File' },
        _react2.default.createElement('button', {
          className: 'btn icon icon-code',
          onClick: this.openFile
        })
      ),
      _react2.default.createElement(
        'button',
        {
          className: (0, _classnames2.default)('btn', 'icon', { 'icon-move-down': unstaged, 'icon-move-up': !unstaged }),
          onClick: this.stageOrUnstageAll },
        unstaged ? 'Stage File' : 'Unstage File'
      )
    );
  }

  componentWillUnmount() {
    this.disposables.dispose();
  }

  contextMenuOnItem(event, hunk, line) {
    const resend = () => {
      const newEvent = new MouseEvent(event.type, event);
      setImmediate(() => event.target.parentNode.dispatchEvent(newEvent));
    };

    const mode = this.state.selection.getMode();
    if (mode === 'hunk' && !this.state.selection.getSelectedHunks().has(hunk)) {
      event.stopPropagation();

      this.setState(prevState => {
        return { selection: prevState.selection.selectHunk(hunk, event.shiftKey) };
      }, resend);
    } else if (mode === 'line' && !this.state.selection.getSelectedLines().has(line)) {
      event.stopPropagation();

      this.setState(prevState => {
        return { selection: prevState.selection.selectLine(line, event.shiftKey) };
      }, resend);
    }
  }

  mousedownOnHeader(event, hunk) {
    if (event.button !== 0) {
      return;
    }
    const windows = process.platform === 'win32';
    if (event.ctrlKey && !windows) {
      return;
    } // simply open context menu

    this.mouseSelectionInProgress = true;
    event.persist && event.persist();

    this.setState(prevState => {
      let selection = prevState.selection;
      if (event.metaKey || event.ctrlKey && windows) {
        if (selection.getMode() === 'hunk') {
          selection = selection.addOrSubtractHunkSelection(hunk);
        } else {
          // TODO: optimize
          selection = hunk.getLines().reduce((current, line) => current.addOrSubtractLineSelection(line).coalesce(), selection);
        }
      } else if (event.shiftKey) {
        if (selection.getMode() === 'hunk') {
          selection = selection.selectHunk(hunk, true);
        } else {
          const hunkLines = hunk.getLines();
          const tailIndex = selection.getLineSelectionTailIndex();
          const selectedHunkAfterTail = tailIndex < hunkLines[0].diffLineNumber;
          if (selectedHunkAfterTail) {
            selection = selection.selectLine(hunkLines[hunkLines.length - 1], true);
          } else {
            selection = selection.selectLine(hunkLines[0], true);
          }
        }
      } else {
        selection = selection.selectHunk(hunk, false);
      }

      return { selection };
    });
  }

  mousedownOnLine(event, hunk, line) {
    if (event.button !== 0) {
      return;
    }
    const windows = process.platform === 'win32';
    if (event.ctrlKey && !windows) {
      return;
    } // simply open context menu

    this.mouseSelectionInProgress = true;
    event.persist && event.persist();

    this.setState(prevState => {
      let selection = prevState.selection;

      if (event.metaKey || event.ctrlKey && windows) {
        if (selection.getMode() === 'hunk') {
          selection = selection.addOrSubtractHunkSelection(hunk);
        } else {
          selection = selection.addOrSubtractLineSelection(line);
        }
      } else if (event.shiftKey) {
        if (selection.getMode() === 'hunk') {
          selection = selection.selectHunk(hunk, true);
        } else {
          selection = selection.selectLine(line, true);
        }
      } else if (event.detail === 1) {
        selection = selection.selectLine(line, false);
      } else if (event.detail === 2) {
        selection = selection.selectHunk(hunk, false);
      }

      return { selection };
    });
  }

  mousemoveOnLine(event, hunk, line) {
    if (!this.mouseSelectionInProgress) {
      return;
    }

    this.setState(prevState => {
      let selection = null;
      if (prevState.selection.getMode() === 'hunk') {
        selection = prevState.selection.selectHunk(hunk, true);
      } else {
        selection = prevState.selection.selectLine(line, true);
      }
      return { selection };
    });
  }

  mouseup() {
    this.mouseSelectionInProgress = false;
    this.setState(prevState => {
      return { selection: prevState.selection.coalesce() };
    });
  }

  togglePatchSelectionMode() {
    this.setState(prevState => ({ selection: prevState.selection.toggleMode() }));
  }

  getPatchSelectionMode() {
    return this.state.selection.getMode();
  }

  getSelectedHunks() {
    return this.state.selection.getSelectedHunks();
  }

  getSelectedLines() {
    return this.state.selection.getSelectedLines();
  }

  selectNext() {
    this.setState(prevState => ({ selection: prevState.selection.selectNext() }));
  }

  selectNextHunk() {
    this.setState(prevState => ({ selection: prevState.selection.jumpToNextHunk() }));
  }

  selectToNext() {
    this.setState(prevState => {
      return { selection: prevState.selection.selectNext(true).coalesce() };
    });
  }

  selectPrevious() {
    this.setState(prevState => ({ selection: prevState.selection.selectPrevious() }));
  }

  selectPreviousHunk() {
    this.setState(prevState => ({ selection: prevState.selection.jumpToPreviousHunk() }));
  }

  selectToPrevious() {
    this.setState(prevState => {
      return { selection: prevState.selection.selectPrevious(true).coalesce() };
    });
  }

  selectFirst() {
    this.setState(prevState => ({ selection: prevState.selection.selectFirst() }));
  }

  selectToFirst() {
    this.setState(prevState => ({ selection: prevState.selection.selectFirst(true) }));
  }

  selectLast() {
    this.setState(prevState => ({ selection: prevState.selection.selectLast() }));
  }

  selectToLast() {
    this.setState(prevState => ({ selection: prevState.selection.selectLast(true) }));
  }

  selectAll() {
    return new Promise(resolve => {
      this.setState(prevState => ({ selection: prevState.selection.selectAll() }), resolve);
    });
  }

  getNextHunkUpdatePromise() {
    return this.state.selection.getNextUpdatePromise();
  }

  didClickStageButtonForHunk(hunk) {
    if (this.state.selection.getSelectedHunks().has(hunk)) {
      this.props.attemptLineStageOperation(this.state.selection.getSelectedLines());
    } else {
      this.setState(prevState => ({ selection: prevState.selection.selectHunk(hunk) }), () => {
        this.props.attemptHunkStageOperation(hunk);
      });
    }
  }

  didClickDiscardButtonForHunk(hunk) {
    if (this.state.selection.getSelectedHunks().has(hunk)) {
      this.discardSelection();
    } else {
      this.setState(prevState => ({ selection: prevState.selection.selectHunk(hunk) }), () => {
        this.discardSelection();
      });
    }
  }

  didConfirm() {
    return this.didClickStageButtonForHunk([...this.state.selection.getSelectedHunks()][0]);
  }

  didMoveRight() {
    if (this.props.didSurfaceFile) {
      this.props.didSurfaceFile();
    }
  }

  focus() {
    this.element.focus();
  }

  openFile() {
    let lineNumber = 0;
    const firstSelectedLine = Array.from(this.state.selection.getSelectedLines())[0];
    if (firstSelectedLine && firstSelectedLine.newLineNumber > -1) {
      lineNumber = firstSelectedLine.newLineNumber;
    } else {
      const firstSelectedHunk = Array.from(this.state.selection.getSelectedHunks())[0];
      lineNumber = firstSelectedHunk ? firstSelectedHunk.getNewStartRow() : 0;
    }
    return this.props.openCurrentFile({ lineNumber });
  }

  stageOrUnstageAll() {
    var _this = this;

    return _asyncToGenerator(function* () {
      yield _this.selectAll();
      _this.didConfirm();
    })();
  }

  discardSelection() {
    const selectedLines = this.state.selection.getSelectedLines();
    return selectedLines.size ? this.props.discardLines(selectedLines) : null;
  }

  goToDiffLine(lineNumber) {
    this.setState(prevState => ({ selection: prevState.selection.goToDiffLine(lineNumber) }));
  }
}, _class2.propTypes = {
  commandRegistry: _propTypes2.default.object.isRequired,
  tooltips: _propTypes2.default.object.isRequired,
  filePath: _propTypes2.default.string.isRequired,
  hunks: _propTypes2.default.arrayOf(_propTypes2.default.object).isRequired,
  stagingStatus: _propTypes2.default.oneOf(['unstaged', 'staged']).isRequired,
  isPartiallyStaged: _propTypes2.default.bool.isRequired,
  hasUndoHistory: _propTypes2.default.bool.isRequired,
  attemptLineStageOperation: _propTypes2.default.func.isRequired,
  attemptHunkStageOperation: _propTypes2.default.func.isRequired,
  discardLines: _propTypes2.default.func.isRequired,
  undoLastDiscard: _propTypes2.default.func.isRequired,
  openCurrentFile: _propTypes2.default.func.isRequired,
  didSurfaceFile: _propTypes2.default.func.isRequired,
  didDiveIntoCorrespondingFilePatch: _propTypes2.default.func.isRequired,
  switchboard: _propTypes2.default.instanceOf(_switchboard2.default)
}, _class2.defaultProps = {
  switchboard: new _switchboard2.default()
}, _temp), (_applyDecoratedDescriptor(_class.prototype, 'renderButtonGroup', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'renderButtonGroup'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'contextMenuOnItem', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'contextMenuOnItem'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'mousedownOnLine', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'mousedownOnLine'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'mousemoveOnLine', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'mousemoveOnLine'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'mouseup', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'mouseup'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'togglePatchSelectionMode', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'togglePatchSelectionMode'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'selectNext', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'selectNext'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'selectNextHunk', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'selectNextHunk'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'selectToNext', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'selectToNext'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'selectPrevious', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'selectPrevious'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'selectPreviousHunk', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'selectPreviousHunk'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'selectToPrevious', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'selectToPrevious'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'selectFirst', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'selectFirst'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'selectToFirst', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'selectToFirst'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'selectLast', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'selectLast'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'selectToLast', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'selectToLast'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'selectAll', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'selectAll'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'didConfirm', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'didConfirm'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'didMoveRight', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'didMoveRight'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'openFile', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'openFile'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'stageOrUnstageAll', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'stageOrUnstageAll'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'discardSelection', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'discardSelection'), _class.prototype)), _class);
exports.default = FilePatchView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,