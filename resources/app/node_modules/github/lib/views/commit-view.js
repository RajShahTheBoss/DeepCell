'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _desc, _value, _class, _class2, _temp; /** @jsx etch.dom */
/* eslint react/no-unknown-property: "off" */

var _atom = require('atom');

var _eventKit = require('event-kit');

var _etch = require('etch');

var _etch2 = _interopRequireDefault(_etch);

var _coreDecorators = require('core-decorators');

var _helpers = require('../helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

let CommitView = (_class = (_temp = _class2 = class CommitView {

  constructor(props) {
    this.props = props;

    _etch2.default.initialize(this);

    this.editor = this.refs.editor;
    // FIXME Use props-injected view registry instead of the Atom global
    this.editorElement = atom.views.getView(this.editor);
    this.editor.setText(this.props.message || '');
    this.subscriptions = new _eventKit.CompositeDisposable(this.editor.onDidChange(() => this.props.onChangeMessage && this.props.onChangeMessage(this.editor.getText())), this.editor.onDidChangeCursorPosition(() => {
      _etch2.default.update(this);
    }), props.commandRegistry.add('atom-workspace', { 'github:commit': this.commit }));
  }

  destroy() {
    this.subscriptions.dispose();
    _etch2.default.destroy(this);
  }

  update(props) {
    const previousMessage = this.props.message;
    this.props = _extends({}, this.props, props);
    const newMessage = this.props.message;
    if (this.editor && previousMessage !== newMessage && this.editor.getText() !== newMessage) {
      this.editor.setText(newMessage);
    }
    return _etch2.default.update(this);
  }

  render() {
    let remainingCharsClassName = '';
    if (this.getRemainingCharacters() < 0) {
      remainingCharsClassName = 'is-error';
    } else if (this.getRemainingCharacters() < this.props.maximumCharacterLimit / 4) {
      remainingCharsClassName = 'is-warning';
    }

    const showAbortMergeButton = this.props.isMerging || null;
    const showAmendBox = !this.props.isMerging && this.props.lastCommit.isPresent() && !this.props.lastCommit.isUnbornRef() || null;

    return _etch2.default.dom(
      'div',
      { className: 'github-CommitView', ref: 'CommitView' },
      _etch2.default.dom(
        'div',
        { className: 'github-CommitView-editor' },
        _etch2.default.dom(_atom.TextEditor, {
          ref: 'editor',
          softWrapped: true,
          placeholderText: 'Commit message',
          lineNumberGutterVisible: false,
          showInvisibles: false,
          autoHeight: false,
          scrollPastEnd: false
        })
      ),
      _etch2.default.dom(
        'footer',
        { className: 'github-CommitView-bar' },
        showAbortMergeButton && _etch2.default.dom(
          'button',
          { ref: 'abortMergeButton', className: 'btn github-CommitView-button is-secondary',
            onclick: this.abortMerge },
          'Abort Merge'
        ),
        showAmendBox && _etch2.default.dom(
          'label',
          { className: 'github-CommitView-label input-label' },
          _etch2.default.dom('input', {
            ref: 'amend',
            className: 'input-checkbox',
            type: 'checkbox',
            onclick: this.handleAmendBoxClick,
            checked: this.props.isAmending
          }),
          ' Amend'
        ),
        _etch2.default.dom(
          'button',
          { ref: 'commitButton', className: 'btn github-CommitView-button',
            onclick: this.commit,
            disabled: !this.isCommitButtonEnabled() },
          this.commitButtonText()
        ),
        _etch2.default.dom(
          'div',
          { ref: 'remainingCharacters',
            className: `github-CommitView-remaining-characters ${remainingCharsClassName}` },
          this.getRemainingCharacters()
        )
      )
    );
  }

  abortMerge() {
    this.props.abortMerge();
  }

  handleAmendBoxClick() {
    this.props.setAmending(this.refs.amend.checked);
  }

  commit() {
    var _this = this;

    return _asyncToGenerator(function* () {
      if ((yield _this.props.prepareToCommit()) && _this.isCommitButtonEnabled()) {
        yield _this.props.commit(_this.editor.getText());
      } else {
        _this.setFocus(CommitView.focus.EDITOR);
      }
    })();
  }

  getRemainingCharacters() {
    if (this.editor != null) {
      if (this.editor.getCursorBufferPosition().row === 0) {
        return (this.props.maximumCharacterLimit - this.editor.lineTextForBufferRow(0).length).toString();
      } else {
        return 'âˆž';
      }
    } else {
      return this.props.maximumCharacterLimit || '';
    }
  }

  isCommitButtonEnabled() {
    return this.props.stagedChangesExist && !this.props.mergeConflictsExist && this.props.lastCommit.isPresent() && this.editor && this.editor.getText().length !== 0;
  }

  commitButtonText() {
    if (this.props.isAmending) {
      return `Amend commit (${(0, _helpers.shortenSha)(this.props.lastCommit.getSha())})`;
    } else {
      if (this.props.branchName) {
        return `Commit to ${this.props.branchName}`;
      } else {
        return 'Commit';
      }
    }
  }

  rememberFocus(event) {
    if (this.editorElement.contains(event.target)) {
      return CommitView.focus.EDITOR;
    }

    if (this.refs.abortMergeButton && this.refs.abortMergeButton.contains(event.target)) {
      return CommitView.focus.ABORT_MERGE_BUTTON;
    }

    if (this.refs.amend && this.refs.amend.contains(event.target)) {
      return CommitView.focus.AMEND_BOX;
    }

    if (this.refs.commitButton && this.refs.commitButton.contains(event.target)) {
      return CommitView.focus.COMMIT_BUTTON;
    }

    return null;
  }

  setFocus(focus) {
    let fallback = false;

    if (focus === CommitView.focus.EDITOR) {
      this.editorElement.focus();
      return true;
    }

    if (focus === CommitView.focus.ABORT_MERGE_BUTTON) {
      if (this.refs.abortMergeButton) {
        this.refs.abortMergeButton.focus();
        return true;
      } else {
        fallback = true;
      }
    }

    if (focus === CommitView.focus.AMEND_BOX) {
      if (this.refs.amend) {
        this.refs.amend.focus();
        return true;
      } else {
        fallback = true;
      }
    }

    if (focus === CommitView.focus.COMMIT_BUTTON) {
      if (this.refs.commitButton) {
        this.refs.commitButton.focus();
        return true;
      } else {
        fallback = true;
      }
    }

    if (fallback) {
      this.editorElement.focus();
      return true;
    }

    return false;
  }
}, _class2.focus = {
  EDITOR: Symbol('commit-editor'),
  ABORT_MERGE_BUTTON: Symbol('commit-abort-merge-button'),
  AMEND_BOX: Symbol('commit-amend-box'),
  COMMIT_BUTTON: Symbol('commit-button')
}, _temp), (_applyDecoratedDescriptor(_class.prototype, 'abortMerge', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'abortMerge'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'handleAmendBoxClick', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'handleAmendBoxClick'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'commit', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'commit'), _class.prototype)), _class);
exports.default = CommitView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,