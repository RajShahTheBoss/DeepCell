'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/**
 * `EtchWrapper` is a React component that renders Etch components
 * and correctly manages their lifecycles as the application progresses.
 *
 *    <EtchWrapper type="span" reattachDomNode={true} className="wrapper">
 *      <EtchComponent etchProp={stuff} />
 *    </EtchWrapper>
 *
 * The `type` property specifies the DOM node type to wrap around the
 * Etch component's element, and defaults to 'div'. Any other props you
 * pass to the wrapper component will be applied to the DOM node.
 *
 * `reattachDomNode` determines whether or not to place the wrapped component
 * element back in the React component's DOM node if we find it's missing;
 * this could happen due to changing the `type` property. If you pass the
 * wrapped component element into a method that moves the element, you should
 * specify `false` for this option.
 *
 * The component takes a single JSX child, which describes the type and props
 * of the Etch component to render. Any time this changes, the wrapper will
 * update (or destroy and recreate) the Etch component as necessary.
 *
 * Note that the component cleans up its own DOM node, and calls
 * `component.destroy(false)` (if your component has a `destroy` method)
 * and you should pass the `false` as the second argument to
 * `etch.destroy(this)` (e.g. `etch.destroy(this, false)`) inside your
 * component instance.
 *
 * The component instance is available at `this.getWrappedComponent` if you need
 * to call methods on it from the outside (though you should really consider
 * setting a prop instead. ;)
 */
let EtchWrapper = (_temp = _class = class EtchWrapper extends _react2.default.Component {

  componentDidMount() {
    this.createComponent(this.getWrappedComponentDetails(this.props.children));
  }

  componentWillReceiveProps(newProps) {
    const oldDetails = this.getWrappedComponentDetails(this.props.children);
    const newDetails = this.getWrappedComponentDetails(newProps.children);
    if (oldDetails.type !== newDetails.type) {
      // The wrapped component type changed, so we need to destroy the old
      // component and create a new one of the new type.
      this.destroyComponent();
      this.createComponent(newDetails);
    }
  }

  componentDidUpdate(prevProps) {
    var _this = this;

    return _asyncToGenerator(function* () {
      const oldDetails = _this.getWrappedComponentDetails(prevProps.children);
      const newDetails = _this.getWrappedComponentDetails(_this.props.children);

      if (oldDetails.type === newDetails.type) {
        // We didn't change the wrapped (Etch) component type,
        // so we need to update the instance with the new props.
        yield _this.updateComponent(_this.getWrappedComponentDetails(_this.props.children));
      }

      // If we just recreated our DOM node by changing the node type, we
      // need to reattach the wrapped component's element.
      if (_this.props.reattachDomNode && _this.container && !_this.container.contains(_this.component.element)) {
        _this.container.appendChild(_this.component.element);
      }
    })();
  }

  render() {
    const Type = this.props.type;
    var _props = this.props;

    const type = _props.type,
          children = _props.children,
          reattachDomNode = _props.reattachDomNode,
          props = _objectWithoutProperties(_props, ['type', 'children', 'reattachDomNode']); // eslint-disable-line no-unused-vars


    return _react2.default.createElement(Type, _extends({}, props, { ref: c => {
        this.container = c;
      } }));
  }

  componentWillUnmount() {
    this.destroyComponent();
  }

  getWrappedComponentDetails(ourChildren) {
    // e.g. <EtchWrapper><EtchChild prop={1} other={2}>Hi</EtchChild></EtchWrapper>
    const etchElement = _react2.default.Children.toArray(ourChildren)[0];
    // etchElement === {type: EtchChild, props: {prop: 1, other: 2, children: 'Hi'}}
    const type = etchElement.type,
          props = etchElement.props;
    // type === EtchChild, props === {prop: 1, other: 2, children: 'Hi'}

    const children = props.children,
          remainingProps = _objectWithoutProperties(props, ['children']);
    // children === 'Hi', remainingProps === {prop: 1, other: 2}


    return { type, children, props: remainingProps };
  }

  // For compatability with Atom's ViewProvider
  getElement() {
    return this.container;
  }

  // Etch component interactions

  getWrappedComponent() {
    return this.component;
  }

  createComponent(_ref) {
    let type = _ref.type,
        props = _ref.props,
        children = _ref.children;

    this.component = new type(props, children);
    this.container.appendChild(this.component.element);
  }

  updateComponent(_ref2) {
    let props = _ref2.props,
        children = _ref2.children;

    return this.component.update(props, children);
  }

  destroyComponent() {
    if (this.container.contains(this.component.element)) {
      this.container.removeChild(this.component.element);
    }
    this.component.destroy && this.component.destroy(false);
    delete this.component;
  }
}, _class.propTypes = {
  children: _propTypes2.default.element.isRequired,
  type: _propTypes2.default.string,
  reattachDomNode: _propTypes2.default.bool
}, _class.defaultProps = {
  type: 'div',
  reattachDomNode: true
}, _temp);
exports.default = EtchWrapper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,