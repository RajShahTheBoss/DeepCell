'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _desc, _value, _class, _class2, _temp; /** @jsx etch.dom */
/* eslint react/no-unknown-property: "off" */

var _eventKit = require('event-kit');

var _electron = require('electron');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _etch = require('etch');

var _etch2 = _interopRequireDefault(_etch);

var _coreDecorators = require('core-decorators');

var _filePatchListItemView = require('./file-patch-list-item-view');

var _filePatchListItemView2 = _interopRequireDefault(_filePatchListItemView);

var _mergeConflictListItemView = require('./merge-conflict-list-item-view');

var _mergeConflictListItemView2 = _interopRequireDefault(_mergeConflictListItemView);

var _compositeListSelection = require('./composite-list-selection');

var _compositeListSelection2 = _interopRequireDefault(_compositeListSelection);

var _resolutionProgress = require('../models/conflicts/resolution-progress');

var _resolutionProgress2 = _interopRequireDefault(_resolutionProgress);

var _modelObserver = require('../models/model-observer');

var _modelObserver2 = _interopRequireDefault(_modelObserver);

var _helpers = require('../helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

const Menu = _electron.remote.Menu,
      MenuItem = _electron.remote.MenuItem;


const debounce = (fn, wait) => {
  let timeout;
  return function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return new Promise(resolve => {
      clearTimeout(timeout);
      timeout = setTimeout(() => {
        resolve(fn(...args));
      }, wait);
    });
  };
};

const MAXIMUM_LISTED_ENTRIES = 1000;

let StagingView = (_class = (_temp = _class2 = class StagingView {

  constructor(props) {
    this.props = props;
    this.truncatedLists = this.calculateTruncatedLists({
      unstagedChanges: this.props.unstagedChanges,
      stagedChanges: this.props.stagedChanges,
      mergeConflicts: this.props.mergeConflicts || []
    });
    atom.config.observe('github.keyboardNavigationDelay', value => {
      if (value === 0) {
        this.debouncedDidChangeSelectedItem = this.didChangeSelectedItems;
      } else {
        this.debouncedDidChangeSelectedItem = debounce(this.didChangeSelectedItems, value);
      }
    });
    this.mouseSelectionInProgress = false;
    this.listElementsByItem = new WeakMap();

    this.selection = new _compositeListSelection2.default({
      listsByKey: {
        unstaged: this.props.unstagedChanges,
        conflicts: this.props.mergeConflicts || [],
        staged: this.props.stagedChanges
      },
      idForItem: item => item.filePath
    });

    this.resolutionProgressObserver = new _modelObserver2.default({
      didUpdate: () => {
        if (this.element) {
          _etch2.default.update(this);
        }
      }
    });
    this.resolutionProgressObserver.setActiveModel(this.props.resolutionProgress);

    _etch2.default.initialize(this);

    this.subscriptions = new _eventKit.CompositeDisposable();
    this.subscriptions.add(this.props.commandRegistry.add(this.element, {
      'core:move-up': () => this.selectPrevious(),
      'core:move-down': () => this.selectNext(),
      'core:move-left': () => this.diveIntoSelection(),
      'core:select-up': () => this.selectPrevious(true),
      'core:select-down': () => this.selectNext(true),
      'core:select-all': () => this.selectAll(),
      'core:move-to-top': () => this.selectFirst(),
      'core:move-to-bottom': () => this.selectLast(),
      'core:select-to-top': () => this.selectFirst(true),
      'core:select-to-bottom': () => this.selectLast(true),
      'core:confirm': () => this.confirmSelectedItems(),
      'github:activate-next-list': () => this.activateNextList(),
      'github:activate-previous-list': () => this.activatePreviousList(),
      'github:open-file': () => this.openFile(),
      'github:resolve-file-as-ours': () => this.resolveCurrentAsOurs(),
      'github:resolve-file-as-theirs': () => this.resolveCurrentAsTheirs(),
      'core:undo': () => this.props.hasUndoHistory && this.undoLastDiscard()
    }));
    this.subscriptions.add(this.props.commandRegistry.add('atom-workspace', {
      'github:stage-all-changes': () => this.stageAll(),
      'github:unstage-all-changes': () => this.unstageAll(),
      'github:discard-all-changes': () => this.discardAll(),
      'github:undo-last-discard-in-git-tab': () => this.props.hasUndoHistory && this.undoLastDiscard()
    }));
    this.subscriptions.add(this.props.commandRegistry.add(this.refs.unstagedChanges, {
      'github:discard-changes-in-selected-files': () => this.discardChanges()
    }));
    window.addEventListener('mouseup', this.mouseup);
    this.subscriptions.add(new _eventKit.Disposable(() => window.removeEventListener('mouseup', this.mouseup)));
  }

  getSelectedConflictPaths() {
    if (this.selection.getActiveListKey() !== 'conflicts') {
      return [];
    }
    return Array.from(this.selection.getSelectedItems(), item => item.filePath);
  }

  update(props) {
    var _this = this;

    return _asyncToGenerator(function* () {
      const oldProps = _this.props;
      _this.props = _extends({}, _this.props, props);
      _this.truncatedLists = _this.calculateTruncatedLists({
        unstagedChanges: _this.props.unstagedChanges,
        stagedChanges: _this.props.stagedChanges,
        mergeConflicts: _this.props.mergeConflicts || []
      });
      _this.selection.updateLists({
        unstaged: _this.props.unstagedChanges,
        conflicts: _this.props.mergeConflicts || [],
        staged: _this.props.stagedChanges
      });

      if (_this.props.resolutionProgress !== oldProps.resolutionProgress) {
        yield _this.resolutionProgressObserver.setActiveModel(_this.props.resolutionProgress);
      }

      return _etch2.default.update(_this);
    })();
  }

  calculateTruncatedLists(lists) {
    return Object.keys(lists).reduce((acc, key) => {
      const list = lists[key];
      if (list.length <= MAXIMUM_LISTED_ENTRIES) {
        acc[key] = list;
      } else {
        acc[key] = list.slice(0, MAXIMUM_LISTED_ENTRIES);
      }
      return acc;
    }, {});
  }

  openFile() {
    const filePaths = Array.from(this.selection.getSelectedItems()).map(item => item.filePath);
    return this.props.openFiles(filePaths);
  }

  discardChanges() {
    const filePaths = Array.from(this.selection.getSelectedItems()).map(item => item.filePath);
    return this.props.discardWorkDirChangesForPaths(filePaths);
  }

  activateNextList() {
    if (!this.selection.activateNextSelection()) {
      return false;
    }

    this.selection.coalesce();
    this.didChangeSelectedItems();
    _etch2.default.update(this);
    return true;
  }

  activatePreviousList() {
    if (!this.selection.activatePreviousSelection()) {
      return false;
    }

    this.selection.coalesce();
    this.didChangeSelectedItems();
    _etch2.default.update(this);
    return true;
  }

  activateLastList() {
    if (!this.selection.activateLastSelection()) {
      return false;
    }

    this.selection.coalesce();
    this.didChangeSelectedItems();
    _etch2.default.update(this);
    return true;
  }

  stageAll() {
    if (this.props.unstagedChanges.length === 0) {
      return null;
    }
    const filePaths = this.props.unstagedChanges.map(filePatch => filePatch.filePath);
    return this.props.attemptFileStageOperation(filePaths, 'unstaged');
  }

  unstageAll() {
    if (this.props.stagedChanges.length === 0) {
      return null;
    }
    const filePaths = this.props.stagedChanges.map(filePatch => filePatch.filePath);
    return this.props.attemptFileStageOperation(filePaths, 'staged');
  }

  stageAllMergeConflicts() {
    if (this.props.mergeConflicts.length === 0) {
      return null;
    }
    const filePaths = this.props.mergeConflicts.map(conflict => conflict.filePath);
    return this.props.attemptFileStageOperation(filePaths, 'unstaged');
  }

  discardAll() {
    if (this.props.unstagedChanges.length === 0) {
      return null;
    }
    const filePaths = this.props.unstagedChanges.map(filePatch => filePatch.filePath);
    return this.props.discardWorkDirChangesForPaths(filePaths);
  }

  confirmSelectedItems() {
    const itemPaths = Array.from(this.selection.getSelectedItems()).map(item => item.filePath);
    return this.props.attemptFileStageOperation(itemPaths, this.selection.getActiveListKey());
  }

  getNextListUpdatePromise() {
    return this.selection.getNextUpdatePromise();
  }

  selectPrevious() {
    let preserveTail = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    this.selection.selectPreviousItem(preserveTail);
    this.selection.coalesce();
    if (!preserveTail) {
      this.debouncedDidChangeSelectedItem();
    }
    return _etch2.default.update(this);
  }

  selectNext() {
    let preserveTail = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    this.selection.selectNextItem(preserveTail);
    this.selection.coalesce();
    if (!preserveTail) {
      this.debouncedDidChangeSelectedItem();
    }
    return _etch2.default.update(this);
  }

  selectAll() {
    this.selection.selectAllItems();
    this.selection.coalesce();
    return _etch2.default.update(this);
  }

  selectFirst() {
    let preserveTail = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    this.selection.selectFirstItem(preserveTail);
    this.selection.coalesce();
    if (!preserveTail) {
      this.debouncedDidChangeSelectedItem();
    }
    return _etch2.default.update(this);
  }

  selectLast() {
    let preserveTail = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    this.selection.selectLastItem(preserveTail);
    this.selection.coalesce();
    if (!preserveTail) {
      this.debouncedDidChangeSelectedItem();
    }
    return _etch2.default.update(this);
  }

  diveIntoSelection() {
    const selectedItems = this.selection.getSelectedItems();
    if (selectedItems.size !== 1) {
      return;
    }

    const selectedItem = selectedItems.values().next().value;
    const stagingStatus = this.selection.getActiveListKey();

    if (stagingStatus === 'conflicts') {
      if (this.props.didDiveIntoMergeConflictPath) {
        this.props.didDiveIntoMergeConflictPath(selectedItem.filePath);
      }
    } else {
      if (this.props.didDiveIntoFilePath) {
        const amending = this.props.isAmending && this.selection.getActiveListKey() === 'staged';
        this.props.didDiveIntoFilePath(selectedItem.filePath, this.selection.getActiveListKey(), { amending });
      }
    }
  }

  showBulkResolveMenu(event) {
    const conflictPaths = this.props.mergeConflicts.map(c => c.filePath);

    event.preventDefault();

    const menu = new Menu();

    menu.append(new MenuItem({
      label: 'Resolve All as Ours',
      click: () => this.props.resolveAsOurs(conflictPaths)
    }));

    menu.append(new MenuItem({
      label: 'Resolve All as Theirs',
      click: () => this.props.resolveAsTheirs(conflictPaths)
    }));

    menu.popup(_electron.remote.getCurrentWindow());
  }

  resolveCurrentAsOurs() {
    this.props.resolveAsOurs(this.getSelectedConflictPaths());
  }

  resolveCurrentAsTheirs() {
    this.props.resolveAsTheirs(this.getSelectedConflictPaths());
  }

  writeAfterUpdate() {
    const headItem = this.selection.getHeadItem();
    if (headItem) {
      this.listElementsByItem.get(headItem).scrollIntoViewIfNeeded();
    }
  }

  // Directly modify the selection to include only the item identified by the file path and stagingStatus tuple.
  // Re-render the component, but don't notify didSelectSingleItem() or other callback functions. This is useful to
  // avoid circular callback loops for actions originating in FilePatchView or TextEditors with merge conflicts.
  quietlySelectItem(filePath, stagingStatus) {
    const item = this.selection.findItem((each, key) => each.filePath === filePath && key === stagingStatus);
    if (!item) {
      return Promise.reject(new Error(`Unable to find item at path ${filePath} with staging status ${stagingStatus}`));
    }

    this.selection.selectItem(item);
    return _etch2.default.update(this);
  }

  didChangeSelectedItems() {
    const selectedItems = Array.from(this.selection.getSelectedItems());
    if (selectedItems.length === 1) {
      this.didSelectSingleItem(selectedItems[0]);
    }
  }

  didSelectSingleItem(selectedItem) {
    if (this.selection.getActiveListKey() === 'conflicts') {
      if (this.props.didSelectMergeConflictFile) {
        this.props.didSelectMergeConflictFile(selectedItem.filePath);
      }
    } else {
      if (this.props.didSelectFilePath) {
        const amending = this.props.isAmending && this.selection.getActiveListKey() === 'staged';
        this.props.didSelectFilePath(selectedItem.filePath, this.selection.getActiveListKey(), { amending, activate: true });
      }
    }
  }

  dblclickOnItem(event, item) {
    return this.props.attemptFileStageOperation([item.filePath], this.selection.listKeyForItem(item));
  }

  contextMenuOnItem(event, item) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      if (!_this2.selection.getSelectedItems().has(item)) {
        event.stopPropagation();
        _this2.selection.selectItem(item, event.shiftKey);
        yield _etch2.default.update(_this2);
        const newEvent = new MouseEvent(event.type, event);
        requestAnimationFrame(function () {
          event.target.parentNode.dispatchEvent(newEvent);
        });
      }
    })();
  }

  mousedownOnItem(event, item) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      const windows = process.platform === 'win32';
      if (event.ctrlKey && !windows) {
        return;
      } // simply open context menu
      if (event.button === 0) {
        _this3.mouseSelectionInProgress = true;
        _this3.selectionChanged = true;
        if (event.metaKey || event.ctrlKey && windows) {
          _this3.selection.addOrSubtractSelection(item);
        } else {
          _this3.selection.selectItem(item, event.shiftKey);
        }
        yield _etch2.default.update(_this3);
      }
    })();
  }

  mousemoveOnItem(event, item) {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      if (_this4.mouseSelectionInProgress) {
        _this4.selectionChanged = true;
        _this4.selection.selectItem(item, true);
        yield _etch2.default.update(_this4);
      }
    })();
  }

  mouseup() {
    this.selection.coalesce();
    if (this.selectionChanged) {
      this.didChangeSelectedItems();
    }
    this.mouseSelectionInProgress = false;
    this.selectionChanged = false;
  }

  render() {
    const selectedItems = this.selection.getSelectedItems();

    return _etch2.default.dom(
      'div',
      {
        className: `github-StagingView ${this.selection.getActiveListKey()}-changes-focused`,
        style: { width: 200 },
        tabIndex: '-1' },
      _etch2.default.dom(
        'div',
        { className: `github-StagingView-group github-UnstagedChanges ${this.getFocusClass('unstaged')}` },
        _etch2.default.dom(
          'header',
          { className: 'github-StagingView-header' },
          _etch2.default.dom('span', { className: 'icon icon-list-unordered' }),
          _etch2.default.dom(
            'span',
            { className: 'github-StagingView-title' },
            'Unstaged Changes'
          ),
          this.props.unstagedChanges.length ? this.renderStageAllButton() : null
        ),
        this.props.hasUndoHistory ? this.renderUndoButton() : null,
        _etch2.default.dom(
          'div',
          { ref: 'unstagedChanges', className: 'github-StagingView-list github-FilePatchListView' },
          this.truncatedLists.unstagedChanges.map(filePatch => _etch2.default.dom(_filePatchListItemView2.default, {
            key: filePatch.filePath,
            registerItemElement: this.registerItemElement,
            filePatch: filePatch,
            ondblclick: event => this.dblclickOnItem(event, filePatch),
            oncontextmenu: event => this.contextMenuOnItem(event, filePatch),
            onmousedown: event => this.mousedownOnItem(event, filePatch),
            onmousemove: event => this.mousemoveOnItem(event, filePatch),
            selected: selectedItems.has(filePatch)
          }))
        ),
        this.renderTruncatedMessage(this.props.unstagedChanges)
      ),
      this.renderMergeConflicts(),
      _etch2.default.dom(
        'div',
        { className: `github-StagingView-group github-StagedChanges ${this.getFocusClass('staged')}` },
        _etch2.default.dom(
          'header',
          { className: 'github-StagingView-header' },
          _etch2.default.dom('span', { className: 'icon icon-tasklist' }),
          _etch2.default.dom(
            'span',
            { className: 'github-StagingView-title' },
            'Staged Changes',
            this.props.isAmending ? ` (amending ${(0, _helpers.shortenSha)(this.props.lastCommit.getSha())})` : ''
          ),
          this.props.stagedChanges.length ? this.renderUnstageAllButton() : null
        ),
        _etch2.default.dom(
          'div',
          { ref: 'stagedChanges', className: 'github-StagingView-list github-FilePatchListView' },
          this.truncatedLists.stagedChanges.map(filePatch => _etch2.default.dom(_filePatchListItemView2.default, {
            key: filePatch.filePath,
            filePatch: filePatch,
            registerItemElement: this.registerItemElement,
            ondblclick: event => this.dblclickOnItem(event, filePatch),
            oncontextmenu: event => this.contextMenuOnItem(event, filePatch),
            onmousedown: event => this.mousedownOnItem(event, filePatch),
            onmousemove: event => this.mousemoveOnItem(event, filePatch),
            selected: selectedItems.has(filePatch)
          }))
        ),
        this.renderTruncatedMessage(this.props.stagedChanges)
      )
    );
  }

  renderMergeConflicts() {
    const mergeConflicts = this.truncatedLists.mergeConflicts;

    if (mergeConflicts && mergeConflicts.length > 0) {
      const selectedItems = this.selection.getSelectedItems();
      const resolutionProgress = this.resolutionProgressObserver.getActiveModel() || new _resolutionProgress2.default();
      const anyUnresolved = mergeConflicts.map(conflict => _path2.default.join(this.props.workingDirectoryPath, conflict.filePath)).some(conflictPath => resolutionProgress.getRemaining(conflictPath) !== 0);

      const bulkResolveDropdown = anyUnresolved ? _etch2.default.dom('span', {
        className: 'inline-block icon icon-ellipses',
        onclick: this.showBulkResolveMenu
      }) : null;

      return _etch2.default.dom(
        'div',
        { className: `github-StagingView-group github-MergeConflictPaths ${this.getFocusClass('conflicts')}` },
        _etch2.default.dom(
          'header',
          { className: 'github-StagingView-header' },
          _etch2.default.dom('span', { className: 'github-FilePatchListView-icon icon icon-alert status-modified' }),
          _etch2.default.dom(
            'span',
            { className: 'github-StagingView-title' },
            'Merge Conflicts'
          ),
          bulkResolveDropdown,
          _etch2.default.dom(
            'button',
            {
              className: 'github-StagingView-headerButton icon icon-move-down',
              disabled: anyUnresolved,
              onclick: this.stageAllMergeConflicts },
            'Stage All'
          )
        ),
        _etch2.default.dom(
          'div',
          { ref: 'mergeConflicts', className: 'github-StagingView-list github-FilePatchListView' },
          mergeConflicts.map(mergeConflict => {
            const fullPath = _path2.default.join(this.props.workingDirectoryPath, mergeConflict.filePath);

            return _etch2.default.dom(_mergeConflictListItemView2.default, {
              key: fullPath,
              mergeConflict: mergeConflict,
              remainingConflicts: resolutionProgress.getRemaining(fullPath),
              registerItemElement: this.registerItemElement,
              ondblclick: event => this.dblclickOnItem(event, mergeConflict),
              oncontextmenu: event => this.contextMenuOnItem(event, mergeConflict),
              onmousedown: event => this.mousedownOnItem(event, mergeConflict),
              onmousemove: event => this.mousemoveOnItem(event, mergeConflict),
              selected: selectedItems.has(mergeConflict)
            });
          })
        ),
        this.renderTruncatedMessage(mergeConflicts)
      );
    } else {
      return _etch2.default.dom('noscript', null);
    }
  }

  renderStageAllButton() {
    return _etch2.default.dom(
      'button',
      {
        className: 'github-StagingView-headerButton icon icon-move-down',
        onclick: this.stageAll },
      'Stage All'
    );
  }

  renderUnstageAllButton() {
    return _etch2.default.dom(
      'button',
      { className: 'github-StagingView-headerButton icon icon-move-up',
        onclick: this.unstageAll },
      'Unstage All'
    );
  }

  renderUndoButton() {
    return _etch2.default.dom(
      'button',
      { className: 'github-StagingView-headerButton github-StagingView-headerButton--fullWidth icon icon-history',
        onclick: this.undoLastDiscard },
      'Undo Discard'
    );
  }

  renderTruncatedMessage(list) {
    if (list.length > MAXIMUM_LISTED_ENTRIES) {
      return _etch2.default.dom(
        'div',
        { className: 'github-StagingView-group-truncatedMsg' },
        'List truncated to the first ',
        MAXIMUM_LISTED_ENTRIES,
        ' items'
      );
    } else {
      return null;
    }
  }

  undoLastDiscard() {
    return this.props.undoLastDiscard();
  }

  getFocusClass(listKey) {
    return this.selection.getActiveListKey() === listKey ? 'is-focused' : '';
  }

  registerItemElement(item, element) {
    this.listElementsByItem.set(item, element);
  }

  destroy() {
    this.resolutionProgressObserver.destroy();
    this.subscriptions.dispose();
    _etch2.default.destroy(this);
  }

  rememberFocus(event) {
    return this.element.contains(event.target) ? StagingView.focus.STAGING : null;
  }

  setFocus(focus) {
    if (focus === StagingView.focus.STAGING) {
      this.element.focus();
      return true;
    }

    return false;
  }
}, _class2.focus = {
  STAGING: Symbol('staging')
}, _temp), (_applyDecoratedDescriptor(_class.prototype, 'activateNextList', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'activateNextList'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'activatePreviousList', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'activatePreviousList'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'stageAll', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'stageAll'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'unstageAll', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'unstageAll'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'stageAllMergeConflicts', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'stageAllMergeConflicts'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'discardAll', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'discardAll'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'diveIntoSelection', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'diveIntoSelection'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'showBulkResolveMenu', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'showBulkResolveMenu'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'resolveCurrentAsOurs', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'resolveCurrentAsOurs'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'resolveCurrentAsTheirs', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'resolveCurrentAsTheirs'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'didChangeSelectedItems', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'didChangeSelectedItems'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'dblclickOnItem', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'dblclickOnItem'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'contextMenuOnItem', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'contextMenuOnItem'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'mousedownOnItem', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'mousedownOnItem'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'mousemoveOnItem', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'mousemoveOnItem'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'mouseup', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'mouseup'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'renderStageAllButton', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'renderStageAllButton'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'undoLastDiscard', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'undoLastDiscard'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'registerItemElement', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'registerItemElement'), _class.prototype)), _class);
exports.default = StagingView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,