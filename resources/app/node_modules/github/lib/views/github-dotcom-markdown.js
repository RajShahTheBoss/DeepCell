'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _desc, _value, _class, _class2, _temp;

var _eventKit = require('event-kit');

var _electron = require('electron');

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _coreDecorators = require('core-decorators');

var _issueishPaneItem = require('../atom-items/issueish-pane-item');

var _issueishPaneItem2 = _interopRequireDefault(_issueishPaneItem);

var _userMentionTooltipItem = require('../atom-items/user-mention-tooltip-item');

var _userMentionTooltipItem2 = _interopRequireDefault(_userMentionTooltipItem);

var _issueishTooltipItem = require('../atom-items/issueish-tooltip-item');

var _issueishTooltipItem2 = _interopRequireDefault(_issueishTooltipItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

let GithubDotcomMarkdown = (_class = (_temp = _class2 = class GithubDotcomMarkdown extends _react2.default.Component {

  componentDidMount() {
    this.commandSubscriptions = atom.commands.add(_reactDom2.default.findDOMNode(this), {
      'github:open-link-in-new-tab': this.openLinkInNewTab,
      'github:open-link-in-browser': this.openLinkInBrowser,
      'github:open-link-in-this-tab': this.openLinkInThisTab
    });
    this.checkPropValidity();
    this.setupComponentHandlers();
    this.setupTooltipHandlers();
  }

  componentDidUpdate() {
    this.checkPropValidity();
    this.setupTooltipHandlers();
  }

  checkPropValidity() {
    if (this.props.html !== undefined && this.props.markdown !== undefined) {
      // eslint-disable-next-line no-console
      console.error('Only one of `html` or `markdown` may be provided to `GithubDotcomMarkdown`');
    }
  }

  setupComponentHandlers() {
    this.component.addEventListener('click', this.handleClick);
    this.componentHandlers = new _eventKit.Disposable(() => {
      this.component.removeEventListener('click', this.handleClick);
    });
  }

  setupTooltipHandlers() {
    if (this.tooltipSubscriptions) {
      this.tooltipSubscriptions.dispose();
    }

    this.tooltipSubscriptions = new _eventKit.CompositeDisposable();
    this.component.querySelectorAll('.user-mention').forEach(node => {
      const item = new _userMentionTooltipItem2.default(node.textContent, this.context.relayEnvironment);
      this.tooltipSubscriptions.add(atom.tooltips.add(node, {
        trigger: 'hover',
        delay: 0,
        item
      }));
      this.tooltipSubscriptions.add(new _eventKit.Disposable(() => item.destroy()));
    });
    this.component.querySelectorAll('.issue-link').forEach(node => {
      const item = new _issueishTooltipItem2.default(node.getAttribute('href'), this.context.relayEnvironment);
      this.tooltipSubscriptions.add(atom.tooltips.add(node, {
        trigger: 'hover',
        delay: 0,
        item
      }));
      this.tooltipSubscriptions.add(new _eventKit.Disposable(() => item.destroy()));
    });
  }

  componentWillUnmount() {
    this.commandSubscriptions.dispose();
    this.componentHandlers.dispose();
    this.tooltipSubscriptions && this.tooltipSubscriptions.dispose();
  }

  render() {
    var _props = this.props;
    const html = _props.html,
          markdown = _props.markdown;

    const renderedHtml = html !== undefined ? html : this.markdownToHtml(markdown);
    return _react2.default.createElement('div', {
      className: 'github-DotComMarkdownHtml',
      ref: c => {
        this.component = c;
      },
      dangerouslySetInnerHTML: { __html: renderedHtml }
    });
  }

  markdownToHtml() {
    let markdown = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    return 'WARNING: cannot yet convert markdown to HTML ðŸ˜…';
  }

  handleClick(event) {
    if (event.target.classList.contains('issue-link')) {
      const uri = this.getAtomUriForGithubUrl(event.target.dataset.url);
      if (uri && !event.shiftKey) {
        // Open in browser if shift key held
        this.openInNewTab(uri, { activate: !(event.metaKey || event.ctrlKey) });
        event.preventDefault();
        event.stopPropagation();
      }
    }
  }

  openLinkInNewTab(event) {
    const uri = this.getAtomUriForGithubUrl(event.target.dataset.url);
    if (uri) {
      this.openInNewTab(uri);
    }
  }

  openLinkInThisTab(event) {
    var _getDataFromGithubUrl = this.getDataFromGithubUrl(event.target.dataset.url);

    const repoOwner = _getDataFromGithubUrl.repoOwner,
          repoName = _getDataFromGithubUrl.repoName,
          issueishNumber = _getDataFromGithubUrl.issueishNumber;

    this.props.switchToIssueish(repoOwner, repoName, issueishNumber);
  }

  openLinkInBrowser(event) {
    const href = event.target.getAttribute('href');
    _electron.shell.openExternal(href);
  }

  getDataFromGithubUrl(githubUrl) {
    var _url$parse = _url2.default.parse(githubUrl);

    const hostname = _url$parse.hostname,
          pathname = _url$parse.pathname;

    var _pathname$split$filte = pathname.split('/').filter(s => s),
        _pathname$split$filte2 = _slicedToArray(_pathname$split$filte, 4);

    const repoOwner = _pathname$split$filte2[0],
          repoName = _pathname$split$filte2[1],
          type = _pathname$split$filte2[2],
          issueishNumber = _pathname$split$filte2[3];

    return { hostname, repoOwner, repoName, type, issueishNumber: parseInt(issueishNumber, 10) };
  }

  getUriForData(_ref) {
    let hostname = _ref.hostname,
        repoOwner = _ref.repoOwner,
        repoName = _ref.repoName,
        type = _ref.type,
        issueishNumber = _ref.issueishNumber;

    if (hostname !== 'github.com' || !['pull', 'issues'].includes(type) || !issueishNumber || isNaN(issueishNumber)) {
      return null;
    } else {
      return _url2.default.format({
        slashes: true,
        protocol: 'atom-github:',
        hostname: 'issueish',
        pathname: `/https://api.github.com/${repoOwner}/${repoName}/${issueishNumber}`
      });
    }
  }

  getAtomUriForGithubUrl(githubUrl) {
    return this.getUriForData(this.getDataFromGithubUrl(githubUrl));
  }

  openInNewTab(uri) {
    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { activate: true };

    let activate = _ref2.activate;

    if (activate) {
      atom.workspace.open(uri, { activateItem: activate });
    } else {
      // TODO: use workspace.open once https://github.com/atom/atom/issues/14005 is fixed
      const item = _issueishPaneItem2.default.opener(uri);
      atom.workspace.getActivePane().addItem(item);
    }
  }
}, _class2.propTypes = {
  html: _propTypes2.default.string,
  markdown: _propTypes2.default.string,
  switchToIssueish: _propTypes2.default.func.isRequired
}, _class2.contextTypes = {
  relayEnvironment: _propTypes2.default.object.isRequired
}, _temp), (_applyDecoratedDescriptor(_class.prototype, 'handleClick', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'handleClick'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'openLinkInNewTab', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'openLinkInNewTab'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'openLinkInThisTab', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'openLinkInThisTab'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'openLinkInBrowser', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'openLinkInBrowser'), _class.prototype)), _class);
exports.default = GithubDotcomMarkdown;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,