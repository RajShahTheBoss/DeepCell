'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _eventKit = require('event-kit');

var _portal = require('./portal');

var _portal2 = _interopRequireDefault(_portal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let Decoration = (_temp = _class = class Decoration extends _react2.default.Component {

  constructor(props, context) {
    super(props, context);

    this.decoration = null;
    this.subscriptions = new _eventKit.CompositeDisposable();
  }

  usesItem() {
    return this.props.type === 'gutter' || this.props.type === 'overlay' || this.props.type === 'block';
  }

  componentWillReceiveProps(nextProps) {
    let recreationRequired = this.props.editor !== nextProps.editor || this.props.marker !== nextProps.marker || this.props.type !== nextProps.type || this.props.position !== nextProps.position || this.props.className !== nextProps.className || this.props.getItem !== nextProps.getItem || this.props.children !== nextProps.children;

    if (!recreationRequired) {
      // Compare additional options.
      const optionKeys = Object.keys(this.props.options);
      const nextOptionKeys = Object.keys(nextProps.options);

      if (optionKeys.length !== nextOptionKeys.length) {
        recreationRequired = true;
      } else {
        for (let i = 0; i < optionKeys.length; i++) {
          const key = optionKeys[i];
          if (this.props.options[key] !== nextProps.options[key]) {
            recreationRequired = true;
            break;
          }
        }
      }
    }

    if (recreationRequired) {
      this.decoration && this.decoration.destroy();
      this.setupDecoration(nextProps);
    }
  }

  componentDidMount() {
    this.setupDecoration(this.props);
  }

  render() {
    if (this.usesItem()) {
      return _react2.default.createElement(
        _portal2.default,
        { ref: c => {
            this.portal = c;
          } },
        this.props.children
      );
    } else {
      return null;
    }
  }

  setupDecoration(props) {
    if (this.decoration) {
      return;
    }

    let item = null;
    if (this.usesItem()) {
      item = props.getItem({ portal: this.portal, subtree: this.portal.getRenderedSubtree() });
    }

    const options = _extends({}, props.options, {
      type: props.type,
      position: props.position,
      class: props.className,
      item
    });

    this.decoration = props.editor.decorateMarker(props.marker, options);
    this.subscriptions.add(this.decoration.onDidDestroy(() => {
      this.decoration = null;
      this.subscriptions.dispose();
    }));
  }

  componentWillUnmount() {
    this.decoration && this.decoration.destroy();
    this.subscriptions.dispose();
  }
}, _class.propTypes = {
  editor: _propTypes2.default.object.isRequired,
  marker: _propTypes2.default.object.isRequired,
  type: _propTypes2.default.oneOf(['line', 'line-number', 'highlight', 'overlay', 'gutter', 'block']).isRequired,
  position: _propTypes2.default.oneOf(['head', 'tail', 'before', 'after']),
  className: _propTypes2.default.string,
  children: _propTypes2.default.element,
  getItem: _propTypes2.default.func,
  options: _propTypes2.default.object
}, _class.defaultProps = {
  options: {},
  position: 'head',
  getItem: (_ref) => {
    let portal = _ref.portal,
        subtree = _ref.subtree;
    return portal;
  }
}, _temp);
exports.default = Decoration;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,