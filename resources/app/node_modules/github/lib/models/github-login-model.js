'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.InMemoryStrategy = exports.SecurityBinaryStrategy = exports.KeytarStrategy = exports.UNAUTHENTICATED = undefined;

var _child_process = require('child_process');

var _keytar = require('keytar');

var _keytar2 = _interopRequireDefault(_keytar);

var _eventKit = require('event-kit');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const UNAUTHENTICATED = exports.UNAUTHENTICATED = Symbol('UNAUTHENTICATED');

let KeytarStrategy = exports.KeytarStrategy = class KeytarStrategy {
  static isValid() {
    return _asyncToGenerator(function* () {
      try {
        const rand = Math.floor(Math.random() * 10e20).toString(16);
        yield _keytar2.default.setPassword('atom-test-service', rand, rand);
        const pass = yield _keytar2.default.getPassword('atom-test-service', rand);
        const success = pass === rand;
        _keytar2.default.deletePassword('atom-test-service', rand);
        return success;
      } catch (err) {
        return false;
      }
    })();
  }

  getPassword(service, account) {
    return _keytar2.default.getPassword(service, account);
  }

  replacePassword(service, account, password) {
    return _keytar2.default.setPassword(service, account, password);
  }

  deletePassword(service, account) {
    return _keytar2.default.deletePassword(service, account);
  }
};
let SecurityBinaryStrategy = exports.SecurityBinaryStrategy = class SecurityBinaryStrategy {
  static isValid() {
    return process.platform === 'darwin';
  }

  getPassword(service, account) {
    var _this = this;

    return _asyncToGenerator(function* () {
      try {
        const password = yield _this.exec(['find-generic-password', '-s', service, '-a', account, '-w']);
        return password.trim() || UNAUTHENTICATED;
      } catch (err) {
        return UNAUTHENTICATED;
      }
    })();
  }

  replacePassword(service, account, newPassword) {
    return this.exec(['add-generic-password', '-s', service, '-a', account, '-w', newPassword, '-U']);
  }

  deletePassword(service, account) {
    return this.exec(['delete-generic-password', '-s', service, '-a', account]);
  }

  exec(securityArgs) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { binary: 'security' };

    let binary = _ref.binary;

    return new Promise((resolve, reject) => {
      (0, _child_process.execFile)(binary, securityArgs, (error, stdout) => {
        if (error) {
          return reject(error);
        }
        return resolve(stdout);
      });
    });
  }
};
let InMemoryStrategy = exports.InMemoryStrategy = class InMemoryStrategy {
  static isValid() {
    return true;
  }

  constructor() {
    if (!atom.inSpecMode()) {
      // eslint-disable-next-line no-console
      console.warn('Using an InMemoryStrategy strategy for storing tokens. ' + 'The tokens will only be stored for the current window.');
    }
    this.passwordsByService = new Map();
  }

  getPassword(service, account) {
    const passwords = this.passwordsByService.get(service) || new Map();
    const password = passwords.get(account);
    return password || UNAUTHENTICATED;
  }

  replacePassword(service, account, newPassword) {
    const passwords = this.passwordsByService.get(service) || new Map();
    passwords.set(account, newPassword);
    this.passwordsByService.set(service, passwords);
  }

  deletePassword(service, account) {
    const passwords = this.passwordsByService.get(service);
    if (passwords) {
      passwords.delete(account);
    }
  }
};


let instance = null;
const strategies = [KeytarStrategy, SecurityBinaryStrategy, InMemoryStrategy];
let GithubLoginModel = class GithubLoginModel {
  static get() {
    if (!instance) {
      instance = new GithubLoginModel();
    }
    return instance;
  }

  constructor(Strategy) {
    this._Strategy = Strategy;
    this._strategy = null;
    this.emitter = new _eventKit.Emitter();
  }

  getStrategy() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      if (_this2._strategy) {
        return _this2._strategy;
      }

      if (_this2._Strategy) {
        _this2._strategy = new _this2._Strategy();
        return _this2._strategy;
      }

      let Strategy;
      for (let i = 0; i < strategies.length; i++) {
        const strat = strategies[i];
        const isValid = yield strat.isValid();
        if (isValid) {
          Strategy = strat;
          break;
        }
      }
      // const Strategy = this._Strategy || strategies.find(strat => strat.isValid());
      if (!Strategy) {
        throw new Error('None of the listed GithubLoginModel strategies returned true for `isValid`');
      }
      _this2._strategy = new Strategy();
      return _this2._strategy;
    })();
  }

  getToken(account) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      const strategy = yield _this3.getStrategy();
      let password = yield strategy.getPassword('atom-github', account);
      if (!password) {
        // User is not logged in
        password = UNAUTHENTICATED;
      }
      return password;
    })();
  }

  setToken(account, token) {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      const strategy = yield _this4.getStrategy();
      yield strategy.replacePassword('atom-github', account, token);
      _this4.didUpdate();
    })();
  }

  removeToken(account) {
    var _this5 = this;

    return _asyncToGenerator(function* () {
      const strategy = yield _this5.getStrategy();
      yield strategy.deletePassword('atom-github', account);
      _this5.didUpdate();
    })();
  }

  didUpdate() {
    this.emitter.emit('did-update');
  }

  onDidUpdate(cb) {
    return this.emitter.on('did-update', cb);
  }

  destroy() {
    this.emitter.dispose();
  }
};
exports.default = GithubLoginModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,