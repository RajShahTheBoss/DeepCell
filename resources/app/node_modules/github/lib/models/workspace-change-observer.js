'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FOCUS = undefined;

var _desc, _value, _class;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _eventKit = require('event-kit');

var _nsfw = require('nsfw');

var _nsfw2 = _interopRequireDefault(_nsfw);

var _coreDecorators = require('core-decorators');

var _eventLogger = require('./event-logger');

var _eventLogger2 = _interopRequireDefault(_eventLogger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

const FOCUS = exports.FOCUS = Symbol('focus');

let WorkspaceChangeObserver = (_class = class WorkspaceChangeObserver {
  constructor(window, workspace, repository) {
    this.window = window;
    this.repository = repository;
    this.workspace = workspace;
    this.observedBuffers = new WeakSet();
    this.emitter = new _eventKit.Emitter();
    this.disposables = new _eventKit.CompositeDisposable();
    this.logger = new _eventLogger2.default('workspace watcher');
    this.started = false;
  }

  start() {
    var _this = this;

    return _asyncToGenerator(function* () {
      const focusHandler = function (event) {
        if (_this.repository) {
          _this.logger.showFocusEvent();
          _this.didChange([{ special: FOCUS }]);
        }
      };
      _this.window.addEventListener('focus', focusHandler);
      _this.disposables.add(_this.workspace.observeTextEditors(_this.observeTextEditor), new _eventKit.Disposable(function () {
        return _this.window.removeEventListener('focus', focusHandler);
      }));
      yield _this.watchActiveRepositoryGitDirectory();
      _this.started = true;
      return _this;
    })();
  }

  destroy() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      _this2.started = false;
      _this2.observedBuffers = new WeakSet();
      _this2.emitter.dispose();
      _this2.disposables.dispose();
      yield _this2.stopCurrentFileWatcher();
    })();
  }

  isStarted() {
    return this.started;
  }

  didChange(payload) {
    this.emitter.emit('did-change', payload);
  }

  didChangeWorkdirOrHead() {
    this.emitter.emit('did-change-workdir-or-head');
  }

  onDidChange(callback) {
    return this.emitter.on('did-change', callback);
  }

  onDidChangeWorkdirOrHead(callback) {
    return this.emitter.on('did-change-workdir-or-head', callback);
  }

  getRepository() {
    return this.repository;
  }

  watchActiveRepositoryGitDirectory() {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      const repository = _this3.getRepository();
      const gitDirectoryPath = repository.getGitDirectoryPath();
      if (repository) {
        _this3.currentFileWatcher = yield (0, _nsfw2.default)(gitDirectoryPath, function (events) {
          const filteredEvents = events.filter(function (e) {
            return ['config', 'index', 'HEAD', 'MERGE_HEAD'].includes(e.file || e.newFile) || e.directory.includes(_path2.default.join('.git', 'refs'));
          });
          if (filteredEvents.length) {
            _this3.logger.showEvents(filteredEvents);
            _this3.didChange(filteredEvents);
            const workdirOrHeadEvent = filteredEvents.filter(function (e) {
              return !['config', 'index'].includes(e.file || e.newFile);
            });
            if (workdirOrHeadEvent) {
              _this3.logger.showWorkdirOrHeadEvents();
              _this3.didChangeWorkdirOrHead();
            }
          }
        }, {
          debounceMS: 100,
          errorCallback: function (errors) {
            const workingDirectory = repository.getWorkingDirectoryPath();
            // eslint-disable-next-line no-console
            console.warn(`Error in FileSystemChangeObserver in ${workingDirectory}:`, errors);
            _this3.stopCurrentFileWatcher();
          }
        });
        yield _this3.currentFileWatcher.start();
        _this3.logger.showStarted(gitDirectoryPath);
      }
    })();
  }

  stopCurrentFileWatcher() {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      if (_this4.currentFileWatcher) {
        yield _this4.currentFileWatcher.stop();
        _this4.currentFileWatcher = null;
        _this4.logger.showStopped();
      }
    })();
  }

  activeRepositoryContainsPath(filePath) {
    const repository = this.getRepository();
    if (filePath && repository) {
      return filePath.indexOf(repository.getWorkingDirectoryPath()) !== -1;
    } else {
      return false;
    }
  }

  observeTextEditor(editor) {
    const buffer = editor.getBuffer();
    if (!this.observedBuffers.has(buffer)) {
      const didChange = () => {
        const fullPath = buffer.getPath();
        const events = [{
          directory: _path2.default.dirname(fullPath),
          file: _path2.default.basename(fullPath)
        }];
        this.logger.showEvents(events);
        this.didChange(events);
      };

      this.observedBuffers.add(buffer);
      const disposables = new _eventKit.CompositeDisposable(buffer.onDidSave(() => {
        if (this.activeRepositoryContainsPath(buffer.getPath())) {
          didChange();
        }
      }), buffer.onDidReload(() => {
        if (this.activeRepositoryContainsPath(buffer.getPath())) {
          didChange();
        }
      }), buffer.onDidDestroy(() => {
        if (this.activeRepositoryContainsPath(buffer.getPath())) {
          didChange();
        }
        disposables.dispose();
      }));
      this.disposables.add(disposables);
    }
  }
}, (_applyDecoratedDescriptor(_class.prototype, 'observeTextEditor', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'observeTextEditor'), _class.prototype)), _class);
exports.default = WorkspaceChangeObserver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,