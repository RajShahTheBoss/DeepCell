'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.expectedDelegates = undefined;

var _desc, _value, _class;

var _commit = require('../commit');

var _branch = require('../branch');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

const expectedDelegates = exports.expectedDelegates = [];

/**
 * Map of registered subclasses to allow states to transition to one another without circular dependencies.
 * Subclasses of State should call `State.register` to add themselves here.
 */
const stateConstructors = new Map();

/**
 * Methods marked with this decorator on State should be delegated from a Repository to its current state. This will
 * be verified by a unit test in `repository.test.js`.
 */
function shouldDelegate(target, name, descriptor) {
  expectedDelegates.push(name);
  return descriptor;
}

/**
 * Base class for Repository states. Implements default "null" behavior.
 */
let State = (_class = class State {
  constructor(repository) {
    this.repository = repository;
  }

  static register(Subclass) {
    stateConstructors.set(Subclass.name, Subclass);
  }

  // This state has just been entered. Perform any asynchronous initialization that needs to occur.
  start() {
    return Promise.resolve();
  }

  // State probe predicates ////////////////////////////////////////////////////////////////////////////////////////////
  // Allow external callers to identify which state a Repository is in if necessary.

  isLoadingGuess() {
    return false;
  }

  isAbsentGuess() {
    return false;
  }

  isAbsent() {
    return false;
  }

  isLoading() {
    return false;
  }

  isEmpty() {
    return false;
  }

  isPresent() {
    return false;
  }

  isDestroyed() {
    return false;
  }

  // Behavior probe predicates /////////////////////////////////////////////////////////////////////////////////////////
  // Determine specific rendering behavior based on the current state.

  isUndetermined() {
    return false;
  }

  showGitTabInit() {
    return false;
  }

  showGitTabInitInProgress() {
    return false;
  }

  showGitTabLoading() {
    return false;
  }

  showStatusBarTiles() {
    return false;
  }

  hasDirectory() {
    return true;
  }

  // Lifecycle actions /////////////////////////////////////////////////////////////////////////////////////////////////
  // These generally default to rejecting a Promise with an error.

  init() {
    return unsupportedOperationPromise(this, 'init');
  }

  clone(remoteUrl) {
    return unsupportedOperationPromise(this, 'clone');
  }

  destroy() {
    return this.transitionTo('Destroyed');
  }

  refresh() {
    // No-op
  }

  observeFilesystemChange(events) {
    this.repository.refresh();
  }

  // Git operations ////////////////////////////////////////////////////////////////////////////////////////////////////
  // These default to rejecting a Promise with an error stating that the operation is not supported in the current
  // state.

  // Staging and unstaging

  stageFiles(paths) {
    return unsupportedOperationPromise(this, 'stageFiles');
  }

  unstageFiles(paths) {
    return unsupportedOperationPromise(this, 'unstageFiles');
  }

  stageFilesFromParentCommit(paths) {
    return unsupportedOperationPromise(this, 'stageFilesFromParentCommit');
  }

  applyPatchToIndex(patch) {
    return unsupportedOperationPromise(this, 'applyPatchToIndex');
  }

  applyPatchToWorkdir(patch) {
    return unsupportedOperationPromise(this, 'applyPatchToWorkdir');
  }

  // Committing

  commit(message, options) {
    return unsupportedOperationPromise(this, 'commit');
  }

  // Merging

  merge(branchName) {
    return unsupportedOperationPromise(this, 'merge');
  }

  abortMerge() {
    return unsupportedOperationPromise(this, 'abortMerge');
  }

  checkoutSide(side, paths) {
    return unsupportedOperationPromise(this, 'checkoutSide');
  }

  mergeFile(oursPath, commonBasePath, theirsPath, resultPath) {
    return unsupportedOperationPromise(this, 'mergeFile');
  }

  writeMergeConflictToIndex(filePath, commonBaseSha, oursSha, theirsSha) {
    return unsupportedOperationPromise(this, 'writeMergeConflictToIndex');
  }

  // Checkout

  checkout(revision) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return unsupportedOperationPromise(this, 'checkout');
  }

  checkoutPathsAtRevision(paths) {
    let revision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'HEAD';

    return unsupportedOperationPromise(this, 'checkoutPathsAtRevision');
  }

  // Remote interactions

  fetch(branchName) {
    return unsupportedOperationPromise(this, 'fetch');
  }

  pull(branchName) {
    return unsupportedOperationPromise(this, 'pull');
  }

  push(branchName) {
    return unsupportedOperationPromise(this, 'push');
  }

  // Configuration

  setConfig(option, value) {
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    let replaceAll = _ref.replaceAll;

    return unsupportedOperationPromise(this, 'setConfig');
  }

  unsetConfig(option) {
    return unsupportedOperationPromise(this, 'unsetConfig');
  }

  // Direct blob interactions

  createBlob() {
    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    let filePath = _ref2.filePath,
        stdin = _ref2.stdin;

    return unsupportedOperationPromise(this, 'createBlob');
  }

  expandBlobToFile(absFilePath, sha) {
    return unsupportedOperationPromise(this, 'expandBlobToFile');
  }

  // Discard history

  createDiscardHistoryBlob() {
    return unsupportedOperationPromise(this, 'createDiscardHistoryBlob');
  }

  updateDiscardHistory() {
    return unsupportedOperationPromise(this, 'updateDiscardHistory');
  }

  storeBeforeAndAfterBlobs(filePaths, isSafe, destructiveAction) {
    let partialDiscardFilePath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

    return unsupportedOperationPromise(this, 'storeBeforeAndAfterBlobs');
  }

  restoreLastDiscardInTempFiles(isSafe) {
    let partialDiscardFilePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    return unsupportedOperationPromise(this, 'restoreLastDiscardInTempFiles');
  }

  popDiscardHistory() {
    let partialDiscardFilePath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    return unsupportedOperationPromise(this, 'popDiscardHistory');
  }

  clearDiscardHistory() {
    let partialDiscardFilePath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    return unsupportedOperationPromise(this, 'clearDiscardHistory');
  }

  discardWorkDirChangesForPaths(paths) {
    return unsupportedOperationPromise(this, 'discardWorkDirChangesForPaths');
  }

  // Accessors /////////////////////////////////////////////////////////////////////////////////////////////////////////
  // When possible, these default to "empty" results when invoked in states that don't have information available, or
  // fail in a way that's consistent with the requested information not being found.

  // Index queries

  getStatusBundle() {
    return Promise.resolve({
      stagedFiles: {},
      unstagedFiles: {},
      mergeConflictFiles: {},
      branch: {
        oid: null,
        head: null,
        upstream: null,
        aheadBehind: { ahead: null, behind: null }
      }
    });
  }

  getStatusesForChangedFiles() {
    return Promise.resolve({
      stagedFiles: [],
      unstagedFiles: [],
      mergeConflictFiles: []
    });
  }

  getStagedChangesSinceParentCommit() {
    return Promise.resolve([]);
  }

  getFilePatchForPath(filePath) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return Promise.resolve(null);
  }

  readFileFromIndex(filePath) {
    return Promise.reject(new Error(`fatal: Path ${filePath} does not exist (neither on disk nor in the index).`));
  }

  // Commit access

  getLastCommit() {
    return Promise.resolve(_commit.nullCommit);
  }

  // Branches

  getBranches() {
    return Promise.resolve([]);
  }

  getCurrentBranch() {
    return Promise.resolve(_branch.nullBranch);
  }

  // Merging and rebasing status

  isMerging() {
    return Promise.resolve(false);
  }

  isRebasing() {
    return Promise.resolve(false);
  }

  // Remotes

  getRemotes() {
    return Promise.resolve([]);
  }

  getAheadCount(branchName) {
    return Promise.resolve(null);
  }

  getBehindCount(branchName) {
    return Promise.resolve(null);
  }

  getConfig(option) {
    var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    let local = _ref3.local;

    return Promise.resolve(null);
  }

  // Direct blob access

  getBlobContents(sha) {
    return Promise.reject(new Error(`fatal: Not a valid object name ${sha}`));
  }

  // Discard history

  hasDiscardHistory() {
    let partialDiscardFilePath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    return false;
  }

  getDiscardHistory() {
    let partialDiscardFilePath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    return [];
  }

  getLastHistorySnapshots() {
    let partialDiscardFilePath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    return null;
  }

  // Internal //////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Non-delegated methods that provide subclasses with convenient access to Repository properties.

  git() {
    return this.repository.git;
  }

  workdir() {
    return this.repository.getWorkingDirectoryPath();
  }

  // Call methods on the active Repository state, even if the state has transitioned beneath you.
  // Use this to perform operations within `start()` methods to guard against interrupted state transitions.
  current() {
    return this.repository.state;
  }

  // Return a Promise that will resolve once the state transitions from Loading.
  getLoadPromise() {
    return this.repository.getLoadPromise();
  }

  getRemoteForBranch(branchName) {
    return this.repository.getRemoteForBranch(branchName);
  }

  saveDiscardHistory() {
    return this.repository.saveDiscardHistory();
  }

  // Initiate a transition to another state.
  transitionTo(stateName) {
    const StateConstructor = stateConstructors.get(stateName);
    if (StateConstructor === undefined) {
      throw new Error(`Attempt to transition to unrecognized state ${stateName}`);
    }

    for (var _len = arguments.length, payload = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      payload[_key - 1] = arguments[_key];
    }

    return this.repository.transition(this, StateConstructor, ...payload);
  }

  // Event broadcast

  didDestroy() {
    return this.repository.emitter.emit('did-destroy');
  }

  didUpdate() {
    return this.repository.emitter.emit('did-update');
  }

  // Direct git access
  // Non-delegated git operations for internal use within states.

  directResolveDotGitDir() {
    return Promise.resolve(null);
  }

  directGetConfig(key) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return Promise.resolve(null);
  }

  directGetBlobContents() {
    return Promise.reject(new Error('Not a valid object name'));
  }

  directInit() {
    return Promise.resolve();
  }

  directClone(remoteUrl, options) {
    return Promise.resolve();
  }

  // Deferred operations
  // Direct raw git operations to the current state, even if the state has been changed. Use these methods within
  // start() methods.

  resolveDotGitDir() {
    return this.current().directResolveDotGitDir();
  }

  doInit(workdir) {
    return this.current().directInit();
  }

  doClone(remoteUrl, options) {
    return this.current().directClone(remoteUrl, options);
  }

  // Parse a DiscardHistory payload from the SHA recorded in config.
  loadHistoryPayload() {
    var _this = this;

    return _asyncToGenerator(function* () {
      const historySha = yield _this.current().directGetConfig('atomGithub.historySha');
      if (!historySha) {
        return {};
      }

      let blob;
      try {
        blob = yield _this.current().directGetBlobContents(historySha);
      } catch (e) {
        if (/Not a valid object name/.test(e.stdErr)) {
          return {};
        }

        throw e;
      }

      try {
        return JSON.parse(blob);
      } catch (e) {
        return {};
      }
    })();
  }

  // Debugging assistance.

  toString() {
    return this.constructor.name;
  }
}, (_applyDecoratedDescriptor(_class.prototype, 'isLoadingGuess', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'isLoadingGuess'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'isAbsentGuess', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'isAbsentGuess'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'isAbsent', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'isAbsent'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'isLoading', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'isLoading'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'isEmpty', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'isEmpty'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'isPresent', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'isPresent'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'isDestroyed', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'isDestroyed'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'isUndetermined', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'isUndetermined'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'showGitTabInit', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'showGitTabInit'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'showGitTabInitInProgress', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'showGitTabInitInProgress'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'showGitTabLoading', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'showGitTabLoading'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'showStatusBarTiles', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'showStatusBarTiles'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'hasDirectory', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'hasDirectory'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'init', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'init'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'clone', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'clone'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'destroy', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'destroy'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'refresh', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'refresh'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'observeFilesystemChange', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'observeFilesystemChange'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'stageFiles', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'stageFiles'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'unstageFiles', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'unstageFiles'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'stageFilesFromParentCommit', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'stageFilesFromParentCommit'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'applyPatchToIndex', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'applyPatchToIndex'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'applyPatchToWorkdir', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'applyPatchToWorkdir'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'commit', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'commit'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'merge', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'merge'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'abortMerge', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'abortMerge'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'checkoutSide', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'checkoutSide'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'mergeFile', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'mergeFile'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'writeMergeConflictToIndex', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'writeMergeConflictToIndex'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'checkout', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'checkout'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'checkoutPathsAtRevision', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'checkoutPathsAtRevision'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'fetch', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'fetch'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'pull', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'pull'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'push', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'push'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'setConfig', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'setConfig'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'unsetConfig', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'unsetConfig'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'createBlob', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'createBlob'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'expandBlobToFile', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'expandBlobToFile'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'createDiscardHistoryBlob', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'createDiscardHistoryBlob'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'updateDiscardHistory', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'updateDiscardHistory'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'storeBeforeAndAfterBlobs', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'storeBeforeAndAfterBlobs'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'restoreLastDiscardInTempFiles', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'restoreLastDiscardInTempFiles'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'popDiscardHistory', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'popDiscardHistory'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'clearDiscardHistory', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'clearDiscardHistory'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'discardWorkDirChangesForPaths', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'discardWorkDirChangesForPaths'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'getStatusBundle', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'getStatusBundle'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'getStatusesForChangedFiles', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'getStatusesForChangedFiles'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'getStagedChangesSinceParentCommit', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'getStagedChangesSinceParentCommit'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'getFilePatchForPath', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'getFilePatchForPath'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'readFileFromIndex', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'readFileFromIndex'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'getLastCommit', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'getLastCommit'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'getBranches', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'getBranches'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'getCurrentBranch', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'getCurrentBranch'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'isMerging', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'isMerging'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'isRebasing', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'isRebasing'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'getRemotes', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'getRemotes'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'getAheadCount', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'getAheadCount'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'getBehindCount', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'getBehindCount'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'getConfig', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'getConfig'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'getBlobContents', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'getBlobContents'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'hasDiscardHistory', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'hasDiscardHistory'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'getDiscardHistory', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'getDiscardHistory'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'getLastHistorySnapshots', [shouldDelegate], Object.getOwnPropertyDescriptor(_class.prototype, 'getLastHistorySnapshots'), _class.prototype)), _class);
exports.default = State;


function unsupportedOperationPromise(self, opName) {
  return Promise.reject(new Error(`${opName} is not available in ${self} state`));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,