'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _desc, _value, _class;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _state = require('./state');

var _state2 = _interopRequireDefault(_state);

var _helpers = require('../../helpers');

var _workspaceChangeObserver = require('../workspace-change-observer');

var _filePatch = require('../file-patch');

var _filePatch2 = _interopRequireDefault(_filePatch);

var _hunk = require('../hunk');

var _hunk2 = _interopRequireDefault(_hunk);

var _hunkLine = require('../hunk-line');

var _hunkLine2 = _interopRequireDefault(_hunkLine);

var _discardHistory = require('../discard-history');

var _discardHistory2 = _interopRequireDefault(_discardHistory);

var _branch = require('../branch');

var _branch2 = _interopRequireDefault(_branch);

var _remote = require('../remote');

var _remote2 = _interopRequireDefault(_remote);

var _commit = require('../commit');

var _commit2 = _interopRequireDefault(_commit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

/**
 * Decorator for an async method that invalidates the cache after execution (regardless of success or failure).
 * Optionally parameterized by a function that accepts the same arguments as the function that returns the list of cache
 * keys to invalidate.
 */
function invalidate(spec) {
  return function (target, name, descriptor) {
    const original = descriptor.value;
    descriptor.value = function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return original.apply(this, args).then(result => {
        this.acceptInvalidation(spec, args);
        return result;
      }, err => {
        this.acceptInvalidation(spec, args);
        return Promise.reject(err);
      });
    };
    return descriptor;
  };
}

/**
 * State used when the working directory contains a valid git repository and can be interacted with. Performs
 * actual git operations, caching the results, and broadcasts `onDidUpdate` events when write actions are
 * performed.
 */
let Present = (_dec = invalidate(paths => Keys.cacheOperationKeys(paths)), _dec2 = invalidate(paths => Keys.cacheOperationKeys(paths)), _dec3 = invalidate(paths => Keys.cacheOperationKeys(paths)), _dec4 = invalidate(filePatch => Keys.cacheOperationKeys([filePatch.getOldPath(), filePatch.getNewPath()])), _dec5 = invalidate(filePatch => Keys.workdirOperationKeys([filePatch.getOldPath(), filePatch.getNewPath()])), _dec6 = invalidate(() => [...Keys.headOperationKeys(), ...Keys.filePatch.eachWithOpts({ staged: true }), Keys.headDescription]), _dec7 = invalidate(() => [...Keys.headOperationKeys(), Keys.index.all, Keys.headDescription]), _dec8 = invalidate(() => [Keys.statusBundle, Keys.stagedChangesSinceParentCommit, Keys.filePatch.all, Keys.index.all]), _dec9 = invalidate(filePath => [Keys.statusBundle, Keys.stagedChangesSinceParentCommit, ...Keys.filePatch.eachWithFileOpts([filePath], [{ staged: false }, { staged: true }, { staged: true, amending: true }]), Keys.index.oneWith(filePath)]), _dec10 = invalidate(() => [Keys.stagedChangesSinceParentCommit, Keys.lastCommit, Keys.statusBundle, Keys.index.all, ...Keys.filePatch.eachWithOpts({ staged: true, amending: true }), Keys.headDescription]), _dec11 = invalidate(paths => [Keys.statusBundle, Keys.stagedChangesSinceParentCommit, ...paths.map(fileName => Keys.index.oneWith(fileName)), ...Keys.filePatch.eachWithFileOpts(paths, [{ staged: true }, { staged: true, amending: true }])]), _dec12 = invalidate(branchName => [Keys.statusBundle, Keys.headDescription]), _dec13 = invalidate(() => [...Keys.headOperationKeys(), Keys.index.all, Keys.headDescription]), _dec14 = invalidate(function (branchName) {
  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  const keys = [Keys.statusBundle, Keys.headDescription];

  if (options.setUpstream) {
    keys.push(...Keys.config.eachWithSetting(`branch.${branchName}.remote`));
  }

  return keys;
}), _dec15 = invalidate(setting => Keys.config.eachWithSetting(setting)), _dec16 = invalidate(setting => Keys.config.eachWithSetting(setting)), _dec17 = invalidate(paths => [Keys.statusBundle, ...paths.map(filePath => Keys.filePatch.oneWith(filePath, { staged: false }))]), (_class = class Present extends _state2.default {
  constructor(repository, history) {
    super(repository);

    this.cache = new Cache();

    this.discardHistory = new _discardHistory2.default(this.createBlob.bind(this), this.expandBlobToFile.bind(this), this.mergeFile.bind(this), this.workdir(), { maxHistoryLength: 60 });
  }

  isPresent() {
    return true;
  }

  showStatusBarTiles() {
    return true;
  }

  acceptInvalidation(spec, args) {
    const keys = spec(...args);
    this.cache.invalidate(keys);
    this.didUpdate();
  }

  observeFilesystemChange(paths) {
    const keys = new Set();
    for (let i = 0; i < paths.length; i++) {
      const fullPath = paths[i];

      if (fullPath === _workspaceChangeObserver.FOCUS) {
        keys.add(Keys.statusBundle);
        for (const k of Keys.filePatch.eachWithOpts({ staged: false })) {
          keys.add(k);
        }
        continue;
      }

      const endsWith = function () {
        return fullPath.endsWith(_path2.default.join(...arguments));
      };
      const includes = function () {
        return fullPath.includes(_path2.default.join(...arguments));
      };

      if (endsWith('.git', 'index')) {
        keys.add(Keys.stagedChangesSinceParentCommit);
        keys.add(Keys.filePatch.all);
        keys.add(Keys.index.all);
        keys.add(Keys.statusBundle);
        continue;
      }

      if (endsWith('.git', 'HEAD')) {
        keys.add(Keys.lastCommit);
        keys.add(Keys.statusBundle);
        keys.add(Keys.headDescription);
        continue;
      }

      if (includes('.git', 'refs', 'heads')) {
        keys.add(Keys.branches);
        keys.add(Keys.lastCommit);
        keys.add(Keys.headDescription);
        continue;
      }

      if (includes('.git', 'refs', 'remotes')) {
        keys.add(Keys.remotes);
        keys.add(Keys.statusBundle);
        keys.add(Keys.headDescription);
        continue;
      }

      if (endsWith('.git', 'config')) {
        keys.add(Keys.config.all);
        keys.add(Keys.statusBundle);
        continue;
      }

      // File change within the working directory
      const relativePath = _path2.default.relative(this.workdir(), fullPath);
      keys.add(Keys.filePatch.oneWith(relativePath, { staged: false }));
      keys.add(Keys.statusBundle);
    }

    if (keys.size > 0) {
      this.cache.invalidate(Array.from(keys));
      this.didUpdate();
    }
  }

  refresh() {
    this.cache.clear();
    this.didUpdate();
  }

  init() {
    return super.init().catch(e => {
      e.stdErr = 'This directory already contains a git repository';
      return Promise.reject(e);
    });
  }

  clone() {
    return super.clone().catch(e => {
      e.stdErr = 'This directory already contains a git repository';
      return Promise.reject(e);
    });
  }

  // Git operations ////////////////////////////////////////////////////////////////////////////////////////////////////

  // Staging and unstaging

  stageFiles(paths) {
    return this.git().stageFiles(paths);
  }

  unstageFiles(paths) {
    return this.git().unstageFiles(paths);
  }

  stageFilesFromParentCommit(paths) {
    return this.git().unstageFiles(paths, 'HEAD~');
  }

  applyPatchToIndex(filePatch) {
    const patchStr = filePatch.getHeaderString() + filePatch.toString();
    return this.git().applyPatch(patchStr, { index: true });
  }

  applyPatchToWorkdir(filePatch) {
    const patchStr = filePatch.getHeaderString() + filePatch.toString();
    return this.git().applyPatch(patchStr);
  }

  // Committing

  commit(message, options) {
    return this.git().commit(formatCommitMessage(message), options);
  }

  // Merging

  merge(branchName) {
    return this.git().merge(branchName);
  }

  abortMerge() {
    return this.git().abortMerge();
  }

  checkoutSide(side, paths) {
    return this.git().checkoutSide(side, paths);
  }

  mergeFile(oursPath, commonBasePath, theirsPath, resultPath) {
    return this.git().mergeFile(oursPath, commonBasePath, theirsPath, resultPath);
  }

  writeMergeConflictToIndex(filePath, commonBaseSha, oursSha, theirsSha) {
    return this.git().writeMergeConflictToIndex(filePath, commonBaseSha, oursSha, theirsSha);
  }

  // Checkout

  checkout(revision) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return this.git().checkout(revision, options);
  }

  checkoutPathsAtRevision(paths) {
    let revision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'HEAD';

    return this.git().checkoutFiles(paths, revision);
  }

  // Remote interactions

  fetch(branchName) {
    var _this = this;

    return _asyncToGenerator(function* () {
      const remote = yield _this.getRemoteForBranch(branchName);
      if (!remote.isPresent()) {
        return;
      }
      yield _this.git().fetch(remote.getName(), branchName);
    })();
  }

  pull(branchName) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      const remote = yield _this2.getRemoteForBranch(branchName);
      if (!remote.isPresent()) {
        return;
      }
      yield _this2.git().pull(remote.getName(), branchName);
    })();
  }

  push(branchName, options) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      const remote = yield _this3.getRemoteForBranch(branchName);
      return _this3.git().push(remote.getNameOr('origin'), branchName, options);
    })();
  }

  // Configuration

  setConfig(setting, value, options) {
    return this.git().setConfig(setting, value, options);
  }

  unsetConfig(setting) {
    return this.git().unsetConfig(setting);
  }

  // Direct blob interactions

  createBlob(options) {
    return this.git().createBlob(options);
  }

  expandBlobToFile(absFilePath, sha) {
    return this.git().expandBlobToFile(absFilePath, sha);
  }

  // Discard history

  createDiscardHistoryBlob() {
    return this.discardHistory.createHistoryBlob();
  }

  updateDiscardHistory() {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      const history = yield _this4.loadHistoryPayload();
      _this4.discardHistory.updateHistory(history);
    })();
  }

  storeBeforeAndAfterBlobs(filePaths, isSafe, destructiveAction) {
    var _this5 = this;

    let partialDiscardFilePath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    return _asyncToGenerator(function* () {
      const snapshots = yield _this5.discardHistory.storeBeforeAndAfterBlobs(filePaths, isSafe, destructiveAction, partialDiscardFilePath);
      if (snapshots) {
        yield _this5.saveDiscardHistory();
      }
      return snapshots;
    })();
  }

  restoreLastDiscardInTempFiles(isSafe) {
    let partialDiscardFilePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    return this.discardHistory.restoreLastDiscardInTempFiles(isSafe, partialDiscardFilePath);
  }

  popDiscardHistory() {
    var _this6 = this;

    let partialDiscardFilePath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    return _asyncToGenerator(function* () {
      const removed = yield _this6.discardHistory.popHistory(partialDiscardFilePath);
      if (removed) {
        yield _this6.saveDiscardHistory();
      }
    })();
  }

  clearDiscardHistory() {
    let partialDiscardFilePath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    this.discardHistory.clearHistory(partialDiscardFilePath);
    return this.saveDiscardHistory();
  }

  discardWorkDirChangesForPaths(paths) {
    var _this7 = this;

    return _asyncToGenerator(function* () {
      const untrackedFiles = yield _this7.git().getUntrackedFiles();

      var _partition = partition(paths, function (f) {
        return untrackedFiles.includes(f);
      }),
          _partition2 = _slicedToArray(_partition, 2);

      const filesToRemove = _partition2[0],
            filesToCheckout = _partition2[1];

      yield _this7.git().checkoutFiles(filesToCheckout);
      yield Promise.all(filesToRemove.map(function (filePath) {
        const absPath = _path2.default.join(_this7.workdir(), filePath);
        return (0, _helpers.deleteFileOrFolder)(absPath);
      }));
    })();
  }

  // Accessors /////////////////////////////////////////////////////////////////////////////////////////////////////////

  // Index queries

  getStatusBundle() {
    var _this8 = this;

    return this.cache.getOrSet(Keys.statusBundle, _asyncToGenerator(function* () {
      const bundle = yield _this8.git().getStatusBundle();
      const results = yield _this8.formatChangedFiles(bundle);
      results.branch = bundle.branch;
      if (!results.branch.aheadBehind) {
        results.branch.aheadBehind = { ahead: null, behind: null };
      }
      return results;
    }));
  }

  formatChangedFiles(_ref2) {
    var _this9 = this;

    let changedEntries = _ref2.changedEntries,
        untrackedEntries = _ref2.untrackedEntries,
        renamedEntries = _ref2.renamedEntries,
        unmergedEntries = _ref2.unmergedEntries;
    return _asyncToGenerator(function* () {
      const statusMap = {
        A: 'added',
        M: 'modified',
        D: 'deleted',
        U: 'modified'
      };

      const stagedFiles = {};
      const unstagedFiles = {};
      const mergeConflictFiles = {};

      changedEntries.forEach(function (entry) {
        if (entry.stagedStatus) {
          stagedFiles[entry.filePath] = statusMap[entry.stagedStatus];
        }
        if (entry.unstagedStatus) {
          unstagedFiles[entry.filePath] = statusMap[entry.unstagedStatus];
        }
      });

      untrackedEntries.forEach(function (entry) {
        unstagedFiles[entry.filePath] = statusMap.A;
      });

      renamedEntries.forEach(function (entry) {
        if (entry.stagedStatus === 'R') {
          stagedFiles[entry.filePath] = statusMap.A;
          stagedFiles[entry.origFilePath] = statusMap.D;
        }
        if (entry.unstagedStatus === 'R') {
          unstagedFiles[entry.filePath] = statusMap.A;
          unstagedFiles[entry.origFilePath] = statusMap.D;
        }
        if (entry.stagedStatus === 'C') {
          stagedFiles[entry.filePath] = statusMap.A;
        }
        if (entry.unstagedStatus === 'C') {
          unstagedFiles[entry.filePath] = statusMap.A;
        }
      });

      let statusToHead;

      for (let i = 0; i < unmergedEntries.length; i++) {
        var _unmergedEntries$i = unmergedEntries[i];
        const stagedStatus = _unmergedEntries$i.stagedStatus,
              unstagedStatus = _unmergedEntries$i.unstagedStatus,
              filePath = _unmergedEntries$i.filePath;

        if (stagedStatus === 'U' || unstagedStatus === 'U' || stagedStatus === 'A' && unstagedStatus === 'A') {
          // Skipping this check here because we only run a single `await`
          // and we only run it in the main, synchronous body of the for loop.
          // eslint-disable-next-line no-await-in-loop
          if (!statusToHead) {
            statusToHead = yield _this9.git().diffFileStatus({ target: 'HEAD' });
          }
          mergeConflictFiles[filePath] = {
            ours: statusMap[stagedStatus],
            theirs: statusMap[unstagedStatus],
            file: statusToHead[filePath] || 'equivalent'
          };
        }
      }

      return { stagedFiles, unstagedFiles, mergeConflictFiles };
    })();
  }

  getStatusesForChangedFiles() {
    var _this10 = this;

    return _asyncToGenerator(function* () {
      var _ref3 = yield _this10.getStatusBundle();

      const stagedFiles = _ref3.stagedFiles,
            unstagedFiles = _ref3.unstagedFiles,
            mergeConflictFiles = _ref3.mergeConflictFiles;

      return { stagedFiles, unstagedFiles, mergeConflictFiles };
    })();
  }

  getStagedChangesSinceParentCommit() {
    var _this11 = this;

    return this.cache.getOrSet(Keys.stagedChangesSinceParentCommit, _asyncToGenerator(function* () {
      try {
        const stagedFiles = yield _this11.git().diffFileStatus({ staged: true, target: 'HEAD~' });
        return Object.keys(stagedFiles).map(function (filePath) {
          return { filePath, status: stagedFiles[filePath] };
        });
      } catch (e) {
        if (e.message.includes('ambiguous argument \'HEAD~\'')) {
          return [];
        } else {
          throw e;
        }
      }
    }));
  }

  getFilePatchForPath(filePath) {
    var _this12 = this;

    var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { staged: false, amending: false };

    let staged = _ref5.staged,
        amending = _ref5.amending;

    return this.cache.getOrSet(Keys.filePatch.oneWith(filePath, { staged, amending }), _asyncToGenerator(function* () {
      const options = { staged, amending };
      if (amending) {
        options.baseCommit = 'HEAD~';
      }

      const rawDiff = yield _this12.git().getDiffForFilePath(filePath, options);
      if (rawDiff) {
        var _buildFilePatchesFrom = buildFilePatchesFromRawDiffs([rawDiff]),
            _buildFilePatchesFrom2 = _slicedToArray(_buildFilePatchesFrom, 1);

        const filePatch = _buildFilePatchesFrom2[0];

        return filePatch;
      } else {
        return null;
      }
    }));
  }

  readFileFromIndex(filePath) {
    return this.cache.getOrSet(Keys.index.oneWith(filePath), () => {
      return this.git().readFileFromIndex(filePath);
    });
  }

  // Commit access

  getLastCommit() {
    var _this13 = this;

    return this.cache.getOrSet(Keys.lastCommit, _asyncToGenerator(function* () {
      var _ref8 = yield _this13.git().getHeadCommit();

      const sha = _ref8.sha,
            message = _ref8.message,
            unbornRef = _ref8.unbornRef;

      return unbornRef ? _commit2.default.createUnborn() : new _commit2.default(sha, message);
    }));
  }

  // Branches

  getBranches() {
    var _this14 = this;

    return this.cache.getOrSet(Keys.branches, _asyncToGenerator(function* () {
      const branchNames = yield _this14.git().getBranches();
      return branchNames.map(function (branchName) {
        return new _branch2.default(branchName);
      });
    }));
  }

  getCurrentBranch() {
    var _this15 = this;

    return _asyncToGenerator(function* () {
      var _ref10 = yield _this15.getStatusBundle();

      const branch = _ref10.branch;

      if (branch.head === '(detached)') {
        const description = yield _this15.getHeadDescription();
        return _branch2.default.createDetached(description);
      } else {
        return new _branch2.default(branch.head);
      }
    })();
  }

  getHeadDescription() {
    return this.cache.getOrSet(Keys.headDescription, () => {
      return this.git().describeHead();
    });
  }

  // Merging and rebasing status

  isMerging() {
    return this.git().isMerging(this.repository.getGitDirectoryPath());
  }

  isRebasing() {
    return this.git().isRebasing(this.repository.getGitDirectoryPath());
  }

  // Remotes

  getRemotes() {
    var _this16 = this;

    return this.cache.getOrSet(Keys.remotes, _asyncToGenerator(function* () {
      const remotesInfo = yield _this16.git().getRemotes();
      return remotesInfo.map(function (_ref12) {
        let name = _ref12.name,
            url = _ref12.url;
        return new _remote2.default(name, url);
      });
    }));
  }

  getAheadCount(branchName) {
    var _this17 = this;

    return _asyncToGenerator(function* () {
      const bundle = yield _this17.getStatusBundle();
      return bundle.branch.aheadBehind.ahead;
    })();
  }

  getBehindCount(branchName) {
    var _this18 = this;

    return _asyncToGenerator(function* () {
      const bundle = yield _this18.getStatusBundle();
      return bundle.branch.aheadBehind.behind;
    })();
  }

  getConfig(option) {
    var _ref13 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { local: false };

    let local = _ref13.local;

    return this.cache.getOrSet(Keys.config.oneWith(option, { local }), () => {
      return this.git().getConfig(option, { local });
    });
  }

  // Direct blob access

  getBlobContents(sha) {
    return this.cache.getOrSet(Keys.blob(sha), () => {
      return this.git().getBlobContents(sha);
    });
  }

  // Discard history

  hasDiscardHistory() {
    let partialDiscardFilePath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    return this.discardHistory.hasHistory(partialDiscardFilePath);
  }

  getDiscardHistory() {
    let partialDiscardFilePath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    return this.discardHistory.getHistory(partialDiscardFilePath);
  }

  getLastHistorySnapshots() {
    let partialDiscardFilePath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    return this.discardHistory.getLastSnapshots(partialDiscardFilePath);
  }
}, (_applyDecoratedDescriptor(_class.prototype, 'stageFiles', [_dec], Object.getOwnPropertyDescriptor(_class.prototype, 'stageFiles'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'unstageFiles', [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, 'unstageFiles'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'stageFilesFromParentCommit', [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, 'stageFilesFromParentCommit'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'applyPatchToIndex', [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, 'applyPatchToIndex'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'applyPatchToWorkdir', [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, 'applyPatchToWorkdir'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'commit', [_dec6], Object.getOwnPropertyDescriptor(_class.prototype, 'commit'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'merge', [_dec7], Object.getOwnPropertyDescriptor(_class.prototype, 'merge'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'abortMerge', [_dec8], Object.getOwnPropertyDescriptor(_class.prototype, 'abortMerge'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'writeMergeConflictToIndex', [_dec9], Object.getOwnPropertyDescriptor(_class.prototype, 'writeMergeConflictToIndex'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'checkout', [_dec10], Object.getOwnPropertyDescriptor(_class.prototype, 'checkout'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'checkoutPathsAtRevision', [_dec11], Object.getOwnPropertyDescriptor(_class.prototype, 'checkoutPathsAtRevision'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'fetch', [_dec12], Object.getOwnPropertyDescriptor(_class.prototype, 'fetch'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'pull', [_dec13], Object.getOwnPropertyDescriptor(_class.prototype, 'pull'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'push', [_dec14], Object.getOwnPropertyDescriptor(_class.prototype, 'push'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'setConfig', [_dec15], Object.getOwnPropertyDescriptor(_class.prototype, 'setConfig'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'unsetConfig', [_dec16], Object.getOwnPropertyDescriptor(_class.prototype, 'unsetConfig'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'discardWorkDirChangesForPaths', [_dec17], Object.getOwnPropertyDescriptor(_class.prototype, 'discardWorkDirChangesForPaths'), _class.prototype)), _class));
exports.default = Present;


_state2.default.register(Present);

function partition(array, predicate) {
  const matches = [];
  const nonmatches = [];
  array.forEach(item => {
    if (predicate(item)) {
      matches.push(item);
    } else {
      nonmatches.push(item);
    }
  });
  return [matches, nonmatches];
}

function formatCommitMessage(message) {
  // strip out comments
  const messageWithoutComments = message.replace(/^#.*$/mg, '').trim();

  // hard wrap message (except for first line) at 72 characters
  let results = [];
  messageWithoutComments.split('\n').forEach((line, index) => {
    if (line.length <= 72 || index === 0) {
      results.push(line);
    } else {
      const matches = line.match(/.{1,72}(\s|$)|\S+?(\s|$)/g).map(match => {
        return match.endsWith('\n') ? match.substr(0, match.length - 1) : match;
      });
      results = results.concat(matches);
    }
  });

  return results.join('\n');
}

function buildFilePatchesFromRawDiffs(rawDiffs) {
  let diffLineNumber = 0;
  return rawDiffs.map(patch => {
    const hunks = patch.hunks.map(hunk => {
      let oldLineNumber = hunk.oldStartLine;
      let newLineNumber = hunk.newStartLine;
      const hunkLines = hunk.lines.map(line => {
        const status = _hunkLine2.default.statusMap[line[0]];
        const text = line.slice(1);
        let hunkLine;
        if (status === 'unchanged') {
          hunkLine = new _hunkLine2.default(text, status, oldLineNumber, newLineNumber, diffLineNumber++);
          oldLineNumber++;
          newLineNumber++;
        } else if (status === 'added') {
          hunkLine = new _hunkLine2.default(text, status, -1, newLineNumber, diffLineNumber++);
          newLineNumber++;
        } else if (status === 'deleted') {
          hunkLine = new _hunkLine2.default(text, status, oldLineNumber, -1, diffLineNumber++);
          oldLineNumber++;
        } else if (status === 'nonewline') {
          hunkLine = new _hunkLine2.default(text.substr(1), status, -1, -1, diffLineNumber++);
        } else {
          throw new Error(`unknow status type: ${status}`);
        }
        return hunkLine;
      });
      return new _hunk2.default(hunk.oldStartLine, hunk.newStartLine, hunk.oldLineCount, hunk.newLineCount, hunk.heading, hunkLines);
    });
    return new _filePatch2.default(patch.oldPath, patch.newPath, patch.status, hunks);
  });
}

let Cache = class Cache {
  constructor() {
    this.storage = new Map();
    this.byGroup = new Map();
  }

  getOrSet(key, operation) {
    const primary = key.getPrimary();
    const existing = this.storage.get(primary);
    if (existing !== undefined) {
      return existing;
    }

    const created = operation();

    this.storage.set(primary, created);

    const groups = key.getGroups();
    for (let i = 0; i < groups.length; i++) {
      const group = groups[i];
      let groupSet = this.byGroup.get(group);
      if (groupSet === undefined) {
        groupSet = new Set();
        this.byGroup.set(group, groupSet);
      }
      groupSet.add(key);
    }

    return created;
  }

  invalidate(keys) {
    for (let i = 0; i < keys.length; i++) {
      keys[i].removeFromCache(this);
    }
  }

  keysInGroup(group) {
    return this.byGroup.get(group) || [];
  }

  removePrimary(primary) {
    this.storage.delete(primary);
  }

  removeFromGroup(group, key) {
    const groupSet = this.byGroup.get(group);
    groupSet && groupSet.delete(key);
  }

  clear() {
    this.storage.clear();
    this.byGroup.clear();
  }
};
let CacheKey = class CacheKey {
  constructor(primary) {
    let groups = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    this.primary = primary;
    this.groups = groups;
  }

  getPrimary() {
    return this.primary;
  }

  getGroups() {
    return this.groups;
  }

  removeFromCache(cache) {
    let withoutGroup = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    cache.removePrimary(this.getPrimary());

    const groups = this.getGroups();
    for (let i = 0; i < groups.length; i++) {
      const group = groups[i];
      if (group === withoutGroup) {
        continue;
      }

      cache.removeFromGroup(group, this);
    }
  }
};
let GroupKey = class GroupKey {
  constructor(group) {
    this.group = group;
  }

  removeFromCache(cache) {
    for (const matchingKey of cache.keysInGroup(this.group)) {
      matchingKey.removeFromCache(cache, this.group);
    }
  }
};


const Keys = {
  statusBundle: new CacheKey('status-bundle'),

  stagedChangesSinceParentCommit: new CacheKey('staged-changes-since-parent-commit'),

  filePatch: {
    _optKey: (_ref14) => {
      let staged = _ref14.staged,
          amending = _ref14.amending;

      if (staged && amending) {
        return 'a';
      } else if (staged) {
        return 's';
      } else {
        return 'u';
      }
    },

    oneWith: (fileName, options) => {
      // <-- Keys.filePatch
      const optKey = Keys.filePatch._optKey(options);
      return new CacheKey(`file-patch:${optKey}:${fileName}`, ['file-patch', `file-patch:${optKey}`]);
    },

    eachWithFileOpts: (fileNames, opts) => {
      const keys = [];
      for (let i = 0; i < fileNames.length; i++) {
        for (let j = 0; j < opts.length; j++) {
          keys.push(Keys.filePatch.oneWith(fileNames[i], opts[j]));
        }
      }
      return keys;
    },

    eachWithOpts: function () {
      for (var _len2 = arguments.length, opts = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        opts[_key2] = arguments[_key2];
      }

      return opts.map(opt => new GroupKey(`file-patch:${Keys.filePatch._optKey(opt)}`));
    },

    all: new GroupKey('file-patch')
  },

  index: {
    oneWith: fileName => new CacheKey(`index:${fileName}`, ['index']),

    all: new GroupKey('index')
  },

  lastCommit: new CacheKey('last-commit'),

  branches: new CacheKey('branches'),

  headDescription: new CacheKey('head-description'),

  remotes: new CacheKey('remotes'),

  config: {
    _optKey: options => options.local ? 'l' : '',

    oneWith: (setting, options) => {
      const optKey = Keys.config._optKey(options);
      return new CacheKey(`config:${optKey}:${setting}`, ['config', `config:${optKey}`]);
    },

    eachWithSetting: setting => [Keys.config.oneWith(setting, { local: true }), Keys.config.oneWith(setting, { local: false })],

    all: new GroupKey('config')
  },

  blob: {
    oneWith: sha => `blob:${sha}`
  },

  // Common collections of keys and patterns for use with @invalidate().

  workdirOperationKeys: fileNames => [Keys.statusBundle, ...Keys.filePatch.eachWithFileOpts(fileNames, [{ staged: false }])],

  cacheOperationKeys: fileNames => [...Keys.workdirOperationKeys(fileNames), ...Keys.filePatch.eachWithFileOpts(fileNames, [{ staged: true }, { staged: true, amending: true }]), ...fileNames.map(Keys.index.oneWith), Keys.stagedChangesSinceParentCommit],

  headOperationKeys: () => [...Keys.filePatch.eachWithOpts({ staged: true, amending: true }), Keys.stagedChangesSinceParentCommit, Keys.lastCommit, Keys.statusBundle]
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,