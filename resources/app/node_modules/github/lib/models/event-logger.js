'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _nsfw = require('nsfw');

var _nsfw2 = _interopRequireDefault(_nsfw);

var _electron = require('electron');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const actionText = new Map();
actionText.set(_nsfw2.default.actions.CREATED, 'created');
actionText.set(_nsfw2.default.actions.DELETED, 'deleted');
actionText.set(_nsfw2.default.actions.MODIFIED, 'modified');
actionText.set(_nsfw2.default.actions.RENAMED, 'renamed');

let headless = null;

let EventLogger = class EventLogger {
  constructor(kind) {
    this.kind = kind;
    this.directory = '<unknown>';
    this.shortDirectory = '<unknown>';

    if (headless === null) {
      headless = !_electron.remote.getCurrentWindow().isVisible();
    }
  }

  showStarted(directory) {
    this.directory = directory;
    this.shortDirectory = _path2.default.basename(directory);

    if (!this.isEnabled()) {
      return;
    }

    this.shortLog('watcher started');
  }

  showEvents(events) {
    if (!this.isEnabled()) {
      return;
    }

    const uniqueRelativeNames = new Set(events.map(event => {
      const fullPath = _path2.default.join(event.directory, event.file || event.newFile);
      return _path2.default.relative(this.directory, fullPath);
    }));

    const fileNames = Array.from(uniqueRelativeNames).slice(0, 3);
    const elipses = uniqueRelativeNames.size > 3 ? '...' : '';
    const summary = `${this.getShortName()}: ${fileNames.join(', ')}${elipses}`;

    /* eslint-disable no-console */
    if (headless) {
      const eventText = events.map(event => {
        const file = event.file ? event.file : `${event.oldFile} => ${event.newFile}`;
        const action = actionText.get(event.action) || `unknown: ${event.action}`;
        return `  ${event.directory} => ${file} (${action})\n`;
      }).join('\n');
      console.log(summary + '\n' + eventText);
    } else {
      console.groupCollapsed(summary);
      console.table(events.map(event => ({
        directory: event.directory,
        file: event.file,
        newFile: event.newFile,
        action: actionText.get(event.action) || `(unknown: ${event.action})`
      })), ['directory', 'action', 'file', 'newFile']);
      console.groupEnd();
    }
    /* eslint-enable no-console */
  }

  showFocusEvent() {
    if (!this.isEnabled()) {
      return;
    }

    this.shortLog('focus triggered');
  }

  showWorkdirOrHeadEvents() {
    if (!this.isEnabled()) {
      return;
    }

    this.shortLog('working directory or HEAD change');
  }

  showStopped() {
    if (!this.isEnabled()) {
      return;
    }

    this.shortLog('stopped');
  }

  isEnabled() {
    return process.env.ATOM_GITHUB_FS_EVENT_LOG || atom.config.get('github.filesystemEventDiagnostics');
  }

  getShortName() {
    return `${this.kind} @ ${this.shortDirectory}`;
  }

  shortLog(line) {
    if (headless) {
      // eslint-disable-next-line no-console
      console.log(`${this.getShortName()}: ${line}`);
      return;
    }

    // eslint-disable-next-line no-console
    console.log('%c%s%c: %s', 'font-weight: bold; color: blue;', this.getShortName(), 'font-weight: normal; color: black;', line);
  }
};
exports.default = EventLogger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,