'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.CommitError = exports.AbortMergeError = undefined;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _eventKit = require('event-kit');

var _compositeGitStrategy = require('../composite-git-strategy');

var _compositeGitStrategy2 = _interopRequireDefault(_compositeGitStrategy);

var _helpers = require('../helpers');

var _remote = require('./remote');

var _remote2 = _interopRequireDefault(_remote);

var _repositoryStates = require('./repository-states');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const MERGE_MARKER_REGEX = /^(>|<){7} \S+$/m;

// Internal option keys used to designate the desired initial state of a Repository.
const initialStateSym = Symbol('initialState');

let AbortMergeError = exports.AbortMergeError = class AbortMergeError extends Error {
  constructor(code, filePath) {
    super();
    this.message = `${code}: ${filePath}.`;
    this.code = code;
    this.path = filePath;
    this.stack = new Error().stack;
  }
};
let CommitError = exports.CommitError = class CommitError extends Error {
  constructor(code) {
    super();
    this.message = `Commit error: ${code}.`;
    this.code = code;
    this.stack = new Error().stack;
  }
};
let Repository = class Repository {
  constructor(workingDirectoryPath) {
    let gitStrategy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    this.workingDirectoryPath = workingDirectoryPath;
    this.git = gitStrategy || _compositeGitStrategy2.default.create(workingDirectoryPath);

    this.emitter = new _eventKit.Emitter();

    this.loadPromise = new Promise(resolve => {
      const sub = this.onDidChangeState(() => {
        if (!this.isLoading()) {
          resolve();
          sub.dispose();
        } else if (this.isDestroyed()) {
          sub.dispose();
        }
      });
    });

    this.transitionTo(options[initialStateSym] || _repositoryStates.Loading);
  }

  static absent() {
    return new Repository(null, null, { [initialStateSym]: _repositoryStates.Absent });
  }

  static loadingGuess() {
    return new Repository(null, null, { [initialStateSym]: _repositoryStates.LoadingGuess });
  }

  static absentGuess() {
    return new Repository(null, null, { [initialStateSym]: _repositoryStates.AbsentGuess });
  }

  // State management //////////////////////////////////////////////////////////////////////////////////////////////////

  transition(currentState, StateConstructor) {
    if (currentState !== this.state) {
      // Attempted transition from a non-active state, most likely from an asynchronous start() method.
      return Promise.resolve();
    }

    for (var _len = arguments.length, payload = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      payload[_key - 2] = arguments[_key];
    }

    const nextState = new StateConstructor(this, ...payload);
    this.state = nextState;

    this.emitter.emit('did-change-state', { from: currentState, to: this.state });
    if (!this.isDestroyed()) {
      this.emitter.emit('did-update');
    }

    return this.state.start();
  }

  transitionTo(StateConstructor) {
    for (var _len2 = arguments.length, payload = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      payload[_key2 - 1] = arguments[_key2];
    }

    return this.transition(this.state, StateConstructor, ...payload);
  }

  getLoadPromise() {
    return this.isAbsent() ? Promise.reject(new Error('An absent repository will never load')) : this.loadPromise;
  }

  /*
   * Use `callback` to request user input from all git strategies.
   */
  setPromptCallback(callback) {
    this.git.getImplementers().forEach(strategy => strategy.setPromptCallback(callback));
  }

  // Event subscription ////////////////////////////////////////////////////////////////////////////////////////////////

  onDidDestroy(callback) {
    return this.emitter.on('did-destroy', callback);
  }

  onDidChangeState(callback) {
    return this.emitter.on('did-change-state', callback);
  }

  onDidUpdate(callback) {
    return this.emitter.on('did-update', callback);
  }

  // State-independent actions /////////////////////////////////////////////////////////////////////////////////////////
  // Actions that use direct filesystem access or otherwise don't need `this.git` to be available.

  pathHasMergeMarkers(relativePath) {
    var _this = this;

    return _asyncToGenerator(function* () {
      try {
        const contents = yield (0, _helpers.readFile)(_path2.default.join(_this.getWorkingDirectoryPath(), relativePath), 'utf8');
        return MERGE_MARKER_REGEX.test(contents);
      } catch (e) {
        // EISDIR implies this is a submodule
        if (e.code === 'ENOENT' || e.code === 'EISDIR') {
          return false;
        } else {
          throw e;
        }
      }
    })();
  }

  getMergeMessage() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      try {
        const contents = yield (0, _helpers.readFile)(_path2.default.join(_this2.getGitDirectoryPath(), 'MERGE_MSG'), 'utf8');
        return contents;
      } catch (e) {
        return null;
      }
    })();
  }

  // State-independent accessors ///////////////////////////////////////////////////////////////////////////////////////

  getWorkingDirectoryPath() {
    return this.workingDirectoryPath;
  }

  setGitDirectoryPath(gitDirectoryPath) {
    this._gitDirectoryPath = gitDirectoryPath;
  }

  getGitDirectoryPath() {
    if (this._gitDirectoryPath) {
      return this._gitDirectoryPath;
    } else {
      return _path2.default.join(this.getWorkingDirectoryPath(), '.git');
    }
  }

  isInState(stateName) {
    return this.state.constructor.name === stateName;
  }

  toString() {
    return `Repository(state=${this.state.constructor.name}, workdir="${this.getWorkingDirectoryPath()}")`;
  }

  // Compound Getters //////////////////////////////////////////////////////////////////////////////////////////////////
  // Accessor methods for data derived from other, state-provided getters.

  getUnstagedChanges() {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      var _ref = yield _this3.getStatusBundle();

      const unstagedFiles = _ref.unstagedFiles;

      return Object.keys(unstagedFiles).map(function (filePath) {
        return { filePath, status: unstagedFiles[filePath] };
      });
    })();
  }

  getStagedChanges() {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      var _ref2 = yield _this4.getStatusBundle();

      const stagedFiles = _ref2.stagedFiles;

      return Object.keys(stagedFiles).map(function (filePath) {
        return { filePath, status: stagedFiles[filePath] };
      });
    })();
  }

  getMergeConflicts() {
    var _this5 = this;

    return _asyncToGenerator(function* () {
      var _ref3 = yield _this5.getStatusBundle();

      const mergeConflictFiles = _ref3.mergeConflictFiles;

      return Object.keys(mergeConflictFiles).map(function (filePath) {
        return { filePath, status: mergeConflictFiles[filePath] };
      });
    })();
  }

  isPartiallyStaged(fileName) {
    var _this6 = this;

    return _asyncToGenerator(function* () {
      var _ref4 = yield _this6.getStatusBundle();

      const unstagedFiles = _ref4.unstagedFiles,
            stagedFiles = _ref4.stagedFiles;

      const u = unstagedFiles[fileName];
      const s = stagedFiles[fileName];
      return u === 'modified' && s === 'modified' || u === 'modified' && s === 'added' || u === 'added' && s === 'deleted' || u === 'deleted' && s === 'modified';
    })();
  }

  getRemoteForBranch(branchName) {
    var _this7 = this;

    return _asyncToGenerator(function* () {
      const name = yield _this7.getConfig(`branch.${branchName}.remote`);
      if (name === null) {
        return _remote.nullRemote;
      } else {
        return new _remote2.default(name);
      }
    })();
  }

  saveDiscardHistory() {
    var _this8 = this;

    return _asyncToGenerator(function* () {
      if (_this8.isDestroyed()) {
        return;
      }

      const historySha = yield _this8.createDiscardHistoryBlob();
      if (_this8.isDestroyed()) {
        return;
      }
      yield _this8.setConfig('atomGithub.historySha', historySha);
    })();
  }
};

// The methods named here will be delegated to the current State.
//
// This list should match the methods decorated with @shouldDelegate in `lib/models/repository-states/state.js`. A test
// case in `test/models/repository.test.js` ensures that these sets match.
//
// Duplicated here rather than just using `expectedDelegates` directly so that this file is grep-friendly for answering
// the question of "what all can a Repository do exactly".

exports.default = Repository;
const delegates = ['isLoadingGuess', 'isAbsentGuess', 'isAbsent', 'isLoading', 'isEmpty', 'isPresent', 'isDestroyed', 'isUndetermined', 'showGitTabInit', 'showGitTabInitInProgress', 'showGitTabLoading', 'showStatusBarTiles', 'hasDirectory', 'init', 'clone', 'destroy', 'refresh', 'observeFilesystemChange', 'stageFiles', 'unstageFiles', 'stageFilesFromParentCommit', 'applyPatchToIndex', 'applyPatchToWorkdir', 'commit', 'merge', 'abortMerge', 'checkoutSide', 'mergeFile', 'writeMergeConflictToIndex', 'checkout', 'checkoutPathsAtRevision', 'fetch', 'pull', 'push', 'setConfig', 'createBlob', 'expandBlobToFile', 'createDiscardHistoryBlob', 'updateDiscardHistory', 'storeBeforeAndAfterBlobs', 'restoreLastDiscardInTempFiles', 'popDiscardHistory', 'clearDiscardHistory', 'discardWorkDirChangesForPaths', 'getStatusBundle', 'getStatusesForChangedFiles', 'getStagedChangesSinceParentCommit', 'getFilePatchForPath', 'readFileFromIndex', 'getLastCommit', 'getBranches', 'getCurrentBranch', 'isMerging', 'isRebasing', 'getRemotes', 'getAheadCount', 'getBehindCount', 'getConfig', 'unsetConfig', 'getBlobContents', 'hasDiscardHistory', 'getDiscardHistory', 'getLastHistorySnapshots'];

for (let i = 0; i < delegates.length; i++) {
  const delegate = delegates[i];

  Repository.prototype[delegate] = function () {
    return this.state[delegate](...arguments);
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,