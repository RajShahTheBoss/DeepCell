'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _desc, _value, _class;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _eventKit = require('event-kit');

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _coreDecorators = require('core-decorators');

var _issueishPaneItemController = require('../controllers/issueish-pane-item-controller');

var _issueishPaneItemController2 = _interopRequireDefault(_issueishPaneItemController);

var _githubLoginModel = require('../models/github-login-model');

var _githubLoginModel2 = _interopRequireDefault(_githubLoginModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

function getPropsFromUri(uri) {
  // atom-github://issueish/https://github-host.tld/owner/repo/issueishNumber
  var _url$parse = _url2.default.parse(uri);

  const protocol = _url$parse.protocol,
        hostname = _url$parse.hostname,
        pathname = _url$parse.pathname;

  if (protocol === 'atom-github:' && hostname === 'issueish') {
    var _pathname$split$filte = pathname.split('/').filter(s => s),
        _pathname$split$filte2 = _slicedToArray(_pathname$split$filte, 5);

    const scheme = _pathname$split$filte2[0],
          host = _pathname$split$filte2[1],
          owner = _pathname$split$filte2[2],
          repo = _pathname$split$filte2[3],
          issueishNum = _pathname$split$filte2[4];

    if (!scheme || !host || !owner || !repo || !issueishNum) {
      return null;
    }
    const issueishNumber = parseInt(issueishNum, 10);
    if (isNaN(issueishNumber)) {
      return null;
    }
    return { owner, repo, issueishNumber, host: `${scheme}//${host}` };
  }
  return null;
}

let IssueishPaneItem = (_class = class IssueishPaneItem {
  static opener(uri) {
    const props = getPropsFromUri(uri);
    if (props) {
      return IssueishPaneItem.create(props, uri);
    } else {
      return null;
    }
  }

  static create(_ref, uri) {
    let owner = _ref.owner,
        repo = _ref.repo,
        issueishNumber = _ref.issueishNumber,
        host = _ref.host;

    return new IssueishPaneItem({ owner, repo, issueishNumber, host }, uri);
  }

  constructor(_ref2, uri) {
    let owner = _ref2.owner,
        repo = _ref2.repo,
        issueishNumber = _ref2.issueishNumber,
        host = _ref2.host;

    this.emitter = new _eventKit.Emitter();

    this.owner = owner;
    this.repo = repo;
    this.issueishNumber = issueishNumber;
    this.host = host;
    this.uri = uri;
    this.title = `${this.owner}/${this.repo}#${this.issueishNumber}`;

    this.createComponent();
  }

  createComponent() {
    this.element = document.createElement('div');
    const loginModel = _githubLoginModel2.default.get();
    const props = {
      owner: this.owner,
      repo: this.repo,
      issueishNumber: this.issueishNumber,
      host: this.host,
      onTitleChange: this.handleTitleChanged,
      loginModel
    };
    this.component = _reactDom2.default.render(_react2.default.createElement(_issueishPaneItemController2.default, props), this.element);
  }

  handleTitleChanged(title) {
    if (this.title !== title) {
      this.title = title;
      this.emitter.emit('did-change-title', title);
    }
  }

  onDidChangeTitle(cb) {
    return this.emitter.on('did-change-title', cb);
  }

  getElement() {
    return this.element;
  }

  serialize() {
    return {
      uri: this.uri,
      deserializer: 'IssueishPaneItem'
    };
  }

  getURI() {
    return this.uri;
  }

  getTitle() {
    return this.title;
  }

  destroy() {
    // TODO: is this right?
    this.emitter.dispose();
    _reactDom2.default.unmountComponentAtNode(this.getElement());
  }
}, (_applyDecoratedDescriptor(_class.prototype, 'handleTitleChanged', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'handleTitleChanged'), _class.prototype)), _class);
exports.default = IssueishPaneItem;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,