'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _class, _temp;

var _eventKit = require('event-kit');

let StubItem = (_temp = _class = class StubItem {

  // StubItems should only be created by `create` and never constructed directly.
  static create(selector, props) {
    const stub = new StubItem(selector, props);
    const override = {
      _getStub: () => stub,
      getElement: () => stub.getElement(),
      destroy: stub.destroy.bind(stub)
    };
    const proxy = new Proxy(override, {
      get(target, name) {
        const item = stub.getRealItem();
        if (Reflect.has(target, name)) {
          return target[name];
        } else if (item && Reflect.has(item, name)) {
          let val = item[name];
          if (typeof val === 'function') {
            val = val.bind(item);
          }
          return val;
        } else {
          let val = stub[name];
          if (typeof val === 'function') {
            val = val.bind(stub);
          }
          return val;
        }
      }
    });
    this.stubsBySelector.set(selector, proxy);
    return proxy;
  }

  static getBySelector(selector) {
    return this.stubsBySelector.get(selector);
  }

  static getElementBySelector(selector) {
    const stub = this.getBySelector(selector);
    if (stub) {
      return stub.getElement();
    } else {
      return null;
    }
  }

  constructor(selector) {
    let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    this.emitter = new _eventKit.Emitter();
    this.subscriptions = new _eventKit.CompositeDisposable();

    this.selector = selector;
    this.props = props;
    this.element = document.createElement('div');
    this.element.classList.add(`github-StubItem-${selector}`);
    this.realItem = null;
  }

  setRealItem(item) {
    var _this = this;

    this.realItem = item;
    this.emitter.emit('did-change-title');
    this.emitter.emit('did-change-icon');

    if (item.onDidChangeTitle) {
      this.subscriptions.add(item.onDidChangeTitle(function () {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _this.emitter.emit('did-change-title', ...args);
      }));
    }

    if (item.onDidChangeIcon) {
      this.subscriptions.add(item.onDidChangeIcon(function () {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return _this.emitter.emit('did-change-icon', ...args);
      }));
    }

    if (item.onDidDestroy) {
      this.subscriptions.add(item.onDidDestroy(function () {
        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        _this.realItem = null;
        _this.emitter.emit('did-destroy', ...args);
      }));
    }
  }

  getRealItem() {
    return this.realItem;
  }

  getTitle() {
    return this.props.title || null;
  }

  getIconName() {
    return this.props.iconName || null;
  }

  onDidChangeTitle(cb) {
    return this.emitter.on('did-change-title', cb);
  }

  onDidChangeIcon(cb) {
    return this.emitter.on('did-change-icon', cb);
  }

  getElement() {
    return this.element;
  }

  onDidDestroy(cb) {
    return this.emitter.on('did-destroy', cb);
  }

  destroy() {
    this.subscriptions.dispose();
    this.emitter.dispose();
    StubItem.stubsBySelector.delete(this.selector);
    if (this.actualItem) {
      this.actualItem.destroy && this.actualItem.destroy();
    }
  }
}, _class.stubsBySelector = new Map(), _temp);
exports.default = StubItem;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,