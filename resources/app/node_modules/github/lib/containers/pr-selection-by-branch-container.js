'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PrSelectionByBranch = undefined;

var _desc, _value, _class, _class2, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRelay = require('react-relay');

var _reactRelay2 = _interopRequireDefault(_reactRelay);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _coreDecorators = require('core-decorators');

var _prInfoContainer = require('./pr-info-container');

var _prInfoContainer2 = _interopRequireDefault(_prInfoContainer);

var _prUrlInputBox = require('../views/pr-url-input-box');

var _prUrlInputBox2 = _interopRequireDefault(_prUrlInputBox);

var _octicon = require('../views/octicon');

var _octicon2 = _interopRequireDefault(_octicon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

let PrSelectionByBranch = exports.PrSelectionByBranch = (_class = (_temp = _class2 = class PrSelectionByBranch extends _react2.default.Component {

  constructor(props, context) {
    super(props, context);
    this.state = { displayInputBox: false };
  }

  render() {
    return _react2.default.createElement(
      'div',
      { className: 'github-PrSelectionByBranch' },
      this.renderSubview()
    );
  }

  renderSubview() {
    const repo = this.props.query.repository;
    const variables = this.props.relay.variables;

    if (!repo || !repo.pullRequests.edges.length) {
      return _react2.default.createElement(
        'div',
        { className: 'github-PrUrlInputBox-Container' },
        _react2.default.createElement(
          _prUrlInputBox2.default,
          { onSubmit: this.props.onSelectPr },
          _react2.default.createElement('p', { className: 'icon icon-git-pull-request' }),
          _react2.default.createElement(
            'p',
            null,
            'No pull request could be found for the branch ',
            _react2.default.createElement(
              'span',
              { className: 'highlight' },
              variables.branchName
            ),
            'on the repository ',
            _react2.default.createElement(
              'span',
              { className: 'highlight' },
              variables.repoOwner,
              '/',
              variables.repoName
            ),
            '.'
          ),
          _react2.default.createElement(
            'p',
            null,
            'You can manually pin a GitHub pull request to the current branch by entering its URL:'
          )
        )
      );
    }

    const edges = repo.pullRequests.edges;
    if (edges.length === 1) {
      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(
            'div',
            { className: 'github-PrUrlInputBox-pinButton', onClick: this.toggleInputBoxVisibility },
            _react2.default.createElement(_octicon2.default, {
              title: 'Click here to select another PR.',
              icon: 'pin',
              className: 'pinned-by-url'
            }),
            'Specify Pull Request URL to pin'
          ),
          this.state.displayInputBox && _react2.default.createElement(
            _prUrlInputBox2.default,
            { onSubmit: this.props.onSelectPr },
            _react2.default.createElement(
              'p',
              null,
              'We found a pull request associated with the branch ',
              variables.branchName,
              ' on the repository ',
              variables.repoOwner,
              '/',
              variables.repoName,
              '.'
            ),
            _react2.default.createElement(
              'p',
              null,
              'You can manually pin a different GitHub pull request to the current branch by entering its URL:'
            )
          )
        ),
        _react2.default.createElement(_prInfoContainer2.default, { pullRequest: edges[0].node })
      );
    }

    return this.renderPrSelectionList(edges, repo.pullRequests.totalCount);
  }

  toggleInputBoxVisibility() {
    this.setState({ displayInputBox: !this.state.displayInputBox });
  }

  renderPrSelectionList(edges, totalCount) {
    const variables = this.props.relay.variables;

    return _react2.default.createElement(
      'div',
      { className: 'github-PrSelectionByBranch-listContainer' },
      _react2.default.createElement(
        'div',
        { className: 'github-PrSelectionByBranch-message' },
        'We found ',
        totalCount,
        ' pull requests associated with a branch named ',
        _react2.default.createElement(
          'span',
          { className: 'highlight' },
          variables.branchName
        ),
        ' on the repository ',
        _react2.default.createElement(
          'span',
          { className: 'highlight' },
          variables.repoOwner,
          '/',
          variables.repoName
        ),
        '. Select a pull request below to display it, or specify any pull request URL to pin it manually:'
      ),
      _react2.default.createElement(
        'div',
        { className: 'github-PrSelectionByBranch-input' },
        _react2.default.createElement(_prUrlInputBox2.default, { onSubmit: this.props.onSelectPr })
      ),
      _react2.default.createElement(
        'ul',
        { className: 'github-PrSelectionByBranch-list' },
        edges.map(this.displayPullRequestItem)
      )
    );
  }

  displayPullRequestItem(_ref) {
    let node = _ref.node;

    return _react2.default.createElement(
      'li',
      { key: node.id, onClick: e => this.selectPullRequest(e, node) },
      '#',
      node.number,
      ': ',
      node.title
    );
  }

  setPr(prLink) {
    this.props.onSelectPr(prLink);
  }

  selectPullRequest(event, node) {
    event.preventDefault();
    this.setPr(node.url);
  }
}, _class2.propTypes = {
  query: _propTypes2.default.shape({
    repository: _propTypes2.default.shape({
      pullRequests: _propTypes2.default.shape({
        totalCount: _propTypes2.default.number
      })
    })
  }),
  relay: _propTypes2.default.shape({
    variables: _propTypes2.default.object
  }),
  onSelectPr: _propTypes2.default.func.isRequired,
  onUnpinPr: _propTypes2.default.func.isRequired
}, _temp), (_applyDecoratedDescriptor(_class.prototype, 'toggleInputBoxVisibility', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'toggleInputBoxVisibility'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'displayPullRequestItem', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'displayPullRequestItem'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'setPr', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'setPr'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'selectPullRequest', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'selectPullRequest'), _class.prototype)), _class);
exports.default = _reactRelay2.default.createContainer(PrSelectionByBranch, {
  initialVariables: {
    repoOwner: null,
    repoName: null,
    branchName: null
  },

  fragments: {
    query: () => function (RQL_0) {
      return {
        children: [{
          calls: [{
            kind: 'Call',
            metadata: {},
            name: 'owner',
            value: {
              kind: 'CallVariable',
              callVariableName: 'repoOwner'
            }
          }, {
            kind: 'Call',
            metadata: {},
            name: 'name',
            value: {
              kind: 'CallVariable',
              callVariableName: 'repoName'
            }
          }],
          children: [{
            calls: [{
              kind: 'Call',
              metadata: {},
              name: 'first',
              value: {
                kind: 'CallValue',
                callValue: 30
              }
            }, {
              kind: 'Call',
              metadata: {},
              name: 'headRefName',
              value: {
                kind: 'CallVariable',
                callVariableName: 'branchName'
              }
            }],
            children: [{
              fieldName: 'totalCount',
              kind: 'Field',
              metadata: {},
              type: 'Int'
            }, {
              children: [{
                children: [].concat.apply([], [{
                  fieldName: 'id',
                  kind: 'Field',
                  metadata: {
                    isRequisite: true
                  },
                  type: 'ID'
                }, {
                  fieldName: 'number',
                  kind: 'Field',
                  metadata: {},
                  type: 'Int'
                }, {
                  fieldName: 'title',
                  kind: 'Field',
                  metadata: {},
                  type: 'String'
                }, {
                  fieldName: 'url',
                  kind: 'Field',
                  metadata: {},
                  type: 'URI'
                }, _reactRelay2.default.QL.__frag(RQL_0)]),
                fieldName: 'node',
                kind: 'Field',
                metadata: {
                  canHaveSubselections: true,
                  inferredRootCallName: 'node',
                  inferredPrimaryKey: 'id',
                  isRequisite: true
                },
                type: 'PullRequest'
              }, {
                fieldName: 'cursor',
                kind: 'Field',
                metadata: {
                  isGenerated: true,
                  isRequisite: true
                },
                type: 'String'
              }],
              fieldName: 'edges',
              kind: 'Field',
              metadata: {
                canHaveSubselections: true,
                isPlural: true
              },
              type: 'PullRequestEdge'
            }, {
              children: [{
                fieldName: 'hasNextPage',
                kind: 'Field',
                metadata: {
                  isGenerated: true,
                  isRequisite: true
                },
                type: 'Boolean'
              }, {
                fieldName: 'hasPreviousPage',
                kind: 'Field',
                metadata: {
                  isGenerated: true,
                  isRequisite: true
                },
                type: 'Boolean'
              }],
              fieldName: 'pageInfo',
              kind: 'Field',
              metadata: {
                canHaveSubselections: true,
                isGenerated: true,
                isRequisite: true
              },
              type: 'PageInfo'
            }],
            fieldName: 'pullRequests',
            kind: 'Field',
            metadata: {
              canHaveSubselections: true,
              isConnection: true
            },
            type: 'PullRequestConnection'
          }, {
            fieldName: 'id',
            kind: 'Field',
            metadata: {
              isGenerated: true,
              isRequisite: true
            },
            type: 'ID'
          }],
          fieldName: 'repository',
          kind: 'Field',
          metadata: {
            canHaveSubselections: true,
            inferredRootCallName: 'node',
            inferredPrimaryKey: 'id'
          },
          type: 'Repository'
        }],
        id: _reactRelay2.default.QL.__id(),
        kind: 'Fragment',
        metadata: {},
        name: 'Pr_QueryRelayQL',
        type: 'Query'
      };
    }(_prInfoContainer2.default.getFragment('pullRequest'))
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,