'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRelay = require('react-relay');

var _reactRelay2 = _interopRequireDefault(_reactRelay);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _octicon = require('../views/octicon');

var _octicon2 = _interopRequireDefault(_octicon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const typeAndStateToIcon = {
  Issue: {
    OPEN: 'issue-opened',
    CLOSED: 'issue-closed'
  },
  PullRequest: {
    OPEN: 'git-pull-request',
    CLOSED: 'git-pull-request',
    MERGED: 'git-merge'
  }
};

let IssueishTooltip = (_temp = _class = class IssueishTooltip extends _react2.default.Component {

  render() {
    const resource = this.props.resource;
    const repository = resource.repository,
          state = resource.state,
          number = resource.number,
          title = resource.title,
          author = resource.author,
          __typename = resource.__typename;

    const icons = typeAndStateToIcon[__typename] || {};
    const icon = icons[state] || '';
    return _react2.default.createElement(
      'div',
      { className: 'github-IssueishTooltip' },
      _react2.default.createElement(
        'div',
        { className: 'issueish-badge-and-link' },
        _react2.default.createElement(
          'span',
          { className: (0, _classnames2.default)('issueish-badge', 'badge', state.toLowerCase()) },
          _react2.default.createElement(_octicon2.default, { icon: icon }),
          state.toLowerCase()
        ),
        _react2.default.createElement(
          'span',
          { className: 'issueish-link' },
          repository.owner.login,
          '/',
          repository.name,
          '#',
          number
        )
      ),
      _react2.default.createElement(
        'h3',
        { className: 'issueish-title' },
        title
      ),
      _react2.default.createElement(
        'div',
        { className: 'issueish-avatar-and-title' },
        _react2.default.createElement('img', { className: 'author-avatar', src: author.avatarUrl, title: author.login }),
        _react2.default.createElement(
          'strong',
          null,
          author.login
        )
      )
    );
  }
}, _class.propTypes = {
  resource: _propTypes2.default.shape({
    issue: _propTypes2.default.shape({}),
    pullRequest: _propTypes2.default.shape({})
  }).isRequired
}, _temp);
exports.default = _reactRelay2.default.createContainer(IssueishTooltip, {
  fragments: {
    resource: () => function () {
      return {
        children: [{
          fieldName: '__typename',
          kind: 'Field',
          metadata: {
            isRequisite: true
          },
          type: 'String'
        }, {
          children: [{
            fieldName: 'state',
            kind: 'Field',
            metadata: {},
            type: 'IssueState'
          }, {
            fieldName: 'number',
            kind: 'Field',
            metadata: {},
            type: 'Int'
          }, {
            fieldName: 'title',
            kind: 'Field',
            metadata: {},
            type: 'String'
          }, {
            children: [{
              fieldName: 'name',
              kind: 'Field',
              metadata: {},
              type: 'String'
            }, {
              children: [{
                fieldName: 'login',
                kind: 'Field',
                metadata: {},
                type: 'String'
              }, {
                fieldName: 'id',
                kind: 'Field',
                metadata: {
                  isGenerated: true,
                  isRequisite: true
                },
                type: 'ID'
              }, {
                fieldName: '__typename',
                kind: 'Field',
                metadata: {
                  isGenerated: true,
                  isRequisite: true
                },
                type: 'String'
              }],
              fieldName: 'owner',
              kind: 'Field',
              metadata: {
                canHaveSubselections: true,
                inferredRootCallName: 'node',
                inferredPrimaryKey: 'id',
                isAbstract: true
              },
              type: 'RepositoryOwner'
            }, {
              fieldName: 'id',
              kind: 'Field',
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: 'ID'
            }],
            fieldName: 'repository',
            kind: 'Field',
            metadata: {
              canHaveSubselections: true,
              inferredRootCallName: 'node',
              inferredPrimaryKey: 'id'
            },
            type: 'Repository'
          }, {
            children: [{
              fieldName: 'login',
              kind: 'Field',
              metadata: {},
              type: 'String'
            }, {
              fieldName: 'avatarUrl',
              kind: 'Field',
              metadata: {},
              type: 'URI'
            }, {
              fieldName: '__typename',
              kind: 'Field',
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: 'String'
            }, {
              children: [{
                fieldName: 'id',
                kind: 'Field',
                metadata: {
                  isGenerated: true,
                  isRequisite: true
                },
                type: 'ID'
              }, {
                fieldName: '__typename',
                kind: 'Field',
                metadata: {
                  isGenerated: true,
                  isRequisite: true
                },
                type: 'String'
              }],
              id: _reactRelay2.default.QL.__id(),
              kind: 'Fragment',
              metadata: {
                isAbstract: true
              },
              name: 'IdFragment',
              type: 'Node'
            }],
            fieldName: 'author',
            kind: 'Field',
            metadata: {
              canHaveSubselections: true,
              inferredRootCallName: 'node',
              inferredPrimaryKey: 'id',
              isAbstract: true
            },
            type: 'Actor'
          }, {
            fieldName: 'id',
            kind: 'Field',
            metadata: {
              isGenerated: true,
              isRequisite: true
            },
            type: 'ID'
          }],
          id: _reactRelay2.default.QL.__id(),
          kind: 'Fragment',
          metadata: {},
          name: 'Issue',
          type: 'Issue'
        }, {
          children: [{
            fieldName: 'state',
            kind: 'Field',
            metadata: {},
            type: 'PullRequestState'
          }, {
            fieldName: 'number',
            kind: 'Field',
            metadata: {},
            type: 'Int'
          }, {
            fieldName: 'title',
            kind: 'Field',
            metadata: {},
            type: 'String'
          }, {
            children: [{
              fieldName: 'name',
              kind: 'Field',
              metadata: {},
              type: 'String'
            }, {
              children: [{
                fieldName: 'login',
                kind: 'Field',
                metadata: {},
                type: 'String'
              }, {
                fieldName: 'id',
                kind: 'Field',
                metadata: {
                  isGenerated: true,
                  isRequisite: true
                },
                type: 'ID'
              }, {
                fieldName: '__typename',
                kind: 'Field',
                metadata: {
                  isGenerated: true,
                  isRequisite: true
                },
                type: 'String'
              }],
              fieldName: 'owner',
              kind: 'Field',
              metadata: {
                canHaveSubselections: true,
                inferredRootCallName: 'node',
                inferredPrimaryKey: 'id',
                isAbstract: true
              },
              type: 'RepositoryOwner'
            }, {
              fieldName: 'id',
              kind: 'Field',
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: 'ID'
            }],
            fieldName: 'repository',
            kind: 'Field',
            metadata: {
              canHaveSubselections: true,
              inferredRootCallName: 'node',
              inferredPrimaryKey: 'id'
            },
            type: 'Repository'
          }, {
            children: [{
              fieldName: 'login',
              kind: 'Field',
              metadata: {},
              type: 'String'
            }, {
              fieldName: 'avatarUrl',
              kind: 'Field',
              metadata: {},
              type: 'URI'
            }, {
              fieldName: '__typename',
              kind: 'Field',
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: 'String'
            }, {
              children: [{
                fieldName: 'id',
                kind: 'Field',
                metadata: {
                  isGenerated: true,
                  isRequisite: true
                },
                type: 'ID'
              }, {
                fieldName: '__typename',
                kind: 'Field',
                metadata: {
                  isGenerated: true,
                  isRequisite: true
                },
                type: 'String'
              }],
              id: _reactRelay2.default.QL.__id(),
              kind: 'Fragment',
              metadata: {
                isAbstract: true
              },
              name: 'IdFragment',
              type: 'Node'
            }],
            fieldName: 'author',
            kind: 'Field',
            metadata: {
              canHaveSubselections: true,
              inferredRootCallName: 'node',
              inferredPrimaryKey: 'id',
              isAbstract: true
            },
            type: 'Actor'
          }, {
            fieldName: 'id',
            kind: 'Field',
            metadata: {
              isGenerated: true,
              isRequisite: true
            },
            type: 'ID'
          }],
          id: _reactRelay2.default.QL.__id(),
          kind: 'Fragment',
          metadata: {},
          name: 'PullRequest',
          type: 'PullRequest'
        }, {
          children: [{
            fieldName: 'id',
            kind: 'Field',
            metadata: {
              isGenerated: true,
              isRequisite: true
            },
            type: 'ID'
          }, {
            fieldName: '__typename',
            kind: 'Field',
            metadata: {
              isGenerated: true,
              isRequisite: true
            },
            type: 'String'
          }],
          id: _reactRelay2.default.QL.__id(),
          kind: 'Fragment',
          metadata: {
            isAbstract: true
          },
          name: 'IdFragment',
          type: 'Node'
        }],
        id: _reactRelay2.default.QL.__id(),
        kind: 'Fragment',
        metadata: {
          isAbstract: true
        },
        name: 'Issueish_ResourceRelayQL',
        type: 'UniformResourceLocatable'
      };
    }()
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzc3VlaXNoLXRvb2x0aXAtY29udGFpbmVyLmpzIl0sIm5hbWVzIjpbInR5cGVBbmRTdGF0ZVRvSWNvbiIsIklzc3VlIiwiT1BFTiIsIkNMT1NFRCIsIlB1bGxSZXF1ZXN0IiwiTUVSR0VEIiwiSXNzdWVpc2hUb29sdGlwIiwiQ29tcG9uZW50IiwicmVuZGVyIiwicmVzb3VyY2UiLCJwcm9wcyIsInJlcG9zaXRvcnkiLCJzdGF0ZSIsIm51bWJlciIsInRpdGxlIiwiYXV0aG9yIiwiX190eXBlbmFtZSIsImljb25zIiwiaWNvbiIsInRvTG93ZXJDYXNlIiwib3duZXIiLCJsb2dpbiIsIm5hbWUiLCJhdmF0YXJVcmwiLCJwcm9wVHlwZXMiLCJzaGFwZSIsImlzc3VlIiwicHVsbFJlcXVlc3QiLCJpc1JlcXVpcmVkIiwiY3JlYXRlQ29udGFpbmVyIiwiZnJhZ21lbnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7OztBQUVBLE1BQU1BLHFCQUFxQjtBQUN6QkMsU0FBTztBQUNMQyxVQUFNLGNBREQ7QUFFTEMsWUFBUTtBQUZILEdBRGtCO0FBS3pCQyxlQUFhO0FBQ1hGLFVBQU0sa0JBREs7QUFFWEMsWUFBUSxrQkFGRztBQUdYRSxZQUFRO0FBSEc7QUFMWSxDQUEzQjs7SUFZTUMsZSxxQkFBTixNQUFNQSxlQUFOLFNBQThCLGdCQUFNQyxTQUFwQyxDQUE4Qzs7QUFRNUNDLFdBQVM7QUFDUCxVQUFNQyxXQUFXLEtBQUtDLEtBQUwsQ0FBV0QsUUFBNUI7QUFETyxVQUVBRSxVQUZBLEdBRXdERixRQUZ4RCxDQUVBRSxVQUZBO0FBQUEsVUFFWUMsS0FGWixHQUV3REgsUUFGeEQsQ0FFWUcsS0FGWjtBQUFBLFVBRW1CQyxNQUZuQixHQUV3REosUUFGeEQsQ0FFbUJJLE1BRm5CO0FBQUEsVUFFMkJDLEtBRjNCLEdBRXdETCxRQUZ4RCxDQUUyQkssS0FGM0I7QUFBQSxVQUVrQ0MsTUFGbEMsR0FFd0ROLFFBRnhELENBRWtDTSxNQUZsQztBQUFBLFVBRTBDQyxVQUYxQyxHQUV3RFAsUUFGeEQsQ0FFMENPLFVBRjFDOztBQUdQLFVBQU1DLFFBQVFqQixtQkFBbUJnQixVQUFuQixLQUFrQyxFQUFoRDtBQUNBLFVBQU1FLE9BQU9ELE1BQU1MLEtBQU4sS0FBZ0IsRUFBN0I7QUFDQSxXQUNFO0FBQUE7QUFBQSxRQUFLLFdBQVUsd0JBQWY7QUFDRTtBQUFBO0FBQUEsVUFBSyxXQUFVLHlCQUFmO0FBQ0U7QUFBQTtBQUFBLFlBQU0sV0FBVywwQkFBRyxnQkFBSCxFQUFxQixPQUFyQixFQUE4QkEsTUFBTU8sV0FBTixFQUE5QixDQUFqQjtBQUNFLDZEQUFTLE1BQU1ELElBQWYsR0FERjtBQUVHTixnQkFBTU8sV0FBTjtBQUZILFNBREY7QUFLRTtBQUFBO0FBQUEsWUFBTSxXQUFVLGVBQWhCO0FBQ0dSLHFCQUFXUyxLQUFYLENBQWlCQyxLQURwQjtBQUFBO0FBQzRCVixxQkFBV1csSUFEdkM7QUFBQTtBQUM4Q1Q7QUFEOUM7QUFMRixPQURGO0FBVUU7QUFBQTtBQUFBLFVBQUksV0FBVSxnQkFBZDtBQUFnQ0M7QUFBaEMsT0FWRjtBQVdFO0FBQUE7QUFBQSxVQUFLLFdBQVUsMkJBQWY7QUFDRSwrQ0FBSyxXQUFVLGVBQWYsRUFBK0IsS0FBS0MsT0FBT1EsU0FBM0MsRUFBc0QsT0FBT1IsT0FBT00sS0FBcEUsR0FERjtBQUVFO0FBQUE7QUFBQTtBQUFTTixpQkFBT007QUFBaEI7QUFGRjtBQVhGLEtBREY7QUFrQkQ7QUEvQjJDLEMsU0FDckNHLFMsR0FBWTtBQUNqQmYsWUFBVSxvQkFBVWdCLEtBQVYsQ0FBZ0I7QUFDeEJDLFdBQU8sb0JBQVVELEtBQVYsQ0FBZ0IsRUFBaEIsQ0FEaUI7QUFFeEJFLGlCQUFhLG9CQUFVRixLQUFWLENBQWdCLEVBQWhCO0FBRlcsR0FBaEIsRUFHUEc7QUFKYyxDO2tCQWlDTixxQkFBTUMsZUFBTixDQUFzQnZCLGVBQXRCLEVBQXVDO0FBQ3BEd0IsYUFBVztBQUNUckIsY0FBVTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUREO0FBRHlDLENBQXZDLEMiLCJmaWxlIjoiaXNzdWVpc2gtdG9vbHRpcC1jb250YWluZXIuanMiLCJzb3VyY2VSb290IjoiQzovcHJvamVjdHMvYXRvbS9vdXQvYXBwL25vZGVfbW9kdWxlcy9naXRodWIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlbGF5IGZyb20gJ3JlYWN0LXJlbGF5JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCBPY3RpY29uIGZyb20gJy4uL3ZpZXdzL29jdGljb24nO1xuXG5jb25zdCB0eXBlQW5kU3RhdGVUb0ljb24gPSB7XG4gIElzc3VlOiB7XG4gICAgT1BFTjogJ2lzc3VlLW9wZW5lZCcsXG4gICAgQ0xPU0VEOiAnaXNzdWUtY2xvc2VkJyxcbiAgfSxcbiAgUHVsbFJlcXVlc3Q6IHtcbiAgICBPUEVOOiAnZ2l0LXB1bGwtcmVxdWVzdCcsXG4gICAgQ0xPU0VEOiAnZ2l0LXB1bGwtcmVxdWVzdCcsXG4gICAgTUVSR0VEOiAnZ2l0LW1lcmdlJyxcbiAgfSxcbn07XG5cbmNsYXNzIElzc3VlaXNoVG9vbHRpcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgcmVzb3VyY2U6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBpc3N1ZTogUHJvcFR5cGVzLnNoYXBlKHt9KSxcbiAgICAgIHB1bGxSZXF1ZXN0OiBQcm9wVHlwZXMuc2hhcGUoe30pLFxuICAgIH0pLmlzUmVxdWlyZWQsXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgcmVzb3VyY2UgPSB0aGlzLnByb3BzLnJlc291cmNlO1xuICAgIGNvbnN0IHtyZXBvc2l0b3J5LCBzdGF0ZSwgbnVtYmVyLCB0aXRsZSwgYXV0aG9yLCBfX3R5cGVuYW1lfSA9IHJlc291cmNlO1xuICAgIGNvbnN0IGljb25zID0gdHlwZUFuZFN0YXRlVG9JY29uW19fdHlwZW5hbWVdIHx8IHt9O1xuICAgIGNvbnN0IGljb24gPSBpY29uc1tzdGF0ZV0gfHwgJyc7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2l0aHViLUlzc3VlaXNoVG9vbHRpcFwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlzc3VlaXNoLWJhZGdlLWFuZC1saW5rXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtjeCgnaXNzdWVpc2gtYmFkZ2UnLCAnYmFkZ2UnLCBzdGF0ZS50b0xvd2VyQ2FzZSgpKX0+XG4gICAgICAgICAgICA8T2N0aWNvbiBpY29uPXtpY29ufSAvPlxuICAgICAgICAgICAge3N0YXRlLnRvTG93ZXJDYXNlKCl9XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImlzc3VlaXNoLWxpbmtcIj5cbiAgICAgICAgICAgIHtyZXBvc2l0b3J5Lm93bmVyLmxvZ2lufS97cmVwb3NpdG9yeS5uYW1lfSN7bnVtYmVyfVxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxoMyBjbGFzc05hbWU9XCJpc3N1ZWlzaC10aXRsZVwiPnt0aXRsZX08L2gzPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlzc3VlaXNoLWF2YXRhci1hbmQtdGl0bGVcIj5cbiAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cImF1dGhvci1hdmF0YXJcIiBzcmM9e2F1dGhvci5hdmF0YXJVcmx9IHRpdGxlPXthdXRob3IubG9naW59IC8+XG4gICAgICAgICAgPHN0cm9uZz57YXV0aG9yLmxvZ2lufTwvc3Ryb25nPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVsYXkuY3JlYXRlQ29udGFpbmVyKElzc3VlaXNoVG9vbHRpcCwge1xuICBmcmFnbWVudHM6IHtcbiAgICByZXNvdXJjZTogKCkgPT4gUmVsYXkuUUxgXG4gICAgICBmcmFnbWVudCBvbiBVbmlmb3JtUmVzb3VyY2VMb2NhdGFibGUge1xuICAgICAgICBfX3R5cGVuYW1lXG5cbiAgICAgICAgLi4uIG9uIElzc3VlIHtcbiAgICAgICAgICBzdGF0ZSBudW1iZXIgdGl0bGVcbiAgICAgICAgICByZXBvc2l0b3J5IHsgbmFtZSBvd25lciB7IGxvZ2luIH0gfVxuICAgICAgICAgIGF1dGhvciB7IGxvZ2luIGF2YXRhclVybCB9XG4gICAgICAgIH1cbiAgICAgICAgLi4uIG9uIFB1bGxSZXF1ZXN0IHtcbiAgICAgICAgICBzdGF0ZSBudW1iZXIgdGl0bGVcbiAgICAgICAgICByZXBvc2l0b3J5IHsgbmFtZSBvd25lciB7IGxvZ2luIH0gfVxuICAgICAgICAgIGF1dGhvciB7IGxvZ2luIGF2YXRhclVybCB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBgLFxuICB9LFxufSk7XG4iXX0=