'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PrInfo = undefined;

var _desc, _value, _class, _class2, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRelay = require('react-relay');

var _reactRelay2 = _interopRequireDefault(_reactRelay);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _coreDecorators = require('core-decorators');

var _octicon = require('../views/octicon');

var _octicon2 = _interopRequireDefault(_octicon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

const reactionTypeToEmoji = {
  THUMBS_UP: '👍',
  THUMBS_DOWN: '👎',
  LAUGH: '😆',
  HOORAY: '🎉',
  CONFUSED: '😕',
  HEART: '❤️'
};

const prStateToIcon = {
  OPEN: 'git-pull-request',
  CLOSED: 'git-pull-request',
  MERGED: 'git-merge'
};

let PrInfo = exports.PrInfo = (_class = (_temp = _class2 = class PrInfo extends _react2.default.Component {

  render() {
    const pr = this.props.pullRequest;
    const repo = pr.repository;
    return _react2.default.createElement(
      'div',
      { className: 'github-PrInfo' },
      this.props.pinnedByUrl && this.renderPinnedPr(),
      _react2.default.createElement(
        'div',
        { className: 'pr-badge-and-link' },
        _react2.default.createElement(
          'span',
          { className: (0, _classnames2.default)('pr-badge', 'badge', pr.state.toLowerCase()) },
          _react2.default.createElement(_octicon2.default, { icon: prStateToIcon[pr.state] }),
          pr.state.toLowerCase()
        ),
        _react2.default.createElement(
          'span',
          { className: 'pr-link' },
          _react2.default.createElement(
            'a',
            { className: 'pane-item-link', href: pr.url },
            repo.owner.login,
            '/',
            repo.name,
            '#',
            pr.number
          )
        )
      ),
      _react2.default.createElement(
        'div',
        { className: 'pr-avatar-and-title' },
        _react2.default.createElement(
          'a',
          { className: 'author-avatar-link', href: pr.author.url },
          _react2.default.createElement('img', { className: 'author-avatar', src: pr.author.avatarUrl, title: pr.author.login })
        ),
        _react2.default.createElement(
          'h3',
          { className: 'pr-title' },
          pr.title
        )
      ),
      _react2.default.createElement(
        'div',
        { className: 'conversation', onClick: this.handleClickPrLink },
        _react2.default.createElement(_octicon2.default, { icon: 'comment-discussion' }),
        'Conversation'
      ),
      _react2.default.createElement(
        'div',
        { className: 'commit-count' },
        _react2.default.createElement(_octicon2.default, { icon: 'git-commit' }),
        'Commits ',
        _react2.default.createElement(
          'span',
          { className: 'count-number' },
          pr.commits.totalCount
        )
      ),
      _react2.default.createElement(
        'div',
        { className: 'labels' },
        pr.labels.edges.map((_ref) => {
          let node = _ref.node;
          const name = node.name,
                color = node.color;

          const hex = `#${color}`;
          return _react2.default.createElement(
            'span',
            { key: name, className: 'label', style: { background: hex } },
            name
          );
        })
      ),
      _react2.default.createElement(
        'div',
        { className: 'reactions' },
        pr.reactionGroups.map(group => group.users.totalCount > 0 ? _react2.default.createElement(
          'span',
          { className: (0, _classnames2.default)('reaction-group', group.content.toLowerCase()), key: group.content },
          reactionTypeToEmoji[group.content],
          ' \xA0 ',
          group.users.totalCount
        ) : null)
      )
    );
  }

  renderPinnedPr() {
    return _react2.default.createElement(
      'div',
      { className: 'pinned-pr-info' },
      _react2.default.createElement(_octicon2.default, {
        title: 'This pull request has been manually pinned to this branch. Click here to select another PR.',
        icon: 'pin',
        className: 'pinned-by-url',
        onClick: this.handleUnpinClick
      }),
      _react2.default.createElement(
        'span',
        null,
        'This pull request has been manually pinned to the current branch. You may ',
        _react2.default.createElement(
          'a',
          { href: '#', onClick: this.handleUnpinClick },
          'unpin it'
        ),
        '.'
      )
    );
  }

  handleClickPrLink(event) {
    event.nativeEvent.preventDefault();
    event.nativeEvent.stopPropagation();
    const pr = this.props.pullRequest;
    const repo = pr.repository;
    atom.workspace.open(`atom-github://issueish/https://api.github.com/${repo.owner.login}/${repo.name}/${pr.number}`);
  }

  handleUnpinClick(event) {
    event.preventDefault();
    this.props.onUnpinPr && this.props.onUnpinPr();
  }
}, _class2.propTypes = {
  pinnedByUrl: _propTypes2.default.bool,
  onUnpinPr: _propTypes2.default.func,
  pullRequest: _propTypes2.default.shape({
    title: _propTypes2.default.string,
    bodyHTML: _propTypes2.default.string,
    number: _propTypes2.default.number,
    repository: _propTypes2.default.shape({
      name: _propTypes2.default.string.isRequired,
      owner: _propTypes2.default.shape({
        login: _propTypes2.default.string
      })
    }),
    state: _propTypes2.default.oneOf(['OPEN', 'CLOSED', 'MERGED']).isRequired,
    author: _propTypes2.default.shape({
      login: _propTypes2.default.string.isRequired,
      avatarUrl: _propTypes2.default.string.isRequired,
      url: _propTypes2.default.string.isRequired
    }).isRequired,
    reactionGroups: _propTypes2.default.arrayOf(_propTypes2.default.shape({
      content: _propTypes2.default.string.isRequired,
      users: _propTypes2.default.shape({
        totalCount: _propTypes2.default.number.isRequired
      }).isRequired
    })).isRequired
  }).isRequired
}, _temp), (_applyDecoratedDescriptor(_class.prototype, 'handleClickPrLink', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'handleClickPrLink'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'handleUnpinClick', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'handleUnpinClick'), _class.prototype)), _class);
exports.default = _reactRelay2.default.createContainer(PrInfo, {
  fragments: {
    pullRequest: () => function () {
      return {
        children: [{
          fieldName: 'url',
          kind: 'Field',
          metadata: {},
          type: 'URI'
        }, {
          fieldName: 'number',
          kind: 'Field',
          metadata: {},
          type: 'Int'
        }, {
          fieldName: 'title',
          kind: 'Field',
          metadata: {},
          type: 'String'
        }, {
          fieldName: 'state',
          kind: 'Field',
          metadata: {},
          type: 'PullRequestState'
        }, {
          fieldName: 'createdAt',
          kind: 'Field',
          metadata: {},
          type: 'DateTime'
        }, {
          children: [{
            fieldName: 'login',
            kind: 'Field',
            metadata: {},
            type: 'String'
          }, {
            fieldName: 'avatarUrl',
            kind: 'Field',
            metadata: {},
            type: 'URI'
          }, {
            fieldName: '__typename',
            kind: 'Field',
            metadata: {
              isGenerated: true,
              isRequisite: true
            },
            type: 'String'
          }, {
            children: [{
              fieldName: 'url',
              kind: 'Field',
              metadata: {},
              type: 'URI'
            }, {
              fieldName: 'id',
              kind: 'Field',
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: 'ID'
            }],
            id: _reactRelay2.default.QL.__id(),
            kind: 'Fragment',
            metadata: {},
            name: 'User',
            type: 'User'
          }, {
            children: [{
              fieldName: 'url',
              kind: 'Field',
              metadata: {},
              type: 'URI'
            }, {
              fieldName: 'id',
              kind: 'Field',
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: 'ID'
            }],
            id: _reactRelay2.default.QL.__id(),
            kind: 'Fragment',
            metadata: {},
            name: 'Bot',
            type: 'Bot'
          }, {
            children: [{
              fieldName: 'id',
              kind: 'Field',
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: 'ID'
            }, {
              fieldName: '__typename',
              kind: 'Field',
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: 'String'
            }],
            id: _reactRelay2.default.QL.__id(),
            kind: 'Fragment',
            metadata: {
              isAbstract: true
            },
            name: 'IdFragment',
            type: 'Node'
          }],
          fieldName: 'author',
          kind: 'Field',
          metadata: {
            canHaveSubselections: true,
            inferredRootCallName: 'node',
            inferredPrimaryKey: 'id',
            isAbstract: true
          },
          type: 'Actor'
        }, {
          children: [{
            fieldName: 'name',
            kind: 'Field',
            metadata: {},
            type: 'String'
          }, {
            children: [{
              fieldName: 'login',
              kind: 'Field',
              metadata: {},
              type: 'String'
            }, {
              fieldName: 'id',
              kind: 'Field',
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: 'ID'
            }, {
              fieldName: '__typename',
              kind: 'Field',
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: 'String'
            }],
            fieldName: 'owner',
            kind: 'Field',
            metadata: {
              canHaveSubselections: true,
              inferredRootCallName: 'node',
              inferredPrimaryKey: 'id',
              isAbstract: true
            },
            type: 'RepositoryOwner'
          }, {
            fieldName: 'id',
            kind: 'Field',
            metadata: {
              isGenerated: true,
              isRequisite: true
            },
            type: 'ID'
          }],
          fieldName: 'repository',
          kind: 'Field',
          metadata: {
            canHaveSubselections: true,
            inferredRootCallName: 'node',
            inferredPrimaryKey: 'id'
          },
          type: 'Repository'
        }, {
          children: [{
            fieldName: 'content',
            kind: 'Field',
            metadata: {},
            type: 'ReactionContent'
          }, {
            children: [{
              fieldName: 'totalCount',
              kind: 'Field',
              metadata: {},
              type: 'Int'
            }],
            fieldName: 'users',
            kind: 'Field',
            metadata: {
              canHaveSubselections: true,
              isConnection: true
            },
            type: 'ReactingUserConnection'
          }],
          fieldName: 'reactionGroups',
          kind: 'Field',
          metadata: {
            canHaveSubselections: true,
            isPlural: true
          },
          type: 'ReactionGroup'
        }, {
          children: [{
            fieldName: 'totalCount',
            kind: 'Field',
            metadata: {},
            type: 'Int'
          }],
          fieldName: 'commits',
          kind: 'Field',
          metadata: {
            canHaveSubselections: true,
            isConnection: true
          },
          type: 'PullRequestCommitConnection'
        }, {
          calls: [{
            kind: 'Call',
            metadata: {},
            name: 'first',
            value: {
              kind: 'CallValue',
              callValue: 100
            }
          }],
          children: [{
            children: [{
              children: [{
                fieldName: 'name',
                kind: 'Field',
                metadata: {},
                type: 'String'
              }, {
                fieldName: 'color',
                kind: 'Field',
                metadata: {},
                type: 'String'
              }, {
                fieldName: 'id',
                kind: 'Field',
                metadata: {
                  isGenerated: true,
                  isRequisite: true
                },
                type: 'ID'
              }],
              fieldName: 'node',
              kind: 'Field',
              metadata: {
                canHaveSubselections: true,
                inferredRootCallName: 'node',
                inferredPrimaryKey: 'id',
                isRequisite: true
              },
              type: 'Label'
            }, {
              fieldName: 'cursor',
              kind: 'Field',
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: 'String'
            }],
            fieldName: 'edges',
            kind: 'Field',
            metadata: {
              canHaveSubselections: true,
              isPlural: true
            },
            type: 'LabelEdge'
          }, {
            children: [{
              fieldName: 'hasNextPage',
              kind: 'Field',
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: 'Boolean'
            }, {
              fieldName: 'hasPreviousPage',
              kind: 'Field',
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: 'Boolean'
            }],
            fieldName: 'pageInfo',
            kind: 'Field',
            metadata: {
              canHaveSubselections: true,
              isGenerated: true,
              isRequisite: true
            },
            type: 'PageInfo'
          }],
          fieldName: 'labels',
          kind: 'Field',
          metadata: {
            canHaveSubselections: true,
            isConnection: true
          },
          type: 'LabelConnection'
        }, {
          fieldName: 'id',
          kind: 'Field',
          metadata: {
            isGenerated: true,
            isRequisite: true
          },
          type: 'ID'
        }],
        id: _reactRelay2.default.QL.__id(),
        kind: 'Fragment',
        metadata: {},
        name: 'Pr_PullRequestRelayQL',
        type: 'PullRequest'
      };
    }()
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,