'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _net = require('net');

var _net2 = _interopRequireDefault(_net);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _eventKit = require('event-kit');

var _helpers = require('./helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function getAtomHelperPath() {
  if (process.platform === 'darwin') {
    const beta = atom.appVersion.match(/-beta/);
    const appName = beta ? 'Atom Beta Helper' : 'Atom Helper';
    return _path2.default.resolve(process.resourcesPath, '..', 'Frameworks', `${appName}.app`, 'Contents', 'MacOS', appName);
  } else {
    return process.execPath;
  }
}

let GitPromptServer = class GitPromptServer {
  constructor() {
    this.emitter = new _eventKit.Emitter();
  }

  start(promptForInput) {
    var _this = this;

    return _asyncToGenerator(function* () {
      // TODO: [mkt] Windows?? yes.
      _this.promptForInput = promptForInput;
      const windows = process.platform === 'win32';
      _this.tmpFolderPath = yield (0, _helpers.getTempDir)('github-');

      const credentialHelper = {};
      const askPass = {};
      const sshWrapper = {};

      const sourceFiles = {
        'git-credential-atom.js': function (outfile) {
          return credentialHelper.script = outfile;
        },
        'git-credential-atom.sh': function (outfile) {
          return credentialHelper.launcher = outfile;
        },
        'git-askpass-atom.js': function (outfile) {
          return askPass.script = outfile;
        },
        'git-askpass-atom.sh': function (outfile) {
          return askPass.launcher = outfile;
        },
        'linux-ssh-wrapper.sh': function (outfile) {
          return sshWrapper.script = outfile;
        }
      };

      yield Promise.all(Object.keys(sourceFiles).map(function (filename) {
        return (0, _helpers.copyFile)(_path2.default.resolve((0, _helpers.getPackageRoot)(), 'bin', filename), _path2.default.join(_this.tmpFolderPath, filename)).then(sourceFiles[filename]);
      }));

      const socketPath = _path2.default.join(_this.tmpFolderPath, 'helper.sock');
      const namedPipePath = _path2.default.join('\\\\?\\pipe\\', 'gh-' + require('crypto').randomBytes(8).toString('hex'), 'helper.sock');
      _this.server = yield _this.startListening(windows ? namedPipePath : socketPath);

      return {
        socket: windows ? namedPipePath : socketPath,
        electron: getAtomHelperPath(),
        credentialHelper,
        askPass,
        sshWrapper
      };
    })();
  }

  startListening(socketPath) {
    return new Promise(resolve => {
      const server = _net2.default.createServer(connection => {
        connection.setEncoding('utf8');

        const parts = [];

        connection.on('data', data => {
          const nullIndex = data.indexOf('\u0000');
          if (nullIndex === -1) {
            parts.push(data);
          } else {
            parts.push(data.substring(0, nullIndex));
            this.handleData(connection, parts.join(''));
          }
        });
      });

      server.listen(socketPath, () => resolve(server));
    });
  }

  handleData(connection, data) {
    let query;
    try {
      query = JSON.parse(data);
    } catch (e) {
      this.emitter.emit('did-cancel');
    }

    Promise.resolve(this.promptForInput(query)).then(answer => connection.end(JSON.stringify(answer), 'utf-8')).catch(() => this.emitter.emit('did-cancel', { handlerPid: query.pid }));
  }

  onDidCancel(cb) {
    return this.emitter.on('did-cancel', cb);
  }

  terminate() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      yield new Promise(function (resolve) {
        return _this2.server.close(resolve);
      });
      yield (0, _helpers.deleteFileOrFolder)(_this2.tmpFolderPath);
      _this2.emitter.dispose();
    })();
  }
};
exports.default = GitPromptServer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,