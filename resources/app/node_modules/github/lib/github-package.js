'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _desc, _value, _class;

var _eventKit = require('event-kit');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _coreDecorators = require('core-decorators');

var _helpers = require('./helpers');

var _workdirCache = require('./models/workdir-cache');

var _workdirCache2 = _interopRequireDefault(_workdirCache);

var _workdirContext = require('./models/workdir-context');

var _workdirContext2 = _interopRequireDefault(_workdirContext);

var _workdirContextPool = require('./models/workdir-context-pool');

var _workdirContextPool2 = _interopRequireDefault(_workdirContextPool);

var _repository = require('./models/repository');

var _repository2 = _interopRequireDefault(_repository);

var _styleCalculator = require('./models/style-calculator');

var _styleCalculator2 = _interopRequireDefault(_styleCalculator);

var _rootController = require('./controllers/root-controller');

var _rootController2 = _interopRequireDefault(_rootController);

var _issueishPaneItem = require('./atom-items/issueish-pane-item');

var _issueishPaneItem2 = _interopRequireDefault(_issueishPaneItem);

var _stubItem = require('./atom-items/stub-item');

var _stubItem2 = _interopRequireDefault(_stubItem);

var _switchboard = require('./switchboard');

var _switchboard2 = _interopRequireDefault(_switchboard);

var _yardstick = require('./yardstick');

var _yardstick2 = _interopRequireDefault(_yardstick);

var _gitTimingsView = require('./views/git-timings-view');

var _gitTimingsView2 = _interopRequireDefault(_gitTimingsView);

var _contextMenuInterceptor = require('./context-menu-interceptor');

var _contextMenuInterceptor2 = _interopRequireDefault(_contextMenuInterceptor);

var _asyncQueue = require('./async-queue');

var _asyncQueue2 = _interopRequireDefault(_asyncQueue);

var _workerManager = require('./worker-manager');

var _workerManager2 = _interopRequireDefault(_workerManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

const defaultState = {};

let GithubPackage = (_class = class GithubPackage {
  constructor(workspace, project, commandRegistry, notificationManager, tooltips, styles, config, confirm, configDirPath, getLoadSettings) {
    this.workspace = workspace;
    this.project = project;
    this.commandRegistry = commandRegistry;
    this.notificationManager = notificationManager;
    this.tooltips = tooltips;
    this.config = config;
    this.styles = styles;
    this.configPath = _path2.default.join(configDirPath, 'github.cson');

    this.styleCalculator = new _styleCalculator2.default(this.styles, this.config);
    this.confirm = confirm;
    this.useLegacyPanels = !this.workspace.getLeftDock || this.config.get('github.useLegacyPanels');
    this.startOpen = false;
    this.activated = false;

    const criteria = {
      projectPathCount: this.project.getPaths().length,
      initPathCount: (getLoadSettings().initialPaths || []).length
    };

    this.activeContextQueue = new _asyncQueue2.default();
    this.guessedContext = _workdirContext2.default.guess(criteria);
    this.activeContext = this.guessedContext;
    this.workdirCache = new _workdirCache2.default();
    this.contextPool = new _workdirContextPool2.default({
      window,
      workspace,
      promptCallback: query => this.controller.promptForCredentials(query)
    });

    this.switchboard = new _switchboard2.default();

    // Handle events from all resident contexts.
    this.subscriptions = new _eventKit.CompositeDisposable(this.contextPool.onDidChangeWorkdirOrHead(context => {
      this.refreshAtomGitRepository(context.getWorkingDirectory());
    }), this.contextPool.onDidUpdateRepository(context => {
      this.switchboard.didUpdateRepository(context.getRepository());
    }), this.contextPool.onDidDestroyRepository(context => {
      if (context === this.activeContext) {
        this.setActiveContext(_workdirContext2.default.absent());
      }
    }), _contextMenuInterceptor2.default);

    this.setupYardstick();
  }

  setupYardstick() {
    const stagingSeries = ['stageLine', 'stageHunk', 'unstageLine', 'unstageHunk'];

    this.subscriptions.add(
    // Staging and unstaging operations
    this.switchboard.onDidBeginStageOperation(payload => {
      if (payload.stage && payload.line) {
        _yardstick2.default.begin('stageLine');
      } else if (payload.stage && payload.hunk) {
        _yardstick2.default.begin('stageHunk');
      } else if (payload.unstage && payload.line) {
        _yardstick2.default.begin('unstageLine');
      } else if (payload.unstage && payload.hunk) {
        _yardstick2.default.begin('unstageHunk');
      }
    }), this.switchboard.onDidUpdateRepository(() => {
      _yardstick2.default.mark(stagingSeries, 'update-repository');
    }), this.switchboard.onDidFinishRender(context => {
      if (context === 'RootController.showFilePatchForPath') {
        _yardstick2.default.finish(stagingSeries);
      }
    }),

    // Active context changes
    this.switchboard.onDidScheduleActiveContextUpdate(() => {
      _yardstick2.default.begin('activeContextChange');
    }), this.switchboard.onDidBeginActiveContextUpdate(() => {
      _yardstick2.default.mark('activeContextChange', 'queue-wait');
    }), this.switchboard.onDidFinishContextChangeRender(() => {
      _yardstick2.default.mark('activeContextChange', 'render');
    }), this.switchboard.onDidFinishActiveContextUpdate(() => {
      _yardstick2.default.finish('activeContextChange');
    }));
  }

  activate() {
    var _this = this;

    let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return _asyncToGenerator(function* () {
      _this.savedState = _extends({}, defaultState, state);

      const firstRun = !(yield (0, _helpers.fileExists)(_this.configPath));
      _this.startOpen = firstRun && !_this.config.get('welcome.showOnStartup');
      if (firstRun) {
        yield (0, _helpers.writeFile)(_this.configPath, '# Store non-visible GitHub package state.\n');
      }

      _this.subscriptions.add(atom.config.onDidChange('github.useLegacyPanels', function (_ref) {
        let newValue = _ref.newValue;

        if (newValue) {
          _this.useLegacyPanels = true;
        } else {
          // Only use new docks if they exist
          _this.useLegacyPanels = !_this.workspace.getLeftDock;
        }

        _this.rerender();
      }), _this.project.onDidChangePaths(_this.scheduleActiveContextUpdate), _this.workspace.getCenter().onDidChangeActivePaneItem(_this.scheduleActiveContextUpdate), _this.styleCalculator.startWatching('github-package-styles', ['editor.fontSize', 'editor.fontFamily', 'editor.lineHeight'], function (config) {
        return `
          .github-FilePatchView {
            font-size: 1.1em;
          }

          .github-HunkView-line {
            font-size: ${config.get('editor.fontSize')}px;
            font-family: ${config.get('editor.fontFamily')};
            line-height: ${config.get('editor.lineHeight')};
          }
        `;
      }), _this.workspace.addOpener(function (uri) {
        if (uri === 'atom-github://debug/timings') {
          return _this.createGitTimingsView();
        } else {
          return null;
        }
      }), _this.workspace.addOpener(_issueishPaneItem2.default.opener));

      _this.activated = true;
      _this.scheduleActiveContextUpdate(_this.savedState);
      _this.rerender();
    })();
  }

  serialize() {
    const activeRepository = this.getActiveRepository();
    const activeRepositoryPath = activeRepository ? activeRepository.getWorkingDirectoryPath() : null;

    return {
      activeRepositoryPath,
      gitController: this.controller.serialize(),
      firstRun: false
    };
  }

  rerender(callback) {
    if (this.workspace.isDestroyed()) {
      return;
    }

    if (!this.activated) {
      return;
    }

    if (!this.element) {
      this.element = document.createElement('div');
      this.subscriptions.add(new _eventKit.Disposable(() => {
        _reactDom2.default.unmountComponentAtNode(this.element);
        delete this.element;
      }));
    }

    _reactDom2.default.render(_react2.default.createElement(_rootController2.default, {
      ref: c => {
        this.controller = c;
      },
      workspace: this.workspace,
      commandRegistry: this.commandRegistry,
      notificationManager: this.notificationManager,
      tooltips: this.tooltips,
      config: this.config,
      confirm: this.confirm,
      activeWorkingDirectory: this.getActiveWorkdir(),
      repository: this.getActiveRepository(),
      resolutionProgress: this.getActiveResolutionProgress(),
      statusBar: this.statusBar,
      savedState: this.savedState.gitController,
      createRepositoryForProjectPath: this.createRepositoryForProjectPath,
      cloneRepositoryForProjectPath: this.cloneRepositoryForProjectPath,
      switchboard: this.switchboard,
      useLegacyPanels: this.useLegacyPanels,
      startOpen: this.startOpen
    }), this.element, callback);
  }

  deactivate() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      _this2.subscriptions.dispose();
      _this2.contextPool.clear();
      _workerManager2.default.reset(true);
      if (_this2.guessedContext) {
        _this2.guessedContext.destroy();
        _this2.guessedContext = null;
      }
      yield _yardstick2.default.flush();
    })();
  }

  consumeStatusBar(statusBar) {
    this.statusBar = statusBar;
    this.rerender();
  }

  createGitTimingsView() {
    return _gitTimingsView2.default.createPaneItem();
  }

  createIssueishPaneItem(_ref2) {
    let uri = _ref2.uri;

    return _issueishPaneItem2.default.opener(uri);
  }

  createGitTabControllerStub() {
    return _stubItem2.default.create('git-tab-controller', {
      title: 'Git'
    });
  }

  createGithubTabControllerStub() {
    return _stubItem2.default.create('github-tab-controller', {
      title: 'GitHub (preview)'
    });
  }

  createRepositoryForProjectPath(projectPath) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      yield (0, _helpers.mkdirs)(projectPath);

      const repository = _this3.contextPool.add(projectPath).getRepository();
      yield repository.init();
      _this3.workdirCache.invalidate(projectPath);

      if (!_this3.project.contains(projectPath)) {
        _this3.project.addPath(projectPath);
      }

      yield _this3.scheduleActiveContextUpdate();
    })();
  }

  cloneRepositoryForProjectPath(remoteUrl, projectPath) {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      const context = _this4.contextPool.getContext(projectPath);
      const repository = context.isPresent() ? context.getRepository() : new _repository2.default(projectPath);

      yield repository.clone(remoteUrl);
      _this4.workdirCache.invalidate(projectPath);

      _this4.project.addPath(projectPath);

      yield _this4.scheduleActiveContextUpdate();
    })();
  }

  getActiveWorkdir() {
    return this.activeContext.getWorkingDirectory();
  }

  getActiveRepository() {
    return this.activeContext.getRepository();
  }

  getActiveResolutionProgress() {
    return this.activeContext.getResolutionProgress();
  }

  getContextPool() {
    return this.contextPool;
  }

  getSwitchboard() {
    return this.switchboard;
  }

  scheduleActiveContextUpdate() {
    var _this5 = this;

    let savedState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return _asyncToGenerator(function* () {
      _this5.switchboard.didScheduleActiveContextUpdate();
      yield _this5.activeContextQueue.push(_this5.updateActiveContext.bind(_this5, savedState), { parallel: false });
    })();
  }

  /**
   * Derive the git working directory context that should be used for the package's git operations based on the current
   * state of the Atom workspace. In priority, this prefers:
   *
   * - A git working directory that contains the active pane item in the workspace's center.
   * - A git working directory corresponding to a single Project.
   * - When initially activating the package, the working directory that was active when the package was last
   *   serialized.
   * - The current context, unchanged, which may be a `NullWorkdirContext`.
   *
   * First updates the pool of resident contexts to match all git working directories that correspond to open
   * projects and pane items.
   */
  getNextContext(savedState) {
    var _this6 = this;

    return _asyncToGenerator(function* () {
      const workdirs = new Set((yield Promise.all(_this6.project.getPaths().map((() => {
        var _ref3 = _asyncToGenerator(function* (projectPath) {
          const workdir = yield _this6.workdirCache.find(projectPath);
          return workdir || projectPath;
        });

        return function (_x3) {
          return _ref3.apply(this, arguments);
        };
      })()))));

      const fromPaneItem = (() => {
        var _ref4 = _asyncToGenerator(function* (maybeItem) {
          const itemPath = pathForPaneItem(maybeItem);

          if (!itemPath) {
            return {};
          }

          const itemWorkdir = yield _this6.workdirCache.find(itemPath);

          if (itemWorkdir && !_this6.project.contains(itemPath)) {
            workdirs.add(itemWorkdir);
          }

          return { itemPath, itemWorkdir };
        });

        return function fromPaneItem(_x4) {
          return _ref4.apply(this, arguments);
        };
      })();

      const active = yield fromPaneItem(_this6.workspace.getCenter().getActivePaneItem());

      _this6.contextPool.set(workdirs, savedState);

      if (active.itemPath) {
        // Prefer an active item
        return _this6.contextPool.getContext(active.itemWorkdir || active.itemPath);
      }

      if (_this6.project.getPaths().length === 1) {
        // Single project
        const projectPath = _this6.project.getPaths()[0];
        const activeWorkingDir = yield _this6.workdirCache.find(projectPath);
        return _this6.contextPool.getContext(activeWorkingDir || projectPath);
      }

      if (_this6.project.getPaths().length === 0 && !_this6.activeContext.getRepository().isUndetermined()) {
        // No projects. Revert to the absent context unless we've guessed that more projects are on the way.
        return _workdirContext2.default.absent();
      }

      // Restore models from saved state. Will return a NullWorkdirContext if this path is not presently
      // resident in the pool.
      const savedWorkingDir = savedState.activeRepositoryPath;
      if (savedWorkingDir) {
        return _this6.contextPool.getContext(savedWorkingDir);
      }

      return _this6.activeContext;
    })();
  }

  setActiveContext(nextActiveContext) {
    if (nextActiveContext !== this.activeContext) {
      if (this.activeContext === this.guessedContext) {
        this.guessedContext.destroy();
        this.guessedContext = null;
      }
      this.activeContext = nextActiveContext;
      this.rerender(() => {
        this.switchboard.didFinishContextChangeRender();
        this.switchboard.didFinishActiveContextUpdate();
      });
    } else {
      this.switchboard.didFinishActiveContextUpdate();
    }
  }

  updateActiveContext() {
    var _this7 = this;

    let savedState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return _asyncToGenerator(function* () {
      if (_this7.workspace.isDestroyed()) {
        return;
      }

      _this7.switchboard.didBeginActiveContextUpdate();

      const nextActiveContext = yield _this7.getNextContext(savedState);
      _this7.setActiveContext(nextActiveContext);
    })();
  }

  refreshAtomGitRepository(workdir) {
    const atomGitRepo = this.project.getRepositories().find(repo => {
      return repo && _path2.default.normalize(repo.getWorkingDirectory()) === workdir;
    });
    return atomGitRepo ? atomGitRepo.refreshStatus() : Promise.resolve();
  }
}, (_applyDecoratedDescriptor(_class.prototype, 'rerender', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'rerender'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'consumeStatusBar', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'consumeStatusBar'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'createGitTimingsView', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'createGitTimingsView'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'createIssueishPaneItem', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'createIssueishPaneItem'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'createGitTabControllerStub', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'createGitTabControllerStub'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'createGithubTabControllerStub', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'createGithubTabControllerStub'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'createRepositoryForProjectPath', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'createRepositoryForProjectPath'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'cloneRepositoryForProjectPath', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'cloneRepositoryForProjectPath'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'scheduleActiveContextUpdate', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'scheduleActiveContextUpdate'), _class.prototype)), _class);
exports.default = GithubPackage;


function pathForPaneItem(paneItem) {
  if (!paneItem) {
    return null;
  }

  // Likely GitHub package provided pane item
  if (typeof paneItem.getWorkingDirectory === 'function') {
    return paneItem.getWorkingDirectory();
  }

  // TextEditor-like
  if (typeof paneItem.getPath === 'function') {
    return paneItem.getPath();
  }

  // Oh well
  return null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,