'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _desc, _value, _class, _class2, _temp, _desc2, _value2, _class3;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _atom = require('atom');

var _eventKit = require('event-kit');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _coreDecorators = require('core-decorators');

var _etchWrapper = require('../views/etch-wrapper');

var _etchWrapper2 = _interopRequireDefault(_etchWrapper);

var _statusBar = require('../views/status-bar');

var _statusBar2 = _interopRequireDefault(_statusBar);

var _panel = require('../views/panel');

var _panel2 = _interopRequireDefault(_panel);

var _paneItem = require('../views/pane-item');

var _paneItem2 = _interopRequireDefault(_paneItem);

var _dockItem = require('../views/dock-item');

var _dockItem2 = _interopRequireDefault(_dockItem);

var _resizer = require('../views/resizer');

var _resizer2 = _interopRequireDefault(_resizer);

var _tabs = require('../views/tabs');

var _tabs2 = _interopRequireDefault(_tabs);

var _cloneDialog = require('../views/clone-dialog');

var _cloneDialog2 = _interopRequireDefault(_cloneDialog);

var _openIssueishDialog = require('../views/open-issueish-dialog');

var _openIssueishDialog2 = _interopRequireDefault(_openIssueishDialog);

var _initDialog = require('../views/init-dialog');

var _initDialog2 = _interopRequireDefault(_initDialog);

var _credentialDialog = require('../views/credential-dialog');

var _credentialDialog2 = _interopRequireDefault(_credentialDialog);

var _commands = require('../views/commands');

var _commands2 = _interopRequireDefault(_commands);

var _githubTabController = require('./github-tab-controller');

var _githubTabController2 = _interopRequireDefault(_githubTabController);

var _filePatchController = require('./file-patch-controller');

var _filePatchController2 = _interopRequireDefault(_filePatchController);

var _gitTabController = require('./git-tab-controller');

var _gitTabController2 = _interopRequireDefault(_gitTabController);

var _statusBarTileController = require('./status-bar-tile-controller');

var _statusBarTileController2 = _interopRequireDefault(_statusBarTileController);

var _repositoryConflictController = require('./repository-conflict-controller');

var _repositoryConflictController2 = _interopRequireDefault(_repositoryConflictController);

var _modelObserver = require('../models/model-observer');

var _modelObserver2 = _interopRequireDefault(_modelObserver);

var _modelStateRegistry = require('../models/model-state-registry');

var _modelStateRegistry2 = _interopRequireDefault(_modelStateRegistry);

var _conflict = require('../models/conflicts/conflict');

var _conflict2 = _interopRequireDefault(_conflict);

var _switchboard = require('../switchboard');

var _switchboard2 = _interopRequireDefault(_switchboard);

var _helpers = require('../helpers');

var _gitShellOutStrategy = require('../git-shell-out-strategy');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

const nullFilePatchState = {
  filePath: null,
  filePatch: null,
  stagingStatus: 'unstaged',
  partiallyStaged: false
};

let RootController = (_class = (_temp = _class2 = class RootController extends _react2.default.Component {

  serialize() {
    return {
      gitTabActive: this.state.gitTabActive,
      githubTabActive: this.state.githubTabActive,
      panelSize: this.state.panelSize,
      activeTab: this.state.activeTab
    };
  }

  constructor(props, context) {
    var _this;

    _this = super(props, context);

    const renderGitTab = props.startOpen || (props.savedState.gitTabActive === undefined ? !this.props.useLegacyPanels : this.props.savedState.gitTabActive);
    const renderGitHubTab = props.startOpen || (props.savedState.githubTabActive === undefined ? !this.props.useLegacyPanels : this.props.savedState.githubTabActive);

    this.state = _extends({}, nullFilePatchState, {
      amending: false,
      gitTabActive: renderGitTab,
      githubTabActive: renderGitHubTab,
      panelSize: props.savedState.panelSize || 400,
      activeTab: props.savedState.activeTab || 0,
      cloneDialogActive: false,
      cloneDialogInProgress: false,
      initDialogActive: false,
      credentialDialogQuery: null
    });

    this.repositoryStateRegistry = new _modelStateRegistry2.default(RootController, {
      save: () => {
        return { amending: this.state.amending };
      },
      restore: function () {
        let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _this.setState({ amending: !!state.amending });
      }
    });

    this.subscriptions = new _eventKit.CompositeDisposable();

    this.repositoryObserver = new _modelObserver2.default({
      didUpdate: () => this.onRepoRefresh()
    });
    this.repositoryObserver.setActiveModel(props.repository);
    this.subscriptions.add(new _eventKit.Disposable(() => this.repositoryObserver.destroy()));

    this.gitTabTracker = new TabTracker('git', {
      useLegacyPanels: this.props.useLegacyPanels,
      getState: () => this.state.gitTabActive,
      setState: (value, _ref, callback) => {
        let activateTab = _ref.activateTab;

        const newState = { gitTabActive: value };
        if (activateTab) {
          newState.activeTab = 0;
        }
        this.setState(newState, callback);
      },
      getController: () => this.gitTabController,
      getDockItem: () => this.gitDockItem,
      getWorkspace: () => this.props.workspace
    });

    this.githubTabTracker = new TabTracker('github', {
      useLegacyPanels: this.props.useLegacyPanels,
      getState: () => this.state.githubTabActive,
      setState: (value, _ref2, callback) => {
        let activateTab = _ref2.activateTab;

        const newState = { githubTabActive: value };
        if (activateTab) {
          newState.activeTab = 1;
        }
        this.setState(newState, callback);
      },
      getController: () => this.githubTabController,
      getDockItem: () => this.githubDockItem,
      getWorkspace: () => this.props.workspace
    });
  }

  componentWillMount() {
    this.repositoryStateRegistry.setModel(this.props.repository);
  }

  componentWillReceiveProps(newProps) {
    this.repositoryObserver.setActiveModel(newProps.repository);
    this.repositoryStateRegistry.setModel(newProps.repository);

    this.gitTabTracker.useLegacyPanels = newProps.useLegacyPanels;
    this.githubTabTracker.useLegacyPanels = newProps.useLegacyPanels;
  }

  render() {
    return _react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(
        _commands2.default,
        { registry: this.props.commandRegistry, target: 'atom-workspace' },
        _react2.default.createElement(_commands.Command, { command: 'github:show-waterfall-diagnostics', callback: this.showWaterfallDiagnostics }),
        _react2.default.createElement(_commands.Command, { command: 'github:open-issue-or-pull-request', callback: this.showOpenIssueishDialog }),
        _react2.default.createElement(_commands.Command, { command: 'github:toggle-git-tab', callback: this.gitTabTracker.toggle }),
        _react2.default.createElement(_commands.Command, { command: 'github:toggle-git-tab-focus', callback: this.gitTabTracker.toggleFocus }),
        _react2.default.createElement(_commands.Command, { command: 'github:toggle-github-tab', callback: this.githubTabTracker.toggle }),
        _react2.default.createElement(_commands.Command, { command: 'github:toggle-github-tab-focus', callback: this.githubTabTracker.toggleFocus }),
        _react2.default.createElement(_commands.Command, { command: 'github:clone', callback: this.openCloneDialog }),
        _react2.default.createElement(_commands.Command, {
          command: 'github:view-unstaged-changes-for-current-file',
          callback: this.viewUnstagedChangesForCurrentFile
        }),
        _react2.default.createElement(_commands.Command, {
          command: 'github:view-staged-changes-for-current-file',
          callback: this.viewStagedChangesForCurrentFile
        })
      ),
      this.renderStatusBarTile(),
      this.renderPanels(),
      this.state.filePath && this.state.filePatch ? this.renderFilePatchController() : null,
      this.renderInitDialog(),
      this.renderCloneDialog(),
      this.renderCredentialDialog(),
      this.renderOpenIssueishDialog(),
      this.renderRepositoryConflictController()
    );
  }

  renderStatusBarTile() {
    return _react2.default.createElement(
      _statusBar2.default,
      { statusBar: this.props.statusBar, onConsumeStatusBar: sb => this.onConsumeStatusBar(sb) },
      _react2.default.createElement(_statusBarTileController2.default, {
        workspace: this.props.workspace,
        repository: this.props.repository,
        commandRegistry: this.props.commandRegistry,
        notificationManager: this.props.notificationManager,
        tooltips: this.props.tooltips,
        confirm: this.props.confirm,
        toggleGitTab: this.gitTabTracker.toggle,
        ensureGitTabVisible: this.gitTabTracker.ensureVisible
      })
    );
  }

  renderPanels() {
    if (!this.props.useLegacyPanels) {
      const gitTab = this.state.gitTabActive && _react2.default.createElement(
        _dockItem2.default,
        {
          ref: c => {
            this.gitDockItem = c;
          },
          workspace: this.props.workspace,
          getItem: (_ref3) => {
            let subtree = _ref3.subtree;
            return subtree.getWrappedComponent();
          },
          onDidCloseItem: () => this.setState({ gitTabActive: false }),
          stubItemSelector: 'git-tab-controller',
          activate: this.props.startOpen },
        _react2.default.createElement(
          _etchWrapper2.default,
          {
            ref: c => {
              this.gitTabController = c;
            },
            className: 'github-PanelEtchWrapper',
            reattachDomNode: false },
          _react2.default.createElement(_gitTabController2.default, {
            workspace: this.props.workspace,
            commandRegistry: this.props.commandRegistry,
            notificationManager: this.props.notificationManager,
            repository: this.props.repository,
            initializeRepo: this.initializeRepo,
            resolutionProgress: this.props.resolutionProgress,
            isAmending: this.state.amending,
            didSelectFilePath: this.showFilePatchForPath,
            didDiveIntoFilePath: this.diveIntoFilePatchForPath,
            didSelectMergeConflictFile: this.showMergeConflictFileForPath,
            didDiveIntoMergeConflictPath: this.diveIntoMergeConflictFileForPath,
            showFilePatchForPath: this.showFilePatchForPath,
            didChangeAmending: this.didChangeAmending,
            focusFilePatchView: this.focusFilePatchView,
            ensureGitTab: this.gitTabTracker.ensureVisible,
            openFiles: this.openFiles,
            discardWorkDirChangesForPaths: this.discardWorkDirChangesForPaths,
            undoLastDiscard: this.undoLastDiscard,
            refreshResolutionProgress: this.refreshResolutionProgress
          })
        )
      );

      const githubTab = this.state.githubTabActive && _react2.default.createElement(
        _dockItem2.default,
        {
          ref: c => {
            this.githubDockItem = c;
          },
          workspace: this.props.workspace,
          onDidCloseItem: () => this.setState({ githubTabActive: false }),
          stubItemSelector: 'github-tab-controller' },
        _react2.default.createElement(_githubTabController2.default, {
          ref: c => {
            this.githubTabController = c;
          },
          repository: this.props.repository
        })
      );

      return _react2.default.createElement(
        'div',
        null,
        gitTab,
        githubTab
      );
    }

    return _react2.default.createElement(
      _panel2.default,
      {
        workspace: this.props.workspace,
        location: 'right',
        onDidClosePanel: () => this.setState({ gitTabActive: false, githubTabActive: false }),
        visible: !!this.state.gitTabActive || !!this.state.githubTabActive },
      _react2.default.createElement(
        _resizer2.default,
        {
          size: this.state.panelSize,
          onChange: this.handlePanelResize,
          className: 'github-PanelResizer' },
        _react2.default.createElement(
          _tabs2.default,
          { activeIndex: this.state.activeTab, onChange: this.handleChangeTab, className: 'sidebar-tabs' },
          _react2.default.createElement(
            _tabs2.default.Panel,
            { title: 'Git' },
            _react2.default.createElement(
              _etchWrapper2.default,
              {
                ref: c => {
                  this.gitTabController = c;
                },
                className: 'github-PanelEtchWrapper',
                reattachDomNode: false },
              _react2.default.createElement(_gitTabController2.default, {
                workspace: this.props.workspace,
                commandRegistry: this.props.commandRegistry,
                notificationManager: this.props.notificationManager,
                repository: this.props.repository,
                initializeRepo: this.initializeRepo,
                resolutionProgress: this.props.resolutionProgress,
                isAmending: this.state.amending,
                didSelectFilePath: this.showFilePatchForPath,
                didDiveIntoFilePath: this.diveIntoFilePatchForPath,
                didSelectMergeConflictFile: this.showMergeConflictFileForPath,
                didDiveIntoMergeConflictPath: this.diveIntoMergeConflictFileForPath,
                didChangeAmending: this.didChangeAmending,
                focusFilePatchView: this.focusFilePatchView,
                ensureGitTab: this.gitTabTracker.ensureVisible,
                openFiles: this.openFiles,
                discardWorkDirChangesForPaths: this.discardWorkDirChangesForPaths,
                undoLastDiscard: this.undoLastDiscard,
                refreshResolutionProgress: this.refreshResolutionProgress
              })
            )
          ),
          _react2.default.createElement(
            _tabs2.default.Panel,
            { title: 'GitHub (preview)' },
            _react2.default.createElement(_githubTabController2.default, {
              ref: c => {
                this.githubTabController = c;
              },
              repository: this.props.repository
            })
          )
        )
      )
    );
  }

  renderFilePatchController() {
    return _react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(
        _commands2.default,
        { registry: this.props.commandRegistry, target: 'atom-workspace' },
        _react2.default.createElement(_commands.Command, { command: 'github:focus-diff-view', callback: this.focusFilePatchView })
      ),
      _react2.default.createElement(
        _paneItem2.default,
        {
          workspace: this.props.workspace,
          ref: c => {
            this.filePatchControllerPane = c;
          },
          onDidCloseItem: () => {
            this.setState(_extends({}, nullFilePatchState));
          } },
        _react2.default.createElement(_filePatchController2.default, {
          ref: c => {
            this.filePatchController = c;
          },
          activeWorkingDirectory: this.props.activeWorkingDirectory,
          repository: this.props.repository,
          commandRegistry: this.props.commandRegistry,
          tooltips: this.props.tooltips,
          filePatch: this.state.filePatch,
          stagingStatus: this.state.stagingStatus,
          isAmending: this.state.amending,
          isPartiallyStaged: this.state.partiallyStaged,
          onRepoRefresh: this.onRepoRefresh,
          didSurfaceFile: this.surfaceFromFileAtPath,
          didDiveIntoFilePath: this.diveIntoFilePatchForPath,
          quietlySelectItem: this.quietlySelectItem,
          openFiles: this.openFiles,
          discardLines: this.discardLines,
          undoLastDiscard: this.undoLastDiscard,
          switchboard: this.props.switchboard
        })
      )
    );
  }

  renderInitDialog() {
    if (!this.state.initDialogActive) {
      return null;
    }

    return _react2.default.createElement(
      _panel2.default,
      { workspace: this.props.workspace, location: 'modal' },
      _react2.default.createElement(_initDialog2.default, {
        config: this.props.config,
        commandRegistry: this.props.commandRegistry,
        didAccept: this.acceptInit,
        didCancel: this.cancelInit
      })
    );
  }

  renderCloneDialog() {
    if (!this.state.cloneDialogActive) {
      return null;
    }

    return _react2.default.createElement(
      _panel2.default,
      { workspace: this.props.workspace, location: 'modal' },
      _react2.default.createElement(_cloneDialog2.default, {
        config: this.props.config,
        commandRegistry: this.props.commandRegistry,
        didAccept: this.acceptClone,
        didCancel: this.cancelClone,
        inProgress: this.state.cloneDialogInProgress
      })
    );
  }

  renderOpenIssueishDialog() {
    if (!this.state.openIssueishDialogActive) {
      return null;
    }

    return _react2.default.createElement(
      _panel2.default,
      { workspace: this.props.workspace, location: 'modal' },
      _react2.default.createElement(_openIssueishDialog2.default, {
        commandRegistry: this.props.commandRegistry,
        didAccept: this.acceptOpenIssueish,
        didCancel: this.cancelOpenIssueish
      })
    );
  }

  renderCredentialDialog() {
    if (this.state.credentialDialogQuery === null) {
      return null;
    }

    return _react2.default.createElement(
      _panel2.default,
      { workspace: this.props.workspace, location: 'modal' },
      _react2.default.createElement(_credentialDialog2.default, _extends({ commandRegistry: this.props.commandRegistry }, this.state.credentialDialogQuery))
    );
  }

  renderRepositoryConflictController() {
    if (!this.props.repository) {
      return null;
    }

    return _react2.default.createElement(_repositoryConflictController2.default, {
      workspace: this.props.workspace,
      repository: this.props.repository,
      resolutionProgress: this.props.resolutionProgress,
      refreshResolutionProgress: this.refreshResolutionProgress,
      commandRegistry: this.props.commandRegistry
    });
  }

  componentWillUnmount() {
    this.repositoryStateRegistry.save();
    this.subscriptions.dispose();
  }

  onConsumeStatusBar(statusBar) {
    if (statusBar.disableGitInfoTile) {
      statusBar.disableGitInfoTile();
    }
  }

  initializeRepo() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      if (_this2.props.activeWorkingDirectory) {
        yield _this2.acceptInit(_this2.props.activeWorkingDirectory);
        return;
      }

      _this2.setState({ initDialogActive: true });
    })();
  }

  showOpenIssueishDialog() {
    this.setState({ openIssueishDialogActive: true });
  }

  showWaterfallDiagnostics() {
    this.props.workspace.open('atom-github://debug/timings');
  }

  acceptClone(remoteUrl, projectPath) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      _this3.setState({ cloneDialogInProgress: true });
      try {
        yield _this3.props.cloneRepositoryForProjectPath(remoteUrl, projectPath);
      } catch (e) {
        _this3.props.notificationManager.addError(`Unable to clone ${remoteUrl}`, { detail: e.stdErr, dismissable: true });
      } finally {
        _this3.setState({ cloneDialogInProgress: false, cloneDialogActive: false });
      }
    })();
  }

  cancelClone() {
    this.setState({ cloneDialogActive: false });
  }

  acceptInit(projectPath) {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      try {
        yield _this4.props.createRepositoryForProjectPath(projectPath);
      } catch (e) {
        _this4.props.notificationManager.addError(`Unable to initialize git repository in ${projectPath}`, { detail: e.stdErr, dismissable: true });
      } finally {
        _this4.setState({ initDialogActive: false });
      }
    })();
  }

  cancelInit() {
    this.setState({ initDialogActive: false });
  }

  acceptOpenIssueish(_ref4) {
    let repoOwner = _ref4.repoOwner,
        repoName = _ref4.repoName,
        issueishNumber = _ref4.issueishNumber;

    const uri = `atom-github://issueish/https://api.github.com/${repoOwner}/${repoName}/${issueishNumber}`;
    this.setState({ openIssueishDialogActive: false });
    this.props.workspace.open(uri);
  }

  cancelOpenIssueish() {
    this.setState({ openIssueishDialogActive: false });
  }

  showFilePatchForPath(filePath, stagingStatus) {
    var _this5 = this;

    var _ref5 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    let activate = _ref5.activate,
        amending = _ref5.amending,
        lineNumber = _ref5.lineNumber;
    return _asyncToGenerator(function* () {
      if (!filePath) {
        return null;
      }
      const repository = _this5.props.repository;
      if (!repository) {
        return null;
      }

      const staged = stagingStatus === 'staged';
      const filePatch = yield repository.getFilePatchForPath(filePath, { staged, amending: staged && amending });
      const partiallyStaged = yield repository.isPartiallyStaged(filePath);
      return new Promise(function (resolve) {
        if (filePatch) {
          _this5.setState({ filePath, filePatch, stagingStatus, partiallyStaged }, function () {
            // TODO: can be better done w/ a prop?
            if (activate && _this5.filePatchControllerPane) {
              _this5.filePatchControllerPane.activate();
              if (lineNumber) {
                _this5.filePatchController.goToDiffLine(lineNumber);
              }
            }
            _this5.props.switchboard.didFinishRender('RootController.showFilePatchForPath');
            resolve();
          });
        } else {
          _this5.setState(_extends({}, nullFilePatchState), function () {
            _this5.props.switchboard.didFinishRender('RootController.showFilePatchForPath');
            resolve();
          });
        }
      });
    })();
  }

  diveIntoFilePatchForPath(filePath, stagingStatus) {
    var _this6 = this;

    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    return _asyncToGenerator(function* () {
      yield _this6.showFilePatchForPath(filePath, stagingStatus, _extends({}, options, { activate: true }));
      _this6.focusFilePatchView();
    })();
  }

  surfaceFromFileAtPath(filePath, stagingStatus) {
    if (this.gitTabController) {
      this.gitTabController.getWrappedComponent().focusAndSelectStagingItem(filePath, stagingStatus);
    }
  }

  onRepoRefresh() {
    return this.showFilePatchForPath(this.state.filePath, this.state.stagingStatus, { amending: this.state.amending });
  }

  showMergeConflictFileForPath(relativeFilePath) {
    var _this7 = this;

    var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    let focus = _ref6.focus;
    return _asyncToGenerator(function* () {
      const absolutePath = _path2.default.join(_this7.props.repository.getWorkingDirectoryPath(), relativeFilePath);
      if (yield new _atom.File(absolutePath).exists()) {
        return _this7.props.workspace.open(absolutePath, { activatePane: Boolean(focus), pending: true });
      } else {
        _this7.props.notificationManager.addInfo('File has been deleted.');
        return null;
      }
    })();
  }

  diveIntoMergeConflictFileForPath(relativeFilePath) {
    return this.showMergeConflictFileForPath(relativeFilePath, { focus: true });
  }

  didChangeAmending(isAmending) {
    this.setState({ amending: isAmending });
    return this.showFilePatchForPath(this.state.filePath, this.state.stagingStatus, { amending: isAmending });
  }

  openCloneDialog() {
    this.setState({ cloneDialogActive: true });
  }

  handlePanelResize(size) {
    this.setState({
      panelSize: Math.max(size, 300)
    });
  }

  handleChangeTab(activeTab) {
    this.setState({ activeTab });
  }

  quietlySelectItem(filePath, stagingStatus) {
    if (this.gitTabController) {
      return this.gitTabController.getWrappedComponent().quietlySelectItem(filePath, stagingStatus);
    } else {
      return null;
    }
  }

  focusFilePatchView() {
    const item = this.filePatchControllerPane.getPaneItem();
    const viewElement = item.getElement().querySelector('[tabindex]');
    viewElement.focus();
  }

  viewChangesForCurrentFile(stagingStatus) {
    const editor = this.props.workspace.getActiveTextEditor();
    const absFilePath = editor.getPath();
    const repoPath = this.props.repository.getWorkingDirectoryPath();
    if (absFilePath.startsWith(repoPath)) {
      const filePath = absFilePath.slice(repoPath.length + 1);
      this.quietlySelectItem(filePath, stagingStatus);
      const splitDirection = this.props.config.get('github.viewChangesForCurrentFileDiffPaneSplitDirection');
      const pane = atom.workspace.getActivePane();
      if (splitDirection === 'right') {
        pane.splitRight();
      } else if (splitDirection === 'down') {
        pane.splitDown();
      }
      return this.diveIntoFilePatchForPath(filePath, stagingStatus, {
        lineNumber: editor.getCursorBufferPosition().row + 1,
        amending: stagingStatus === 'staged' && this.state.isAmending
      });
    } else {
      throw new Error(`${absFilePath} does not belong to repo ${repoPath}`);
    }
  }

  viewUnstagedChangesForCurrentFile() {
    this.viewChangesForCurrentFile('unstaged');
  }

  viewStagedChangesForCurrentFile() {
    this.viewChangesForCurrentFile('staged');
  }

  goToDiffLine(lineNumber) {
    return this.filePatchController.goToDiffLine(lineNumber);
  }

  openFiles(filePaths) {
    return Promise.all(filePaths.map(filePath => {
      const absolutePath = _path2.default.join(this.props.repository.getWorkingDirectoryPath(), filePath);
      return this.props.workspace.open(absolutePath, { pending: filePaths.length === 1 });
    }));
  }

  getUnsavedFiles(filePaths) {
    const isModifiedByPath = new Map();
    this.props.workspace.getTextEditors().forEach(editor => {
      isModifiedByPath.set(editor.getPath(), editor.isModified());
    });
    return filePaths.filter(filePath => {
      const absFilePath = _path2.default.join(this.props.repository.getWorkingDirectoryPath(), filePath);
      return isModifiedByPath.get(absFilePath);
    });
  }

  ensureNoUnsavedFiles(filePaths, message) {
    const unsavedFiles = this.getUnsavedFiles(filePaths).map(filePath => `\`${filePath}\``).join('<br>');
    if (unsavedFiles.length) {
      this.props.notificationManager.addError(message, {
        description: `You have unsaved changes in:<br>${unsavedFiles}.`,
        dismissable: true
      });
      return false;
    } else {
      return true;
    }
  }

  discardWorkDirChangesForPaths(filePaths) {
    var _this8 = this;

    return _asyncToGenerator(function* () {
      const destructiveAction = function () {
        return _this8.props.repository.discardWorkDirChangesForPaths(filePaths);
      };
      return yield _this8.props.repository.storeBeforeAndAfterBlobs(filePaths, function () {
        return _this8.ensureNoUnsavedFiles(filePaths, 'Cannot discard changes in selected files.');
      }, destructiveAction);
    })();
  }

  discardLines(lines) {
    var _this9 = this;

    return _asyncToGenerator(function* () {
      const filePath = _this9.state.filePatch.getPath();
      const filePatch = _this9.state.filePatch;
      const destructiveAction = (() => {
        var _ref7 = _asyncToGenerator(function* () {
          const discardFilePatch = filePatch.getUnstagePatchForLines(lines);
          yield _this9.props.repository.applyPatchToWorkdir(discardFilePatch);
        });

        return function destructiveAction() {
          return _ref7.apply(this, arguments);
        };
      })();
      return yield _this9.props.repository.storeBeforeAndAfterBlobs([filePath], function () {
        return _this9.ensureNoUnsavedFiles([filePath], 'Cannot discard lines.');
      }, destructiveAction, filePath);
    })();
  }

  getFilePathsForLastDiscard() {
    let partialDiscardFilePath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    let lastSnapshots = this.props.repository.getLastHistorySnapshots(partialDiscardFilePath);
    if (partialDiscardFilePath) {
      lastSnapshots = lastSnapshots ? [lastSnapshots] : [];
    }
    return lastSnapshots.map(snapshot => snapshot.filePath);
  }

  undoLastDiscard() {
    var _this10 = this;

    let partialDiscardFilePath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    return _asyncToGenerator(function* () {
      const filePaths = _this10.getFilePathsForLastDiscard(partialDiscardFilePath);
      try {
        const results = yield _this10.props.repository.restoreLastDiscardInTempFiles(function () {
          return _this10.ensureNoUnsavedFiles(filePaths, 'Cannot undo last discard.');
        }, partialDiscardFilePath);
        if (results.length === 0) {
          return;
        }
        yield _this10.proceedOrPromptBasedOnResults(results, partialDiscardFilePath);
      } catch (e) {
        if (e instanceof _gitShellOutStrategy.GitError && e.stdErr.match(/fatal: Not a valid object name/)) {
          _this10.cleanUpHistoryForFilePaths(filePaths, partialDiscardFilePath);
        } else {
          // eslint-disable-next-line no-console
          console.error(e);
        }
      }
    })();
  }

  proceedOrPromptBasedOnResults(results) {
    var _this11 = this;

    let partialDiscardFilePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    return _asyncToGenerator(function* () {
      const conflicts = results.filter(function (_ref8) {
        let conflict = _ref8.conflict;
        return conflict;
      });
      if (conflicts.length === 0) {
        yield _this11.proceedWithLastDiscardUndo(results, partialDiscardFilePath);
      } else {
        yield _this11.promptAboutConflicts(results, conflicts, partialDiscardFilePath);
      }
    })();
  }

  promptAboutConflicts(results, conflicts) {
    var _this12 = this;

    let partialDiscardFilePath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    return _asyncToGenerator(function* () {
      const conflictedFiles = conflicts.map(function (_ref9) {
        let filePath = _ref9.filePath;
        return `\t${filePath}`;
      }).join('\n');
      const choice = _this12.props.confirm({
        message: 'Undoing will result in conflicts...',
        detailedMessage: `for the following files:\n${conflictedFiles}\n` + 'Would you like to apply the changes with merge conflict markers, ' + 'or open the text with merge conflict markers in a new file?',
        buttons: ['Merge with conflict markers', 'Open in new file', 'Cancel undo']
      });
      if (choice === 0) {
        yield _this12.proceedWithLastDiscardUndo(results, partialDiscardFilePath);
      } else if (choice === 1) {
        yield _this12.openConflictsInNewEditors(conflicts.map(function (_ref10) {
          let resultPath = _ref10.resultPath;
          return resultPath;
        }));
      }
    })();
  }

  cleanUpHistoryForFilePaths(filePaths) {
    let partialDiscardFilePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    this.props.repository.clearDiscardHistory(partialDiscardFilePath);
    const filePathsStr = filePaths.map(filePath => `\`${filePath}\``).join('<br>');
    this.props.notificationManager.addError('Discard history has expired.', {
      description: `Cannot undo discard for<br>${filePathsStr}<br>Stale discard history has been deleted.`,
      dismissable: true
    });
  }

  proceedWithLastDiscardUndo(results) {
    var _this13 = this;

    let partialDiscardFilePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    return _asyncToGenerator(function* () {
      const promises = results.map((() => {
        var _ref11 = _asyncToGenerator(function* (result) {
          const filePath = result.filePath,
                resultPath = result.resultPath,
                deleted = result.deleted,
                conflict = result.conflict,
                theirsSha = result.theirsSha,
                commonBaseSha = result.commonBaseSha,
                currentSha = result.currentSha;

          const absFilePath = _path2.default.join(_this13.props.repository.getWorkingDirectoryPath(), filePath);
          if (deleted && resultPath === null) {
            yield (0, _helpers.deleteFileOrFolder)(absFilePath);
          } else {
            yield (0, _helpers.copyFile)(resultPath, absFilePath);
          }
          if (conflict) {
            yield _this13.props.repository.writeMergeConflictToIndex(filePath, commonBaseSha, currentSha, theirsSha);
          }
        });

        return function (_x11) {
          return _ref11.apply(this, arguments);
        };
      })());
      yield Promise.all(promises);
      yield _this13.props.repository.popDiscardHistory(partialDiscardFilePath);
    })();
  }

  openConflictsInNewEditors(resultPaths) {
    var _this14 = this;

    return _asyncToGenerator(function* () {
      const editorPromises = resultPaths.map(function (resultPath) {
        return _this14.props.workspace.open(resultPath);
      });
      return yield Promise.all(editorPromises);
    })();
  }

  /*
   * Asynchronously count the conflict markers present in a file specified by full path.
   */

  refreshResolutionProgress(fullPath) {
    const readStream = _fs2.default.createReadStream(fullPath, { encoding: 'utf8' });
    return new Promise(resolve => {
      _conflict2.default.countFromStream(readStream).then(count => {
        this.props.resolutionProgress.reportMarkerCount(fullPath, count);
      });
    });
  }

  /*
   * Display the credential entry dialog. Return a Promise that will resolve with the provided credentials on accept
   * or reject on cancel.
   */
  promptForCredentials(query) {
    return new Promise((resolve, reject) => {
      this.setState({
        credentialDialogQuery: _extends({}, query, {
          onSubmit: response => this.setState({ credentialDialogQuery: null }, () => resolve(response)),
          onCancel: () => this.setState({ credentialDialogQuery: null }, reject)
        })
      });
    });
  }
}, _class2.propTypes = {
  workspace: _propTypes2.default.object.isRequired,
  commandRegistry: _propTypes2.default.object.isRequired,
  notificationManager: _propTypes2.default.object.isRequired,
  tooltips: _propTypes2.default.object.isRequired,
  config: _propTypes2.default.object.isRequired,
  confirm: _propTypes2.default.func.isRequired,
  activeWorkingDirectory: _propTypes2.default.string,
  createRepositoryForProjectPath: _propTypes2.default.func,
  cloneRepositoryForProjectPath: _propTypes2.default.func,
  repository: _propTypes2.default.object.isRequired,
  resolutionProgress: _propTypes2.default.object.isRequired,
  statusBar: _propTypes2.default.object,
  switchboard: _propTypes2.default.instanceOf(_switchboard2.default),
  savedState: _propTypes2.default.object,
  useLegacyPanels: _propTypes2.default.bool,
  startOpen: _react2.default.PropTypes.bool
}, _class2.defaultProps = {
  switchboard: new _switchboard2.default(),
  savedState: {},
  useLegacyPanels: false,
  startOpen: true
}, _temp), (_applyDecoratedDescriptor(_class.prototype, 'initializeRepo', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'initializeRepo'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'showOpenIssueishDialog', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'showOpenIssueishDialog'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'showWaterfallDiagnostics', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'showWaterfallDiagnostics'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'acceptClone', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'acceptClone'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'cancelClone', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'cancelClone'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'acceptInit', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'acceptInit'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'cancelInit', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'cancelInit'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'acceptOpenIssueish', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'acceptOpenIssueish'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'cancelOpenIssueish', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'cancelOpenIssueish'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'showFilePatchForPath', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'showFilePatchForPath'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'diveIntoFilePatchForPath', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'diveIntoFilePatchForPath'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'surfaceFromFileAtPath', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'surfaceFromFileAtPath'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'onRepoRefresh', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'onRepoRefresh'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'showMergeConflictFileForPath', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'showMergeConflictFileForPath'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'diveIntoMergeConflictFileForPath', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'diveIntoMergeConflictFileForPath'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'didChangeAmending', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'didChangeAmending'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'openCloneDialog', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'openCloneDialog'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'handlePanelResize', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'handlePanelResize'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'handleChangeTab', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'handleChangeTab'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'quietlySelectItem', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'quietlySelectItem'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'focusFilePatchView', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'focusFilePatchView'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'viewUnstagedChangesForCurrentFile', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'viewUnstagedChangesForCurrentFile'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'viewStagedChangesForCurrentFile', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'viewStagedChangesForCurrentFile'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'goToDiffLine', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'goToDiffLine'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'openFiles', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'openFiles'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'getUnsavedFiles', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'getUnsavedFiles'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'ensureNoUnsavedFiles', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'ensureNoUnsavedFiles'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'discardWorkDirChangesForPaths', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'discardWorkDirChangesForPaths'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'discardLines', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'discardLines'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'undoLastDiscard', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'undoLastDiscard'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'refreshResolutionProgress', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'refreshResolutionProgress'), _class.prototype)), _class);
exports.default = RootController;
let TabTracker = (_class3 = class TabTracker {
  constructor(name, _ref12) {
    let useLegacyPanels = _ref12.useLegacyPanels,
        getState = _ref12.getState,
        setState = _ref12.setState,
        getController = _ref12.getController,
        getDockItem = _ref12.getDockItem,
        getWorkspace = _ref12.getWorkspace;

    this.name = name;

    this.useLegacyPanels = useLegacyPanels;
    this.getState = getState;
    this.getWorkspace = getWorkspace;
    this.getController = getController;
    this.getDockItem = getDockItem;

    this.setStateKey = function (value) {
      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { activateTab: false };

      return new Promise(resolve => setState(value, options, resolve));
    };
  }

  getControllerComponent() {
    const controller = this.getController();

    if (!controller.getWrappedComponent) {
      return controller;
    }

    return controller.getWrappedComponent();
  }

  toggle() {
    var _this15 = this;

    return _asyncToGenerator(function* () {
      const focusToRestore = document.activeElement;
      let shouldRestoreFocus = false;

      // Rendered => the dock item is being rendered, whether or not the dock is visible or the item
      //   is visible within its dock.
      // Visible => the item is active and the dock item is active within its dock.
      const wasRendered = _this15.getState();
      const wasVisible = _this15.isVisible();

      if (!wasRendered) {
        // Not rendered.
        yield _this15.setStateKey(true, { activateTab: true });
        yield _this15.reveal();
        shouldRestoreFocus = true;
      } else if (!wasVisible) {
        // Rendered, but not an active item in a visible dock.
        yield _this15.reveal();
        shouldRestoreFocus = true;
      } else {
        // Rendered and an active item within a visible dock.
        if (_this15.useLegacyPanels) {
          yield _this15.setStateKey(false);
        } else {
          yield _this15.hide();
        }
        shouldRestoreFocus = false;
      }

      if (shouldRestoreFocus) {
        process.nextTick(function () {
          return focusToRestore.focus();
        });
      }
    })();
  }

  toggleFocus() {
    var _this16 = this;

    return _asyncToGenerator(function* () {
      yield _this16.ensureVisible();

      if (_this16.hasFocus()) {
        let workspace = _this16.getWorkspace();
        if (workspace.getCenter) {
          workspace = workspace.getCenter();
        }
        workspace.getActivePane().activate();
      } else {
        _this16.focus();
      }
    })();
  }

  ensureVisible() {
    var _this17 = this;

    return _asyncToGenerator(function* () {
      if (!_this17.isVisible()) {
        yield _this17.setStateKey(true, { activateTab: true });
        yield _this17.reveal();
        return true;
      }
      return false;
    })();
  }

  reveal() {
    const dockItem = this.getDockItem();
    return dockItem ? dockItem.reveal() : Promise.resolve(null);
  }

  hide() {
    const dockItem = this.getDockItem();
    return dockItem ? dockItem.hide() : Promise.resolve(null);
  }

  focus() {
    this.getControllerComponent().restoreFocus();
  }

  isVisible() {
    if (!this.getState()) {
      return false;
    }

    const item = this.getDockItem();
    if (!item) {
      // Legacy panels active. Use getState(), which is true.
      return true;
    }

    const workspace = this.getWorkspace();
    return workspace.getPaneContainers().filter(container => container === workspace.getCenter() || container.isVisible()).some(container => container.getPanes().some(pane => pane.getActiveItem() === item.getDockItem()));
  }

  hasFocus() {
    return this.getControllerComponent().hasFocus();
  }
}, (_applyDecoratedDescriptor(_class3.prototype, 'toggle', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class3.prototype, 'toggle'), _class3.prototype), _applyDecoratedDescriptor(_class3.prototype, 'toggleFocus', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class3.prototype, 'toggleFocus'), _class3.prototype), _applyDecoratedDescriptor(_class3.prototype, 'ensureVisible', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class3.prototype, 'ensureVisible'), _class3.prototype)), _class3);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,