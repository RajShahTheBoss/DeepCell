'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _desc, _value, _class, _class2, _temp;

var _eventKit = require('event-kit');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _coreDecorators = require('core-decorators');

var _compareSets2 = require('compare-sets');

var _compareSets3 = _interopRequireDefault(_compareSets2);

var _commands = require('../views/commands');

var _commands2 = _interopRequireDefault(_commands);

var _conflict = require('../models/conflicts/conflict');

var _conflict2 = _interopRequireDefault(_conflict);

var _conflictController = require('./conflict-controller');

var _conflictController2 = _interopRequireDefault(_conflictController);

var _source = require('../models/conflicts/source');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

/**
 * Render a `ConflictController` for each conflict marker within an open TextEditor.
 */
let EditorConflictController = (_class = (_temp = _class2 = class EditorConflictController extends _react2.default.Component {

  constructor(props, context) {
    super(props, context);

    // this.layer = props.editor.addMarkerLayer({
    //   maintainHistory: true,
    //   persistent: false,
    // });

    this.layer = props.editor.getDefaultMarkerLayer();

    this.state = {
      conflicts: new Set(_conflict2.default.allFromEditor(props.editor, this.layer, props.isRebase))
    };

    this.subscriptions = new _eventKit.CompositeDisposable();

    this.updateMarkerCount();
  }

  componentDidMount() {
    const buffer = this.props.editor.getBuffer();

    this.subscriptions.add(this.props.editor.onDidStopChanging(() => this.forceUpdate()), this.props.editor.onDidDestroy(() => this.props.refreshResolutionProgress(this.props.editor.getPath())), buffer.onDidReload(() => this.reparseConflicts()));
  }

  render() {
    this.updateMarkerCount();

    return _react2.default.createElement(
      'div',
      null,
      this.state.conflicts.size > 0 && _react2.default.createElement(
        _commands2.default,
        { registry: this.props.commandRegistry, target: 'atom-text-editor' },
        _react2.default.createElement(_commands.Command, { command: 'github:resolve-as-ours', callback: this.getResolverUsing([_source.OURS]) }),
        _react2.default.createElement(_commands.Command, { command: 'github:resolve-as-theirs', callback: this.getResolverUsing([_source.THEIRS]) }),
        _react2.default.createElement(_commands.Command, { command: 'github:resolve-as-base', callback: this.getResolverUsing([_source.BASE]) }),
        _react2.default.createElement(_commands.Command, { command: 'github:resolve-as-ours-then-theirs', callback: this.getResolverUsing([_source.OURS, _source.THEIRS]) }),
        _react2.default.createElement(_commands.Command, { command: 'github:resolve-as-theirs-then-ours', callback: this.getResolverUsing([_source.THEIRS, _source.OURS]) }),
        _react2.default.createElement(_commands.Command, { command: 'github:resolve-as-current', callback: this.resolveAsCurrent }),
        _react2.default.createElement(_commands.Command, { command: 'github:revert-conflict-modifications', callback: this.revertConflictModifications }),
        _react2.default.createElement(_commands.Command, { command: 'github:dismiss-conflict', callback: this.dismissCurrent })
      ),
      Array.from(this.state.conflicts, c => _react2.default.createElement(_conflictController2.default, {
        key: c.getKey(),
        editor: this.props.editor,
        conflict: c,
        resolveAsSequence: sources => this.resolveAsSequence(c, sources),
        dismiss: () => this.dismissConflicts([c])
      }))
    );
  }

  componentWillUnmount() {
    // this.layer.destroy();
    this.subscriptions.dispose();
  }

  /*
   * Return an Array containing `Conflict` objects whose marked regions include any cursor position in the current
   * `TextEditor` and the `Sides` that contain a cursor within each.
   *
   * This method is written to have linear complexity with respect to the number of cursors and the number of
   * conflicts, to gracefully handle files with large numbers of both.
   */
  getCurrentConflicts() {
    const cursorPositions = this.props.editor.getCursorBufferPositions();
    cursorPositions.sort((a, b) => a.compare(b));
    const cursorIterator = cursorPositions[Symbol.iterator]();

    const conflictIterator = this.state.conflicts.keys();

    let currentCursor = cursorIterator.next();
    let currentConflict = conflictIterator.next();
    const activeConflicts = [];

    while (!currentCursor.done && !currentConflict.done) {
      // Advance currentCursor to the first cursor beyond the earliest conflict.
      const earliestConflictPosition = currentConflict.value.getRange().start;
      while (!currentCursor.done && currentCursor.value.isLessThan(earliestConflictPosition)) {
        currentCursor = cursorIterator.next();
      }

      // Advance currentConflict until the first conflict that begins at a position after the current cursor.
      // Compare each to the current cursor, and add it to activeConflicts if it contains it.
      while (!currentConflict.done && !currentCursor.done && currentConflict.value.getRange().start.isLessThan(currentCursor.value)) {
        if (currentConflict.value.includesPoint(currentCursor.value)) {
          // Hit; determine which sides of this conflict contain cursors.
          const conflict = currentConflict.value;
          const endPosition = conflict.getRange().end;
          const sides = new Set();
          while (!currentCursor.done && currentCursor.value.isLessThan(endPosition)) {
            const side = conflict.getSideContaining(currentCursor.value);
            if (side) {
              sides.add(side);
            }
            currentCursor = cursorIterator.next();
          }

          activeConflicts.push({ conflict, sides });
        }

        currentConflict = conflictIterator.next();
      }
    }

    return activeConflicts;
  }

  getResolverUsing(sequence) {
    return () => {
      this.getCurrentConflicts().forEach(match => this.resolveAsSequence(match.conflict, sequence));
    };
  }

  resolveAsCurrent() {
    this.getCurrentConflicts().forEach(match => {
      if (match.sides.size === 1) {
        const side = match.sides.keys().next().value;
        this.resolveAs(match.conflict, side.getSource());
      }
    });
  }

  revertConflictModifications() {
    this.getCurrentConflicts().forEach(match => {
      match.sides.forEach(side => {
        side.isModified() && side.revert();
        side.isBannerModified() && side.revertBanner();
      });
    });
  }

  dismissCurrent() {
    this.dismissConflicts(this.getCurrentConflicts().map(match => match.conflict));
  }

  dismissConflicts(conflicts) {
    this.setState((prevState, props) => {
      var _compareSets = (0, _compareSets3.default)(new Set(conflicts), prevState.conflicts);

      const added = _compareSets.added;

      return { conflicts: added };
    });
  }

  resolveAsSequence(conflict, sources) {
    var _sources$map$filter = sources.map(source => conflict.getSide(source)).filter(side => side),
        _sources$map$filter2 = _toArray(_sources$map$filter);

    const firstSide = _sources$map$filter2[0],
          restOfSides = _sources$map$filter2.slice(1);

    const textToAppend = restOfSides.map(side => side.getText()).join('');

    this.props.editor.transact(() => {
      // Append text from all but the first Side to the first Side. Adjust the following DisplayMarker so that only that
      // Side's marker includes the appended text, not the next one.
      const appendedRange = firstSide.appendText(textToAppend);
      const nextMarker = conflict.markerAfter(firstSide.getPosition());
      if (nextMarker) {
        nextMarker.setTailBufferPosition(appendedRange.end);
      }

      this.innerResolveAs(conflict, sources[0]);
    });
  }

  resolveAs(conflict, source) {
    this.props.editor.transact(() => {
      this.innerResolveAs(conflict, source);
    });
  }

  innerResolveAs(conflict, source) {
    conflict.resolveAs(source);

    const chosenSide = conflict.getChosenSide();
    if (!chosenSide.isBannerModified()) {
      chosenSide.deleteBanner();
    }

    const separator = conflict.getSeparator();
    if (!separator.isModified()) {
      separator.delete();
    }

    conflict.getUnchosenSides().forEach(side => {
      side.deleteBanner();
      side.delete();
    });

    this.updateMarkerCount();
  }

  reparseConflicts() {
    const newConflicts = new Set(_conflict2.default.allFromEditor(this.props.editor, this.layer, this.props.isRebase));
    this.setState({ conflicts: newConflicts });
  }

  updateMarkerCount() {
    this.props.resolutionProgress.reportMarkerCount(this.props.editor.getPath(), Array.from(this.state.conflicts, c => !c.isResolved()).filter(b => b).length);
  }
}, _class2.propTypes = {
  editor: _propTypes2.default.object.isRequired,
  commandRegistry: _propTypes2.default.object.isRequired,
  resolutionProgress: _propTypes2.default.object.isRequired,
  isRebase: _propTypes2.default.bool.isRequired,
  refreshResolutionProgress: _propTypes2.default.func
}, _class2.defaultProps = {
  refreshResolutionProgress: () => {}
}, _temp), (_applyDecoratedDescriptor(_class.prototype, 'resolveAsCurrent', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'resolveAsCurrent'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'revertConflictModifications', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'revertConflictModifications'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'dismissCurrent', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'dismissCurrent'), _class.prototype)), _class);
exports.default = EditorConflictController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,