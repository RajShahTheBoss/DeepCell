'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _class, _temp, _desc, _value, _class2, _class3, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _coreDecorators = require('core-decorators');

var _yubikiri = require('yubikiri');

var _yubikiri2 = _interopRequireDefault(_yubikiri);

var _remotePrController = require('./remote-pr-controller');

var _remotePrController2 = _interopRequireDefault(_remotePrController);

var _githubLoginModel = require('../models/github-login-model');

var _githubLoginModel2 = _interopRequireDefault(_githubLoginModel);

var _observeModel = require('../views/observe-model');

var _observeModel2 = _interopRequireDefault(_observeModel);

var _propTypes3 = require('../prop-types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

let RemoteSelector = (_temp = _class = class RemoteSelector extends _react2.default.Component {

  render() {
    var _props = this.props;
    const remotes = _props.remotes,
          currentBranchName = _props.currentBranchName,
          selectRemote = _props.selectRemote;

    return _react2.default.createElement(
      'div',
      { className: 'github-RemoteSelector' },
      _react2.default.createElement(
        'p',
        null,
        'This repository has multiple remotes hosted at GitHub.com. Select a remote to see pull requests associated with the ',
        _react2.default.createElement(
          'strong',
          null,
          currentBranchName
        ),
        ' branch.'
      ),
      _react2.default.createElement(
        'ul',
        null,
        remotes.map(remote => _react2.default.createElement(
          'li',
          { key: remote.getName() },
          _react2.default.createElement(
            'a',
            { href: '#', onClick: e => selectRemote(e, remote) },
            remote.getName(),
            ' (',
            remote.getOwner(),
            '/',
            remote.getRepo(),
            ')'
          )
        ))
      )
    );
  }
}, _class.propTypes = {
  remotes: _propTypes2.default.arrayOf(_propTypes3.RemotePropType).isRequired,
  currentBranchName: _propTypes2.default.string.isRequired,
  selectRemote: _propTypes2.default.func.isRequired
}, _temp);
let GithubTabController = (_class2 = (_temp2 = _class3 = class GithubTabController extends _react2.default.Component {

  constructor(props, context) {
    super(props, context);
    this.loginModel = _githubLoginModel2.default.get();
  }

  fetchModelData(repo) {
    return (0, _yubikiri2.default)({
      remotes: repo.getRemotes().then(remotes => remotes.filter(remote => remote.isGithubRepo())),
      currentBranch: repo.getCurrentBranch(),
      selectedRemoteName: repo.getConfig('atomGithub.currentRemote'),
      selectedPrUrl: (() => {
        var _ref = _asyncToGenerator(function* (query) {
          const branch = yield query.currentBranch;
          if (!branch.isPresent() || branch.isDetached()) {
            return null;
          }
          return repo.getConfig(`branch.${branch.getName()}.atomPrUrl`);
        });

        return function selectedPrUrl(_x) {
          return _ref.apply(this, arguments);
        };
      })()
    });
  }

  serialize() {
    return {
      deserializer: 'GithubTabControllerStub'
    };
  }

  render() {
    return _react2.default.createElement(
      _observeModel2.default,
      { model: this.props.repository, fetchData: this.fetchModelData },
      data => {
        return data ? this.renderWithData(data) : null;
      }
    );
  }

  renderWithData(_ref2) {
    let remotes = _ref2.remotes,
        currentBranch = _ref2.currentBranch,
        selectedRemoteName = _ref2.selectedRemoteName,
        selectedPrUrl = _ref2.selectedPrUrl;

    if (!this.props.repository.isPresent() || !remotes) {
      return null;
    }

    if (!currentBranch.isPresent() || currentBranch.isDetached()) {
      return null;
    }

    let remote = remotes.find(r => r.getName() === selectedRemoteName);
    let manyRemotesAvailable = false;
    if (!remote && remotes.length === 1) {
      remote = remotes[0];
    } else if (!remote && remotes.length > 1) {
      manyRemotesAvailable = true;
    }

    return _react2.default.createElement(
      'div',
      { ref: c => {
          this.root = c;
        }, className: 'github-GithubTabController' },
      _react2.default.createElement(
        'div',
        { className: 'github-GithubTabController-content' },
        remote && _react2.default.createElement(_remotePrController2.default, {
          host: 'https://api.github.com',
          loginModel: this.loginModel,
          onSelectPr: prUrl => this.handleSelectPrByUrl(prUrl, currentBranch),
          selectedPrUrl: selectedPrUrl,
          onUnpinPr: () => this.handleUnpinPr(currentBranch),
          remote: remote,
          currentBranchName: currentBranch.getName()
        }),
        !remote && manyRemotesAvailable && _react2.default.createElement(RemoteSelector, {
          remotes: remotes,
          currentBranchName: currentBranch.getName(),
          selectRemote: this.handleRemoteSelect
        }),
        !remote && !manyRemotesAvailable && this.renderNoRemotes()
      )
    );
  }

  handleSelectPrByUrl(prUrl, currentBranch) {
    return this.props.repository.setConfig(`branch.${currentBranch.getName()}.atomPrUrl`, prUrl);
  }

  handleUnpinPr(currentBranch) {
    return this.props.repository.unsetConfig(`branch.${currentBranch.getName()}.atomPrUrl`);
  }

  getTitle() {
    return 'GitHub (preview)';
  }

  getIconName() {
    return 'octoface';
  }

  getDefaultLocation() {
    return 'right';
  }

  getPreferredWidth() {
    return 400;
  }

  getURI() {
    return 'atom-github://stub-uri/github-tab-controller';
  }

  getWorkingDirectory() {
    return this.props.repository.getWorkingDirectoryPath();
  }

  renderNoRemotes() {
    return _react2.default.createElement(
      'div',
      { className: 'github-GithubTabController-no-remotes' },
      'This repository does not have any remotes hosted at GitHub.com.'
    );
  }

  handleRemoteSelect(e, remote) {
    e.preventDefault();
    this.props.repository.setConfig('atomGithub.currentRemote', remote.getName());
  }

  hasFocus() {
    return this.root && this.root.contains(document.activeElement);
  }

  restoreFocus() {
    // No-op
  }
}, _class3.propTypes = {
  repository: _propTypes2.default.object
}, _temp2), (_applyDecoratedDescriptor(_class2.prototype, 'handleSelectPrByUrl', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleSelectPrByUrl'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleUnpinPr', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleUnpinPr'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleRemoteSelect', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleRemoteSelect'), _class2.prototype)), _class2);
exports.default = GithubTabController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,