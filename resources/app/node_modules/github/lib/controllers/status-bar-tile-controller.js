'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _dec, _class, _desc, _value, _class2, _class3, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _gitShellOutStrategy = require('../git-shell-out-strategy');

var _observeModel = require('../decorators/observe-model');

var _observeModel2 = _interopRequireDefault(_observeModel);

var _propTypes3 = require('../prop-types');

var _branchView = require('../views/branch-view');

var _branchView2 = _interopRequireDefault(_branchView);

var _branchMenuView = require('../views/branch-menu-view');

var _branchMenuView2 = _interopRequireDefault(_branchMenuView);

var _pushPullView = require('../views/push-pull-view');

var _pushPullView2 = _interopRequireDefault(_pushPullView);

var _pushPullMenuView = require('../views/push-pull-menu-view');

var _pushPullMenuView2 = _interopRequireDefault(_pushPullMenuView);

var _changedFilesCountView = require('../views/changed-files-count-view');

var _changedFilesCountView2 = _interopRequireDefault(_changedFilesCountView);

var _tooltip = require('../views/tooltip');

var _tooltip2 = _interopRequireDefault(_tooltip);

var _commands = require('../views/commands');

var _commands2 = _interopRequireDefault(_commands);

var _branch = require('../models/branch');

var _remote = require('../models/remote');

var _yubikiri = require('yubikiri');

var _yubikiri2 = _interopRequireDefault(_yubikiri);

var _coreDecorators = require('core-decorators');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

let StatusBarTileController = (_dec = (0, _observeModel2.default)({
  getModel: props => props.repository,
  fetchData: repository => {
    return (0, _yubikiri2.default)({
      currentBranch: repository.getCurrentBranch(),
      branches: repository.getBranches(),
      statusesForChangedFiles: repository.getStatusesForChangedFiles(),
      currentRemote: (() => {
        var _ref = _asyncToGenerator(function* (query) {
          return repository.getRemoteForBranch((yield query.currentBranch).getName());
        });

        return function currentRemote(_x) {
          return _ref.apply(this, arguments);
        };
      })(),
      aheadCount: (() => {
        var _ref2 = _asyncToGenerator(function* (query) {
          return repository.getAheadCount((yield query.currentBranch).getName());
        });

        return function aheadCount(_x2) {
          return _ref2.apply(this, arguments);
        };
      })(),
      behindCount: (() => {
        var _ref3 = _asyncToGenerator(function* (query) {
          return repository.getBehindCount((yield query.currentBranch).getName());
        });

        return function behindCount(_x3) {
          return _ref3.apply(this, arguments);
        };
      })(),
      originExists: (() => {
        var _ref4 = _asyncToGenerator(function* () {
          const remotes = yield repository.getRemotes();
          return remotes.filter(function (remote) {
            return remote.getName() === 'origin';
          }).length > 0;
        });

        return function originExists() {
          return _ref4.apply(this, arguments);
        };
      })()
    });
  }
}), _dec(_class = (_class2 = (_temp = _class3 = class StatusBarTileController extends _react2.default.Component {

  constructor(props, context) {
    super(props, context);

    this.state = {
      inProgress: false,
      pushInProgress: false,
      fetchInProgress: false
    };
  }

  getChangedFilesCount() {
    var _props$statusesForCha = this.props.statusesForChangedFiles;
    const stagedFiles = _props$statusesForCha.stagedFiles,
          unstagedFiles = _props$statusesForCha.unstagedFiles,
          mergeConflictFiles = _props$statusesForCha.mergeConflictFiles;

    const changedFiles = new Set();

    for (const filePath in unstagedFiles) {
      changedFiles.add(filePath);
    }
    for (const filePath in stagedFiles) {
      changedFiles.add(filePath);
    }
    for (const filePath in mergeConflictFiles) {
      changedFiles.add(filePath);
    }

    return changedFiles.size;
  }

  render() {
    let changedFilesCount, mergeConflictsPresent;
    if (this.props.statusesForChangedFiles) {
      changedFilesCount = this.getChangedFilesCount();
      mergeConflictsPresent = Object.keys(this.props.statusesForChangedFiles.mergeConflictFiles).length > 0;
    }

    const repoProps = {
      repository: this.props.repository,
      currentBranch: this.props.currentBranch,
      branches: this.props.branches,
      currentRemote: this.props.currentRemote,
      aheadCount: this.props.aheadCount,
      behindCount: this.props.behindCount,
      changedFilesCount,
      mergeConflictsPresent
    };

    return _react2.default.createElement(
      'div',
      { className: 'github-StatusBarTileController' },
      this.renderTiles(repoProps),
      _react2.default.createElement(_changedFilesCountView2.default, _extends({
        didClick: this.props.toggleGitTab
      }, repoProps))
    );
  }

  renderTiles(repoProps) {
    if (!this.props.repository.showStatusBarTiles()) {
      return null;
    }

    return _react2.default.createElement(
      'span',
      null,
      _react2.default.createElement(
        _commands2.default,
        { registry: this.props.commandRegistry, target: 'atom-workspace' },
        _react2.default.createElement(_commands.Command, { command: 'github:fetch', callback: this.fetch }),
        _react2.default.createElement(_commands.Command, { command: 'github:pull', callback: this.pull }),
        _react2.default.createElement(_commands.Command, {
          command: 'github:push',
          callback: () => this.push({ force: false, setUpstream: !this.props.currentRemote.isPresent() })
        }),
        _react2.default.createElement(_commands.Command, {
          command: 'github:force-push',
          callback: () => this.push({ force: true, setUpstream: !this.props.currentRemote.isPresent() })
        })
      ),
      _react2.default.createElement(_branchView2.default, _extends({
        ref: e => {
          this.branchView = e;
        },
        workspace: this.props.workspace,
        checkout: this.checkout
      }, repoProps)),
      _react2.default.createElement(
        _tooltip2.default,
        {
          manager: this.props.tooltips,
          target: () => this.branchView,
          trigger: 'click',
          className: 'github-StatusBarTileController-tooltipMenu' },
        _react2.default.createElement(_branchMenuView2.default, _extends({
          workspace: this.props.workspace,
          notificationManager: this.props.notificationManager,
          commandRegistry: this.props.commandRegistry,
          checkout: this.checkout
        }, repoProps))
      ),
      _react2.default.createElement(_pushPullView2.default, _extends({
        ref: e => {
          this.pushPullView = e;
        },
        pushInProgress: this.state.pushInProgress,
        fetchInProgress: this.state.fetchInProgress
      }, repoProps)),
      _react2.default.createElement(
        _tooltip2.default,
        {
          manager: this.props.tooltips,
          target: () => this.pushPullView,
          trigger: 'click',
          className: 'github-StatusBarTileController-tooltipMenu' },
        _react2.default.createElement(_pushPullMenuView2.default, _extends({
          onMarkSpecialClick: this.handleOpenGitTimingsView,
          workspace: this.props.workspace,
          inProgress: this.state.inProgress,
          originExists: !!this.props.originExists,
          push: this.push,
          pull: this.pull,
          fetch: this.fetch
        }, repoProps))
      )
    );
  }

  handleOpenGitTimingsView(e) {
    e && e.preventDefault();
    this.props.workspace.open('atom-github://debug/timings');
  }

  setInProgressWhile(block) {
    var _this = this;

    var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { push: false, pull: false, fetch: false };

    let push = _ref5.push,
        pull = _ref5.pull,
        fetch = _ref5.fetch;

    return new Promise((resolve, reject) => {
      if (this.state.inProgress) {
        resolve();
        return;
      }

      this.setState({ inProgress: true, pushInProgress: push, fetchInProgress: pull || fetch }, _asyncToGenerator(function* () {
        try {
          yield block();
        } catch (e) {
          reject(e);
        } finally {
          _this.setState({ inProgress: false, pushInProgress: false, fetchInProgress: false }, resolve);
        }
      }));
    });
  }

  attemptGitOperation(operation) {
    var _this2 = this;

    let errorTransform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (error) {
      return { message: error.stdErr };
    };
    return _asyncToGenerator(function* () {
      const operationPromise = operation();
      try {
        return yield operationPromise;
      } catch (error) {
        if (!(error instanceof _gitShellOutStrategy.GitError)) {
          throw error;
        }

        var _errorTransform = errorTransform(error),
            _errorTransform$notif = _errorTransform.notificationMethod;

        const notificationMethod = _errorTransform$notif === undefined ? 'addError' : _errorTransform$notif,
              message = _errorTransform.message,
              description = _errorTransform.description;

        _this2.props.notificationManager[notificationMethod](message || 'Cannot complete remote interaction', { description, dismissable: true });
        return null;
      }
    })();
  }

  checkout(branchName, options) {
    return this.setInProgressWhile(() => this.props.repository.checkout(branchName, options));
  }

  push(_ref7) {
    var _this3 = this;

    let force = _ref7.force,
        setUpstream = _ref7.setUpstream;
    return _asyncToGenerator(function* () {
      yield _this3.attemptGitOperation(function () {
        return _this3.doPush({ force, setUpstream });
      }, function (error) {
        if (/rejected[\s\S]*failed to push/.test(error.stdErr)) {
          return {
            message: 'Push rejected',
            description: 'The tip of your current branch is behind its remote counterpart.' + ' Try pulling before pushing again. Or, to force push, hold `cmd` or `ctrl` while clicking.'
          };
        }

        return { message: 'Unable to push', description: `<pre>${error.stdErr}</pre>` };
      });
    })();
  }

  doPush(options) {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      if (options.force) {
        const choice = _this4.props.confirm({
          message: 'Are you sure you want to force push?',
          detailedMessage: 'This operation could result in losing data on the remote.',
          buttons: ['Force Push', 'Cancel Push']
        });
        if (choice !== 0) {
          return;
        }
      }

      yield _this4.setInProgressWhile(function () {
        return _this4.props.repository.push(_this4.props.currentBranch.getName(), options);
      }, { push: true });
    })();
  }

  pull() {
    var _this5 = this;

    return _asyncToGenerator(function* () {
      yield _this5.attemptGitOperation(function () {
        return _this5.doPull();
      }, function (error) {
        if (/error: Your local changes to the following files would be overwritten by merge/.test(error.stdErr)) {
          const lines = error.stdErr.split('\n');
          const files = lines.slice(3, lines.length - 3).map(function (l) {
            return `\`${l.trim()}\``;
          }).join('<br>');
          return {
            message: 'Pull aborted',
            description: 'Local changes to the following would be overwritten by merge:<br>' + files + '<br>Please commit your changes or stash them before you merge.'
          };
        } else if (/Automatic merge failed; fix conflicts and then commit the result./.test(error.stdOut)) {
          _this5.props.ensureGitTabVisible();
          return {
            notificationMethod: 'addWarning',
            message: 'Merge conflicts',
            description: `Your local changes conflicted with changes made on the remote branch. Resolve the conflicts
              with the Git panel and commit to continue.`
          };
        }

        return { message: 'Unable to pull', description: `<pre>${error.stdErr}</pre>` };
      });
    })();
  }

  doPull() {
    var _this6 = this;

    return _asyncToGenerator(function* () {
      yield _this6.setInProgressWhile(function () {
        return _this6.props.repository.pull(_this6.props.currentBranch.getName());
      }, { pull: true });
    })();
  }

  fetch() {
    var _this7 = this;

    return _asyncToGenerator(function* () {
      yield _this7.attemptGitOperation(function () {
        return _this7.doFetch();
      }, function (error) {
        return {
          message: 'Unable to fetch',
          description: `<pre>${error.stdErr}</pre>`
        };
      });
    })();
  }

  doFetch() {
    var _this8 = this;

    return _asyncToGenerator(function* () {
      yield _this8.setInProgressWhile(function () {
        return _this8.props.repository.fetch(_this8.props.currentBranch.getName());
      }, { fetch: true });
    })();
  }
}, _class3.propTypes = {
  workspace: _propTypes2.default.object.isRequired,
  notificationManager: _propTypes2.default.object.isRequired,
  commandRegistry: _propTypes2.default.object.isRequired,
  tooltips: _propTypes2.default.object.isRequired,
  confirm: _propTypes2.default.func.isRequired,
  repository: _propTypes2.default.object.isRequired,
  currentBranch: _propTypes3.BranchPropType.isRequired,
  branches: _propTypes2.default.arrayOf(_propTypes3.BranchPropType).isRequired,
  currentRemote: _propTypes3.RemotePropType.isRequired,
  aheadCount: _propTypes2.default.number,
  behindCount: _propTypes2.default.number,
  statusesForChangedFiles: _propTypes2.default.object,
  originExists: _propTypes2.default.bool,
  toggleGitTab: _propTypes2.default.func,
  ensureGitTabVisible: _propTypes2.default.func
}, _class3.defaultProps = {
  currentBranch: _branch.nullBranch,
  branches: [],
  currentRemote: _remote.nullRemote,
  toggleGitTab: () => {}
}, _temp), (_applyDecoratedDescriptor(_class2.prototype, 'handleOpenGitTimingsView', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleOpenGitTimingsView'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'checkout', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class2.prototype, 'checkout'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'push', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class2.prototype, 'push'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'pull', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class2.prototype, 'pull'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'fetch', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class2.prototype, 'fetch'), _class2.prototype)), _class2)) || _class);
exports.default = StatusBarTileController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,