'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _desc, _value, _class, _class2, _temp;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _atom = require('atom');

var _eventKit = require('event-kit');

var _coreDecorators = require('core-decorators');

var _switchboard = require('../switchboard');

var _switchboard2 = _interopRequireDefault(_switchboard);

var _filePatchView = require('../views/file-patch-view');

var _filePatchView2 = _interopRequireDefault(_filePatchView);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

let FilePatchController = (_class = (_temp = _class2 = class FilePatchController extends _react2.default.Component {

  static resetConfirmedLargeFilePatches() {
    this.confirmedLargeFilePatches = new Set();
  }

  constructor(props, context) {
    super(props, context);

    this.stagingOperationInProgress = false;
    this.emitter = new _eventKit.Emitter();
  }

  serialize() {
    return null;
  }

  componentDidUpdate(prevProps) {
    if (this.getTitle(prevProps) !== this.getTitle()) {
      this.emitter.emit('did-change-title');
    }
  }

  render() {
    const hunks = this.props.filePatch.getHunks();
    if (!hunks.length) {
      return _react2.default.createElement(
        'div',
        { className: 'github-PaneView pane-item is-blank' },
        _react2.default.createElement(
          'span',
          { className: 'icon icon-info' },
          'File has no contents'
        )
      );
    } else if (!this.shouldDisplayLargeDiff(this.props.filePatch)) {
      return _react2.default.createElement(
        'div',
        { className: 'github-PaneView pane-item large-file-patch' },
        _react2.default.createElement(
          'p',
          null,
          'This is a large diff. For performance reasons, it is not rendered by default.'
        ),
        _react2.default.createElement(
          'button',
          { className: 'btn btn-primary', onClick: this.handleShowDiffClick },
          'Show Diff'
        )
      );
    } else {
      // NOTE: Outer div is required for etch to render elements correctly
      const filePath = this.props.filePatch.getPath();
      const hasUndoHistory = this.props.repository ? this.hasUndoHistory() : false;
      return _react2.default.createElement(
        'div',
        { className: 'github-PaneView pane-item' },
        _react2.default.createElement(_filePatchView2.default, {
          ref: c => {
            this.filePatchView = c;
          },
          commandRegistry: this.props.commandRegistry,
          tooltips: this.props.tooltips,
          hunks: hunks,
          filePath: filePath,
          stagingStatus: this.props.stagingStatus,
          isPartiallyStaged: this.props.isPartiallyStaged,
          attemptLineStageOperation: this.attemptLineStageOperation,
          attemptHunkStageOperation: this.attemptHunkStageOperation,
          didSurfaceFile: this.didSurfaceFile,
          didDiveIntoCorrespondingFilePatch: this.diveIntoCorrespondingFilePatch,
          switchboard: this.props.switchboard,
          openCurrentFile: this.openCurrentFile,
          discardLines: this.props.discardLines,
          undoLastDiscard: this.undoLastDiscard,
          hasUndoHistory: hasUndoHistory
        })
      );
    }
  }

  shouldDisplayLargeDiff(filePatch) {
    const fullPath = _path2.default.join(this.props.repository.getWorkingDirectoryPath(), this.props.filePatch.getPath());
    if (FilePatchController.confirmedLargeFilePatches.has(fullPath)) {
      return true;
    }

    const lineCount = filePatch.getHunks().reduce((acc, hunk) => hunk.getLines().length, 0);
    return lineCount < this.props.largeDiffLineThreshold;
  }

  onDidChangeTitle(callback) {
    return this.emitter.on('did-change-title', callback);
  }

  onDidDestroy(callback) {
    return this.emitter.on('did-destroy', callback);
  }

  handleShowDiffClick() {
    if (this.props.repository) {
      const fullPath = _path2.default.join(this.props.repository.getWorkingDirectoryPath(), this.props.filePatch.getPath());
      FilePatchController.confirmedLargeFilePatches.add(fullPath);
      this.forceUpdate();
    }
  }

  stageHunk(hunk) {
    var _this = this;

    return _asyncToGenerator(function* () {
      _this.props.switchboard.didBeginStageOperation({ stage: true, hunk: true });

      yield _this.props.repository.applyPatchToIndex(_this.props.filePatch.getStagePatchForHunk(hunk));
      _this.props.switchboard.didFinishStageOperation({ stage: true, hunk: true });
    })();
  }

  unstageHunk(hunk) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      _this2.props.switchboard.didBeginStageOperation({ unstage: true, hunk: true });

      yield _this2.props.repository.applyPatchToIndex(_this2.props.filePatch.getUnstagePatchForHunk(hunk));

      _this2.props.switchboard.didFinishStageOperation({ unstage: true, hunk: true });
    })();
  }

  stageOrUnstageHunk(hunk) {
    if (this.props.stagingStatus === 'unstaged') {
      return this.stageHunk(hunk);
    } else if (this.props.stagingStatus === 'staged') {
      return this.unstageHunk(hunk);
    } else {
      throw new Error(`Unknown stagingStatus: ${this.props.stagingStatus}`);
    }
  }

  attemptHunkStageOperation(hunk) {
    if (this.stagingOperationInProgress) {
      return;
    }

    this.stagingOperationInProgress = true;
    this.props.switchboard.getChangePatchPromise().then(() => {
      this.stagingOperationInProgress = false;
    });

    this.stageOrUnstageHunk(hunk);
  }

  stageLines(lines) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      _this3.props.switchboard.didBeginStageOperation({ stage: true, line: true });

      yield _this3.props.repository.applyPatchToIndex(_this3.props.filePatch.getStagePatchForLines(lines));

      _this3.props.switchboard.didFinishStageOperation({ stage: true, line: true });
    })();
  }

  unstageLines(lines) {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      _this4.props.switchboard.didBeginStageOperation({ unstage: true, line: true });

      yield _this4.props.repository.applyPatchToIndex(_this4.props.filePatch.getUnstagePatchForLines(lines));

      _this4.props.switchboard.didFinishStageOperation({ unstage: true, line: true });
    })();
  }

  stageOrUnstageLines(lines) {
    if (this.props.stagingStatus === 'unstaged') {
      return this.stageLines(lines);
    } else if (this.props.stagingStatus === 'staged') {
      return this.unstageLines(lines);
    } else {
      throw new Error(`Unknown stagingStatus: ${this.props.stagingStatus}`);
    }
  }

  attemptLineStageOperation(lines) {
    if (this.stagingOperationInProgress) {
      return;
    }

    this.stagingOperationInProgress = true;
    this.props.switchboard.getChangePatchPromise().then(() => {
      this.stagingOperationInProgress = false;
    });

    this.stageOrUnstageLines(lines);
  }

  getTitle() {
    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;

    let title = props.stagingStatus === 'staged' ? 'Staged' : 'Unstaged';
    title += ' Changes: ';
    title += props.filePatch.getPath();
    return title;
  }

  didSurfaceFile() {
    if (this.props.didSurfaceFile) {
      this.props.didSurfaceFile(this.props.filePatch.getPath(), this.props.stagingStatus);
    }
  }

  diveIntoCorrespondingFilePatch() {
    const filePath = this.props.filePatch.getPath();
    const stagingStatus = this.props.stagingStatus === 'staged' ? 'unstaged' : 'staged';
    this.props.quietlySelectItem(filePath, stagingStatus);
    return this.props.didDiveIntoFilePath(filePath, stagingStatus, { amending: this.props.isAmending });
  }

  focus() {
    if (this.filePatchView) {
      this.filePatchView.focus();
    }
  }

  wasActivated() {
    process.nextTick(() => this.focus());
  }

  openCurrentFile() {
    var _this5 = this;

    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    let lineNumber = _ref.lineNumber;
    return _asyncToGenerator(function* () {
      var _ref2 = yield _this5.props.openFiles([_this5.props.filePatch.getPath()]),
          _ref3 = _slicedToArray(_ref2, 1);

      const textEditor = _ref3[0];

      const position = new _atom.Point(lineNumber ? lineNumber - 1 : 0, 0);
      textEditor.scrollToBufferPosition(position, { center: true });
      textEditor.setCursorBufferPosition(position);
      return textEditor;
    })();
  }

  undoLastDiscard() {
    return this.props.undoLastDiscard(this.props.filePatch.getPath());
  }

  hasUndoHistory() {
    return this.props.repository.hasDiscardHistory(this.props.filePatch.getPath());
  }

  goToDiffLine(lineNumber) {
    return this.filePatchView.goToDiffLine(lineNumber);
  }

  /**
   * Used to detect the context when this PaneItem is active
   */
  getWorkingDirectory() {
    return this.props.activeWorkingDirectory;
  }

  destroy() {
    this.emitter.emit('did-destroy');
  }
}, _class2.propTypes = {
  largeDiffLineThreshold: _propTypes2.default.number,
  activeWorkingDirectory: _propTypes2.default.string,
  repository: _propTypes2.default.object.isRequired,
  commandRegistry: _propTypes2.default.object.isRequired,
  tooltips: _propTypes2.default.object.isRequired,
  filePatch: _propTypes2.default.object.isRequired,
  stagingStatus: _propTypes2.default.oneOf(['unstaged', 'staged']).isRequired,
  isPartiallyStaged: _propTypes2.default.bool.isRequired,
  isAmending: _propTypes2.default.bool.isRequired,
  discardLines: _propTypes2.default.func.isRequired,
  didSurfaceFile: _propTypes2.default.func.isRequired,
  didDiveIntoFilePath: _propTypes2.default.func.isRequired,
  quietlySelectItem: _propTypes2.default.func.isRequired,
  undoLastDiscard: _propTypes2.default.func.isRequired,
  openFiles: _propTypes2.default.func.isRequired,
  switchboard: _propTypes2.default.instanceOf(_switchboard2.default)
}, _class2.defaultProps = {
  largeDiffLineThreshold: 1000,
  switchboard: new _switchboard2.default()
}, _class2.confirmedLargeFilePatches = new Set(), _temp), (_applyDecoratedDescriptor(_class.prototype, 'handleShowDiffClick', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'handleShowDiffClick'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'attemptHunkStageOperation', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'attemptHunkStageOperation'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'attemptLineStageOperation', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'attemptLineStageOperation'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'didSurfaceFile', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'didSurfaceFile'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'diveIntoCorrespondingFilePatch', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'diveIntoCorrespondingFilePatch'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'openCurrentFile', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'openCurrentFile'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'undoLastDiscard', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'undoLastDiscard'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'hasUndoHistory', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'hasUndoHistory'), _class.prototype)), _class);
exports.default = FilePatchController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,