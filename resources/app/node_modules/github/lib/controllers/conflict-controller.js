'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _desc, _value, _class, _class2, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _electron = require('electron');

var _coreDecorators = require('core-decorators');

var _source = require('../models/conflicts/source');

var _decoration = require('../views/decoration');

var _decoration2 = _interopRequireDefault(_decoration);

var _octicon = require('../views/octicon');

var _octicon2 = _interopRequireDefault(_octicon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

const Menu = _electron.remote.Menu,
      MenuItem = _electron.remote.MenuItem;
let ConflictController = (_class = (_temp = _class2 = class ConflictController extends _react2.default.Component {

  constructor(props, context) {
    super(props, context);

    this.state = {
      chosenSide: this.props.conflict.getChosenSide()
    };
  }

  resolveAsSequence(sources) {
    this.props.resolveAsSequence(sources);

    this.setState({
      chosenSide: this.props.conflict.getChosenSide()
    });
  }

  revert(side) {
    side.isModified() && side.revert();
    side.isBannerModified() && side.revertBanner();
  }

  showResolveMenu(event) {
    event.preventDefault();

    const menu = new Menu();

    menu.append(new MenuItem({
      label: 'Resolve as Ours',
      click: this.resolveAsSequence.bind(this, [_source.OURS])
    }));

    if (this.props.conflict.getSide(_source.BASE)) {
      menu.append(new MenuItem({
        label: 'Resolve as Base',
        click: this.resolveAsSequence.bind(this, [_source.BASE])
      }));
    }

    menu.append(new MenuItem({
      label: 'Resolve as Theirs',
      click: this.resolveAsSequence.bind(this, [_source.THEIRS])
    }));

    menu.append(new MenuItem({ type: 'separator' }));

    menu.append(new MenuItem({
      label: 'Resolve as Ours Then Theirs',
      click: this.resolveAsSequence.bind(this, [_source.OURS, _source.THEIRS])
    }));
    menu.append(new MenuItem({
      label: 'Resolve as Theirs Then Ours',
      click: this.resolveAsSequence.bind(this, [_source.THEIRS, _source.OURS])
    }));

    menu.append(new MenuItem({ type: 'separator' }));

    menu.append(new MenuItem({
      label: 'Dismiss',
      click: this.props.dismiss
    }));

    menu.popup(_electron.remote.getCurrentWindow());
  }

  render() {
    if (!this.state.chosenSide) {
      const ours = this.props.conflict.getSide(_source.OURS);
      const base = this.props.conflict.getSide(_source.BASE);
      const theirs = this.props.conflict.getSide(_source.THEIRS);

      return _react2.default.createElement(
        'div',
        null,
        this.renderSide(ours),
        base && this.renderSide(base),
        _react2.default.createElement(_decoration2.default, {
          key: this.props.conflict.getSeparator().getMarker().id,
          editor: this.props.editor,
          marker: this.props.conflict.getSeparator().getMarker(),
          type: 'line',
          className: 'github-ConflictSeparator'
        }),
        this.renderSide(theirs)
      );
    } else if (!this.state.chosenSide.isEmpty()) {
      return _react2.default.createElement(_decoration2.default, {
        editor: this.props.editor,
        marker: this.state.chosenSide.getMarker(),
        type: 'line',
        className: 'github-ResolvedLines'
      });
    } else {
      return null;
    }
  }

  renderSide(side) {
    const source = side.getSource();

    return _react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(_decoration2.default, {
        key: side.banner.marker.id,
        editor: this.props.editor,
        marker: side.getBannerMarker(),
        type: 'line',
        className: side.getBannerCSSClass()
      }),
      side.isBannerModified() || _react2.default.createElement(_decoration2.default, {
        key: 'banner-modified-' + side.banner.marker.id,
        editor: this.props.editor,
        marker: side.getBannerMarker(),
        type: 'line',
        className: 'github-ConflictUnmodifiedBanner'
      }),
      _react2.default.createElement(_decoration2.default, {
        key: side.marker.id,
        editor: this.props.editor,
        marker: side.getMarker(),
        type: 'line',
        className: side.getLineCSSClass()
      }),
      _react2.default.createElement(
        _decoration2.default,
        {
          key: 'block-' + side.marker.id,
          editor: this.props.editor,
          marker: side.getBlockMarker(),
          type: 'block',
          position: side.getBlockPosition() },
        _react2.default.createElement(
          'div',
          { className: side.getBlockCSSClasses() },
          _react2.default.createElement(
            'span',
            { className: 'github-ResolutionControls' },
            _react2.default.createElement(
              'button',
              { className: 'btn btn-sm inline-block', onClick: () => this.resolveAsSequence([source]) },
              'Use me'
            ),
            (side.isModified() || side.isBannerModified()) && _react2.default.createElement(
              'button',
              { className: 'btn btn-sm inline-block', onClick: () => this.revert(side) },
              'Revert'
            ),
            _react2.default.createElement(_octicon2.default, { icon: 'ellipses', className: 'inline-block', onClick: this.showResolveMenu })
          ),
          _react2.default.createElement(
            'span',
            { className: 'github-SideDescription' },
            source.toUIString()
          )
        )
      )
    );
  }
}, _class2.propTypes = {
  editor: _propTypes2.default.object.isRequired,
  conflict: _propTypes2.default.object.isRequired,
  resolveAsSequence: _propTypes2.default.func,
  dismiss: _propTypes2.default.func
}, _class2.defaultProps = {
  resolveAsSequence: sources => {},
  dismiss: () => {}
}, _temp), (_applyDecoratedDescriptor(_class.prototype, 'showResolveMenu', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'showResolveMenu'), _class.prototype)), _class);
exports.default = ConflictController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,