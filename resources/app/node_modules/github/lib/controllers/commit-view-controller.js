'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _desc, _value, _class, _class2, _temp; /** @jsx etch.dom */
/* eslint react/no-unknown-property: "off" */

var _etch = require('etch');

var _etch2 = _interopRequireDefault(_etch);

var _coreDecorators = require('core-decorators');

var _commitView = require('../views/commit-view');

var _commitView2 = _interopRequireDefault(_commitView);

var _modelStateRegistry = require('../models/model-state-registry');

var _modelStateRegistry2 = _interopRequireDefault(_modelStateRegistry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

let CommitViewController = (_class = (_temp = _class2 = class CommitViewController {

  constructor(props) {
    var _this = this;

    this.props = props;

    this.repoStateRegistry = new _modelStateRegistry2.default(CommitViewController, {
      initialModel: props.repository,
      save: () => {
        return {
          regularCommitMessage: this.regularCommitMessage,
          amendingCommitMessage: this.amendingCommitMessage
        };
      },
      restore: function () {
        let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _this.regularCommitMessage = state.regularCommitMessage || '';
        _this.amendingCommitMessage = state.amendingCommitMessage || '';
      }
    });

    if (this.props.isMerging && this.props.mergeMessage) {
      this.regularCommitMessage = this.props.mergeMessage;
    }
    _etch2.default.initialize(this);
  }

  update(props) {
    const wasAmending = this.props.isAmending;
    const wasMerging = this.props.isMerging;
    this.props = _extends({}, this.props, props);
    this.repoStateRegistry.setModel(this.props.repository);
    // If we just checked the "amend" box and we don't yet have a saved amending message,
    // initialize it to be the message from the last commit.
    if (!wasAmending && this.props.isAmending && !this.amendingCommitMessage && this.props.lastCommit.isPresent()) {
      this.amendingCommitMessage = props.lastCommit.getMessage();
    } else if (!wasMerging && this.props.isMerging && !this.regularCommitMessage) {
      this.regularCommitMessage = this.props.mergeMessage || '';
    }
    return _etch2.default.update(this);
  }

  render() {
    const message = this.getCommitMessage();

    return _etch2.default.dom(_commitView2.default, {
      ref: 'commitView',
      stagedChangesExist: this.props.stagedChangesExist,
      mergeConflictsExist: this.props.mergeConflictsExist,
      prepareToCommit: this.props.prepareToCommit,
      commit: this.commit,
      setAmending: this.props.setAmending,
      abortMerge: this.props.abortMerge,
      branchName: this.props.branchName,
      commandRegistry: this.props.commandRegistry,
      maximumCharacterLimit: 72,
      message: message,
      isMerging: this.props.isMerging,
      isAmending: this.props.isAmending,
      lastCommit: this.props.lastCommit,
      onChangeMessage: this.handleMessageChange,
      didMoveUpOnFirstLine: this.props.didMoveUpOnFirstLine
    });
  }

  commit(message) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      try {
        yield _this2.props.commit(message);
        _this2.regularCommitMessage = '';
        _this2.amendingCommitMessage = '';
        _etch2.default.update(_this2);
      } catch (e) {
        _this2.props.notificationManager.addError('Unable to commit', {
          dismissable: true,
          description: `<pre>${e.stdErr || e.stack}</pre>`
        });
      }
    })();
  }

  getCommitMessage() {
    const message = this.props.isAmending ? this.amendingCommitMessage : this.regularCommitMessage;
    return message || '';
  }

  handleMessageChange(newMessage) {
    if (this.props.isAmending) {
      this.amendingCommitMessage = newMessage;
    } else {
      this.regularCommitMessage = newMessage;
    }
    _etch2.default.update(this);
  }

  rememberFocus(event) {
    return this.refs.commitView.rememberFocus(event);
  }

  setFocus(focus) {
    return this.refs.commitView.setFocus(focus);
  }

  hasFocus() {
    return this.element.contains(document.activeElement);
  }

  destroy() {
    this.repoStateRegistry.save();
    return _etch2.default.destroy(this);
  }
}, _class2.focus = _extends({}, _commitView2.default.focus), _temp), (_applyDecoratedDescriptor(_class.prototype, 'commit', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'commit'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'handleMessageChange', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'handleMessageChange'), _class.prototype)), _class);
exports.default = CommitViewController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,