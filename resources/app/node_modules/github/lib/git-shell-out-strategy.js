'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.GitError = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _class, _temp;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _electron = require('electron');

var _eventKit = require('event-kit');

var _dugite = require('dugite');

var _whatTheDiff = require('what-the-diff');

var _whatTheStatus = require('what-the-status');

var _gitPromptServer = require('./git-prompt-server');

var _gitPromptServer2 = _interopRequireDefault(_gitPromptServer);

var _asyncQueue = require('./async-queue');

var _asyncQueue2 = _interopRequireDefault(_asyncQueue);

var _helpers = require('./helpers');

var _gitTimingsView = require('./views/git-timings-view');

var _gitTimingsView2 = _interopRequireDefault(_gitTimingsView);

var _workerManager = require('./worker-manager');

var _workerManager2 = _interopRequireDefault(_workerManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const LINE_ENDING_REGEX = /\r?\n/;

const GPG_HELPER_PATH = _path2.default.resolve((0, _helpers.getPackageRoot)(), 'bin', 'gpg-no-tty.sh');

let headless = null;

let GitError = exports.GitError = class GitError extends Error {
  constructor(message) {
    super(message);
    this.message = message;
    this.stack = new Error().stack;
  }
};
let GitShellOutStrategy = (_temp = _class = class GitShellOutStrategy {

  constructor(workingDir) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    this.workingDir = workingDir;
    if (options.queue) {
      this.commandQueue = options.queue;
    } else {
      const parallelism = options.parallelism || Math.max(3, _os2.default.cpus().length);
      this.commandQueue = new _asyncQueue2.default({ parallelism });
    }

    this.prompt = options.prompt || (query => Promise.reject());
    this.workerManager = options.workerManager;

    if (headless === null) {
      headless = !_electron.remote.getCurrentWindow().isVisible();
    }
  }

  /*
   * Provide an asynchronous callback to be used to request input from the user for git operations.
   *
   * `prompt` must be a callable that accepts a query object `{prompt, includeUsername}` and returns a Promise
   * that either resolves with a result object `{[username], password}` or rejects on cancellation.
   */
  setPromptCallback(prompt) {
    this.prompt = prompt;
  }

  // Execute a command and read the output using the embedded Git environment
  exec(args) {
    var _this = this;

    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : GitShellOutStrategy.defaultExecArgs;

    let stdin = _ref.stdin,
        useGitPromptServer = _ref.useGitPromptServer,
        writeOperation = _ref.writeOperation;

    /* eslint-disable no-console */
    const subscriptions = new _eventKit.CompositeDisposable();
    const diagnosticsEnabled = process.env.ATOM_GITHUB_GIT_DIAGNOSTICS || atom.config.get('github.gitDiagnostics');

    const formattedArgs = `git ${args.join(' ')} in ${this.workingDir}`;
    const timingMarker = _gitTimingsView2.default.generateMarker(`git ${args.join(' ')}`);
    timingMarker.mark('queued');

    return this.commandQueue.push(_asyncToGenerator(function* () {
      timingMarker.mark('prepare');
      let gitPromptServer;

      const env = {
        GIT_TERMINAL_PROMPT: '0',
        PATH: process.env.PATH || ''
      };

      if (useGitPromptServer) {
        gitPromptServer = new _gitPromptServer2.default();

        var _ref3 = yield gitPromptServer.start(_this.prompt);

        const socket = _ref3.socket,
              electron = _ref3.electron,
              credentialHelper = _ref3.credentialHelper,
              askPass = _ref3.askPass,
              sshWrapper = _ref3.sshWrapper;


        env.ATOM_GITHUB_ASKPASS_PATH = (0, _helpers.normalizeGitHelperPath)(askPass.script);
        env.ATOM_GITHUB_CREDENTIAL_PATH = (0, _helpers.normalizeGitHelperPath)(credentialHelper.script);
        env.ATOM_GITHUB_ELECTRON_PATH = (0, _helpers.normalizeGitHelperPath)(electron);
        env.ATOM_GITHUB_SOCK_PATH = (0, _helpers.normalizeGitHelperPath)(socket);

        env.ATOM_GITHUB_WORKDIR_PATH = _this.workingDir;
        env.ATOM_GITHUB_DUGITE_PATH = (0, _helpers.getDugitePath)();

        // "ssh" won't respect SSH_ASKPASS unless:
        // (a) it's running without a tty
        // (b) DISPLAY is set to something nonempty
        // But, on a Mac, DISPLAY is unset. Ensure that it is so our SSH_ASKPASS is respected.
        if (!process.env.DISPLAY || process.env.DISPLAY.length === 0) {
          env.DISPLAY = 'atom-github-placeholder';
        }

        env.ATOM_GITHUB_ORIGINAL_PATH = process.env.PATH || '';
        env.ATOM_GITHUB_ORIGINAL_GIT_ASKPASS = process.env.GIT_ASKPASS || '';
        env.ATOM_GITHUB_ORIGINAL_SSH_ASKPASS = process.env.SSH_ASKPASS || '';
        env.ATOM_GITHUB_ORIGINAL_GIT_SSH_COMMAND = process.env.GIT_SSH_COMMAND || '';
        env.ATOM_GITHUB_SPEC_MODE = atom.inSpecMode() ? 'true' : 'false';

        env.SSH_ASKPASS = (0, _helpers.normalizeGitHelperPath)(askPass.launcher);
        env.GIT_ASKPASS = (0, _helpers.normalizeGitHelperPath)(askPass.launcher);

        if (process.platform === 'linux') {
          env.GIT_SSH_COMMAND = sshWrapper.script;
        } else {
          env.GIT_SSH_COMMAND = process.env.GIT_SSH_COMMAND;
        }

        args.unshift('-c', `credential.helper=${(0, _helpers.normalizeGitHelperPath)(credentialHelper.launcher)}`);
      }

      if (diagnosticsEnabled) {
        env.GIT_TRACE = 'true';
        env.GIT_TRACE_CURL = 'true';
      }

      const options = { env };

      if (stdin) {
        options.stdin = stdin;
        options.stdinEncoding = 'utf8';
      }

      if (process.env.PRINT_GIT_TIMES) {
        console.time(`git:${formattedArgs}`);
      }
      return new Promise((() => {
        var _ref4 = _asyncToGenerator(function* (resolve, reject) {
          var _executeGitCommand = _this.executeGitCommand(args, options, timingMarker);

          const promise = _executeGitCommand.promise,
                cancel = _executeGitCommand.cancel;

          let expectCancel = false;
          if (gitPromptServer) {
            subscriptions.add(gitPromptServer.onDidCancel((() => {
              var _ref5 = _asyncToGenerator(function* (_ref6) {
                let handlerPid = _ref6.handlerPid;

                expectCancel = true;
                yield cancel();

                // On Windows, the SSH_ASKPASS handler is executed as a non-child process, so the bin\git-askpass-atom.sh
                // process does not terminate when the git process is killed.
                // Kill the handler process *after* the git process has been killed to ensure that git doesn't have a
                // chance to fall back to GIT_ASKPASS from the credential handler.
                require('tree-kill')(handlerPid);
              });

              return function (_x5) {
                return _ref5.apply(this, arguments);
              };
            })()));
          }

          var _ref7 = yield promise;

          const stdout = _ref7.stdout,
                stderr = _ref7.stderr,
                exitCode = _ref7.exitCode,
                timing = _ref7.timing;


          if (timing) {
            const execTime = timing.execTime,
                  spawnTime = timing.spawnTime,
                  ipcTime = timing.ipcTime;

            const now = performance.now();
            timingMarker.mark('nexttick', now - execTime - spawnTime - ipcTime);
            timingMarker.mark('execute', now - execTime - ipcTime);
            timingMarker.mark('ipc', now - ipcTime);
          }
          timingMarker.finalize();
          if (process.env.PRINT_GIT_TIMES) {
            console.timeEnd(`git:${formattedArgs}`);
          }
          if (gitPromptServer) {
            gitPromptServer.terminate();
          }
          subscriptions.dispose();

          if (diagnosticsEnabled) {
            if (headless) {
              let summary = `git:${formattedArgs}\n`;
              summary += `exit status: ${exitCode}\n`;
              summary += 'stdout:';
              if (stdout.length === 0) {
                summary += ' <empty>\n';
              } else {
                summary += `\n${stdout}\n`;
              }
              summary += 'stderr:';
              if (stderr.length === 0) {
                summary += ' <empty>\n';
              } else {
                summary += `\n${stderr}\n`;
              }

              console.log(summary);
            } else {
              const headerStyle = 'font-weight: bold; color: blue;';

              console.groupCollapsed(`git:${formattedArgs}`);
              console.log('%cexit status%c %d', headerStyle, 'font-weight: normal; color: black;', exitCode);
              console.log('%cstdout', headerStyle);
              console.log(stdout);
              console.log('%cstderr', headerStyle);
              console.log(stderr);
              console.groupEnd();
            }
          }

          if (exitCode !== 0 && !expectCancel) {
            const err = new GitError(`${formattedArgs} exited with code ${exitCode}\nstdout: ${stdout}\nstderr: ${stderr}`);
            err.code = exitCode;
            err.stdErr = stderr;
            err.stdOut = stdout;
            err.command = formattedArgs;
            reject(err);
          }
          resolve(stdout);
        });

        return function (_x3, _x4) {
          return _ref4.apply(this, arguments);
        };
      })());
    }), { parallel: !writeOperation });
    /* eslint-enable no-console */
  }

  executeGitCommand(args, options) {
    let marker = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    if (process.env.ATOM_GITHUB_INLINE_GIT_EXEC || !_workerManager2.default.getInstance().isReady()) {
      marker && marker.mark('nexttick');

      let childPid;
      options.processCallback = child => {
        childPid = child.pid;

        child.on('error', err => {
          /* eslint-disable no-console */
          console.error(`Error spawning: git ${args.join(' ')} in ${this.workingDir}`);
          console.error(err);
          /* eslint-enable no-console */
        });

        child.stdin.on('error', err => {
          /* eslint-disable no-console */
          console.error(`Error writing to stdin: git ${args.join(' ')} in ${this.workingDir}\n${options.stdin}`);
          console.error(err);
          /* eslint-enable no-console */
        });
      };

      const promise = _dugite.GitProcess.exec(args, this.workingDir, options);
      marker && marker.mark('execute');
      return {
        promise,
        cancel: () => childPid && require('tree-kill')(childPid)
      };
    } else {
      const workerManager = this.workerManager || _workerManager2.default.getInstance();
      return workerManager.request({
        args,
        workingDir: this.workingDir,
        options
      });
    }
  }

  /**
   * Execute a git command that may create a commit. If the command fails because the GPG binary was invoked and unable
   * to acquire a passphrase (because the pinentry program attempted to use a tty), retry with a `GitPromptServer`.
   */
  gpgExec(args) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    const gpgArgs = ['-c', `gpg.program=${GPG_HELPER_PATH}`].concat(args);
    return this.exec(gpgArgs, options).catch(err => {
      if (err.code === 128 && /gpg failed/.test(err.stdErr) && !options.useGitPromptServer) {
        // Retry with a GitPromptServer
        options.useGitPromptServer = true;
        return this.exec(gpgArgs, options);
      } else {
        throw err;
      }
    });
  }

  resolveDotGitDir() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      try {
        yield (0, _helpers.fsStat)(_this2.workingDir); // fails if folder doesn't exist
        const output = yield _this2.exec(['rev-parse', '--resolve-git-dir', _path2.default.join(_this2.workingDir, '.git')]);
        const dotGitDir = output.trim();
        if (_path2.default.isAbsolute(dotGitDir)) {
          return (0, _helpers.toNativePathSep)(dotGitDir);
        } else {
          return (0, _helpers.toNativePathSep)(_path2.default.resolve(_path2.default.join(_this2.workingDir, dotGitDir)));
        }
      } catch (e) {
        return null;
      }
    })();
  }

  init() {
    return this.exec(['init', this.workingDir]);
  }

  /**
   * Staging/Unstaging files and patches and committing
   */
  stageFiles(paths) {
    if (paths.length === 0) {
      return Promise.resolve(null);
    }
    const args = ['add'].concat(paths.map(_helpers.toGitPathSep));
    return this.exec(args, { writeOperation: true });
  }

  unstageFiles(paths) {
    let commit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'HEAD';

    if (paths.length === 0) {
      return Promise.resolve(null);
    }
    const args = ['reset', commit, '--'].concat(paths.map(_helpers.toGitPathSep));
    return this.exec(args, { writeOperation: true });
  }

  applyPatch(patch) {
    var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    let index = _ref8.index;

    const args = ['apply', '-'];
    if (index) {
      args.splice(1, 0, '--cached');
    }
    return this.exec(args, { stdin: patch, writeOperation: true });
  }

  commit(message) {
    var _ref9 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    let allowEmpty = _ref9.allowEmpty,
        amend = _ref9.amend;

    const args = ['commit', '-m', message];
    if (amend) {
      args.push('--amend');
    }
    if (allowEmpty) {
      args.push('--allow-empty');
    }
    return this.gpgExec(args, { writeOperation: true });
  }

  /**
   * File Status and Diffs
   */
  getStatusBundle() {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      const args = ['status', '--porcelain=v2', '--branch', '--untracked-files=all', '--ignore-submodules=dirty', '-z'];
      const output = yield _this3.exec(args);
      const results = (0, _whatTheStatus.parse)(output);

      for (const entryType in results) {
        if (Array.isArray(results[entryType])) {
          _this3.updateNativePathSepForEntries(results[entryType]);
        }
      }

      return results;
    })();
  }

  updateNativePathSepForEntries(entries) {
    entries.forEach(entry => {
      // Normally we would avoid mutating responses from other package's APIs, but we control
      // the `what-the-status` module and know there are no side effects.
      // This is a hot code path and by mutating we avoid creating new objects that will just be GC'ed
      if (entry.filePath) {
        entry.filePath = (0, _helpers.toNativePathSep)(entry.filePath);
      }
      if (entry.origFilePath) {
        entry.origFilePath = (0, _helpers.toNativePathSep)(entry.origFilePath);
      }
    });
  }

  diffFileStatus() {
    var _this4 = this;

    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return _asyncToGenerator(function* () {
      const args = ['diff', '--name-status', '--no-renames'];
      if (options.staged) {
        args.push('--staged');
      }
      if (options.target) {
        args.push(options.target);
      }
      const output = yield _this4.exec(args);

      const statusMap = {
        A: 'added',
        M: 'modified',
        D: 'deleted',
        U: 'unmerged'
      };

      const fileStatuses = {};
      output && output.trim().split(LINE_ENDING_REGEX).forEach(function (line) {
        var _line$split = line.split('\t'),
            _line$split2 = _slicedToArray(_line$split, 2);

        const status = _line$split2[0],
              rawFilePath = _line$split2[1];

        const filePath = (0, _helpers.toNativePathSep)(rawFilePath);
        fileStatuses[filePath] = statusMap[status];
      });
      if (!options.staged) {
        const untracked = yield _this4.getUntrackedFiles();
        untracked.forEach(function (filePath) {
          fileStatuses[filePath] = 'added';
        });
      }
      return fileStatuses;
    })();
  }

  getUntrackedFiles() {
    var _this5 = this;

    return _asyncToGenerator(function* () {
      const output = yield _this5.exec(['ls-files', '--others', '--exclude-standard']);
      if (output.trim() === '') {
        return [];
      }
      return output.trim().split(LINE_ENDING_REGEX).map(_helpers.toNativePathSep);
    })();
  }

  getDiffForFilePath(filePath) {
    var _this6 = this;

    var _ref10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    let staged = _ref10.staged,
        baseCommit = _ref10.baseCommit;
    return _asyncToGenerator(function* () {
      let args = ['diff', '--no-prefix', '--no-renames', '--diff-filter=u'];
      if (staged) {
        args.push('--staged');
      }
      if (baseCommit) {
        args.push(baseCommit);
      }
      args = args.concat(['--', (0, _helpers.toGitPathSep)(filePath)]);
      const output = yield _this6.exec(args);

      let rawDiffs = [];
      if (output) {
        rawDiffs = (0, _whatTheDiff.parse)(output).filter(function (rawDiff) {
          return rawDiff.status !== 'unmerged';
        });

        for (let i = 0; i < rawDiffs.length; i++) {
          const rawDiff = rawDiffs[i];
          if (rawDiff.oldPath) {
            rawDiff.oldPath = (0, _helpers.toNativePathSep)(rawDiff.oldPath);
          }
          if (rawDiff.newPath) {
            rawDiff.newPath = (0, _helpers.toNativePathSep)(rawDiff.newPath);
          }
        }
      }

      if (!staged && (yield _this6.getUntrackedFiles()).includes(filePath)) {
        // add untracked file
        const absPath = _path2.default.join(_this6.workingDir, filePath);
        const executable = yield (0, _helpers.isFileExecutable)(absPath);
        const contents = yield (0, _helpers.readFile)(absPath);
        const binary = (0, _helpers.isBinary)(contents);
        rawDiffs.push(buildAddedFilePatch(filePath, binary ? null : contents, executable));
      }
      if (rawDiffs.length > 1) {
        throw new Error(`Expected 0 or 1 diffs for ${filePath} but got ${rawDiffs.length}`);
      }
      return rawDiffs[0];
    })();
  }

  /**
   * Miscellaneous getters
   */
  getCommit(ref) {
    var _this7 = this;

    return _asyncToGenerator(function* () {
      const output = yield _this7.exec(['log', '--pretty=%H%x00%B%x00', '--no-abbrev-commit', '-1', ref]);

      var _output$split = output.split('\0'),
          _output$split2 = _slicedToArray(_output$split, 2);

      const sha = _output$split2[0],
            message = _output$split2[1];

      return { sha, message: message.trim(), unbornRef: false };
    })();
  }

  getHeadCommit() {
    var _this8 = this;

    return _asyncToGenerator(function* () {
      try {
        const commit = yield _this8.getCommit('HEAD');
        commit.unbornRef = false;
        return commit;
      } catch (e) {
        if (/unknown revision/.test(e.stdErr)) {
          return { sha: '', message: '', unbornRef: true };
        } else {
          throw e;
        }
      }
    })();
  }

  readFileFromIndex(filePath) {
    return this.exec(['show', `:${(0, _helpers.toGitPathSep)(filePath)}`]);
  }

  /**
   * Merge
   */
  merge(branchName) {
    return this.gpgExec(['merge', branchName], { writeOperation: true });
  }

  isMerging(dotGitDir) {
    return _asyncToGenerator(function* () {
      try {
        yield (0, _helpers.readFile)(_path2.default.join(dotGitDir, 'MERGE_HEAD'));
        return true;
      } catch (e) {
        return false;
      }
    })();
  }

  abortMerge() {
    return this.exec(['merge', '--abort'], { writeOperation: true });
  }

  checkoutSide(side, paths) {
    if (paths.length === 0) {
      return Promise.resolve();
    }

    return this.exec(['checkout', `--${side}`, ...paths.map(_helpers.toGitPathSep)]);
  }

  /**
   * Rebase
   */
  isRebasing(dotGitDir) {
    return _asyncToGenerator(function* () {
      const results = yield Promise.all([(0, _helpers.fileExists)(_path2.default.join(dotGitDir, 'rebase-merge')), (0, _helpers.fileExists)(_path2.default.join(dotGitDir, 'rebase-apply'))]);
      return results.some(function (r) {
        return r;
      });
    })();
  }

  /**
   * Remote interactions
   */
  clone(remoteUrl) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    const args = ['clone'];
    if (options.noLocal) {
      args.push('--no-local');
    }
    if (options.bare) {
      args.push('--bare');
    }
    if (options.recursive) {
      args.push('--recursive');
    }
    args.push(remoteUrl, this.workingDir);

    return this.exec(args, { writeOperation: true });
  }

  fetch(remoteName, branchName) {
    return this.exec(['fetch', remoteName, branchName], { useGitPromptServer: true, writeOperation: true });
  }

  pull(remoteName, branchName) {
    return this.gpgExec(['pull', remoteName, branchName], { useGitPromptServer: true, writeOperation: true });
  }

  push(remoteName, branchName) {
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    const args = ['push', remoteName || 'origin', branchName];
    if (options.setUpstream) {
      args.push('--set-upstream');
    }
    if (options.force) {
      args.push('--force');
    }
    return this.exec(args, { useGitPromptServer: true, writeOperation: true });
  }

  /**
   * Branches
   */
  checkout(branchName) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    const args = ['checkout'];
    if (options.createNew) {
      args.push('-b');
    }
    return this.exec(args.concat(branchName), { writeOperation: true });
  }

  checkoutFiles(paths, revision) {
    if (paths.length === 0) {
      return null;
    }
    const args = ['checkout'];
    if (revision) {
      args.push(revision);
    }
    return this.exec(args.concat('--', paths.map(_helpers.toGitPathSep)), { writeOperation: true });
  }

  getBranches() {
    var _this9 = this;

    return _asyncToGenerator(function* () {
      const output = yield _this9.exec(['for-each-ref', '--format=%(refname:short)', 'refs/heads/**']);
      return output.trim().split(LINE_ENDING_REGEX);
    })();
  }

  describeHead() {
    var _this10 = this;

    return _asyncToGenerator(function* () {
      return (yield _this10.exec(['describe', '--contains', '--all', '--always', 'HEAD'])).trim();
    })();
  }

  getConfig(option) {
    var _this11 = this;

    var _ref11 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    let local = _ref11.local;
    return _asyncToGenerator(function* () {
      let output;
      try {
        let args = ['config'];
        if (local) {
          args.push('--local');
        }
        args = args.concat(option);
        output = yield _this11.exec(args);
      } catch (err) {
        if (err.code === 1) {
          // No matching config found
          return null;
        } else {
          throw err;
        }
      }

      return output.trim();
    })();
  }

  setConfig(option, value) {
    var _ref12 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    let replaceAll = _ref12.replaceAll;

    let args = ['config'];
    if (replaceAll) {
      args.push('--replace-all');
    }
    args = args.concat(option, value);
    return this.exec(args, { writeOperation: true });
  }

  unsetConfig(option) {
    return this.exec(['config', '--unset', option], { writeOperation: true });
  }

  getRemotes() {
    var _this12 = this;

    return _asyncToGenerator(function* () {
      let output = yield _this12.getConfig(['--get-regexp', '^remote\\..*\\.url$'], { local: true });
      if (output) {
        output = output.trim();
        if (!output.length) {
          return [];
        }
        return output.split('\n').map(function (line) {
          const match = line.match(/^remote\.(.*)\.url (.*)$/);
          return {
            name: match[1],
            url: match[2]
          };
        });
      } else {
        return [];
      }
    })();
  }

  createBlob() {
    var _this13 = this;

    var _ref13 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    let filePath = _ref13.filePath,
        stdin = _ref13.stdin;
    return _asyncToGenerator(function* () {
      let output;
      if (filePath) {
        try {
          output = (yield _this13.exec(['hash-object', '-w', filePath], { writeOperation: true })).trim();
        } catch (e) {
          if (e.stdErr && e.stdErr.match(/fatal: Cannot open .*: No such file or directory/)) {
            output = null;
          } else {
            throw e;
          }
        }
      } else if (stdin) {
        output = (yield _this13.exec(['hash-object', '-w', '--stdin'], { stdin, writeOperation: true })).trim();
      } else {
        throw new Error('Must supply file path or stdin');
      }
      return output;
    })();
  }

  expandBlobToFile(absFilePath, sha) {
    var _this14 = this;

    return _asyncToGenerator(function* () {
      const output = yield _this14.exec(['cat-file', '-p', sha]);
      yield (0, _helpers.writeFile)(absFilePath, output);
      return absFilePath;
    })();
  }

  getBlobContents(sha) {
    var _this15 = this;

    return _asyncToGenerator(function* () {
      return yield _this15.exec(['cat-file', '-p', sha]);
    })();
  }

  mergeFile(oursPath, commonBasePath, theirsPath, resultPath) {
    var _this16 = this;

    return _asyncToGenerator(function* () {
      const args = ['merge-file', '-p', oursPath, commonBasePath, theirsPath, '-L', 'current', '-L', 'after discard', '-L', 'before discard'];
      let output;
      let conflict = false;
      try {
        output = yield _this16.exec(args);
      } catch (e) {
        if (e instanceof GitError && e.code === 1) {
          output = e.stdOut;
          conflict = true;
        } else {
          throw e;
        }
      }

      // Interpret a relative resultPath as relative to the repository working directory for consistency with the
      // other arguments.
      const resolvedResultPath = _path2.default.resolve(_this16.workingDir, resultPath);
      yield (0, _helpers.writeFile)(resolvedResultPath, output);

      return { filePath: oursPath, resultPath, conflict };
    })();
  }

  writeMergeConflictToIndex(filePath, commonBaseSha, oursSha, theirsSha) {
    var _this17 = this;

    return _asyncToGenerator(function* () {
      const gitFilePath = (0, _helpers.toGitPathSep)(filePath);
      const fileMode = yield _this17.getFileMode(filePath);
      let indexInfo = `0 0000000000000000000000000000000000000000\t${gitFilePath}\n`;
      if (commonBaseSha) {
        indexInfo += `${fileMode} ${commonBaseSha} 1\t${gitFilePath}\n`;
      }
      if (oursSha) {
        indexInfo += `${fileMode} ${oursSha} 2\t${gitFilePath}\n`;
      }
      if (theirsSha) {
        indexInfo += `${fileMode} ${theirsSha} 3\t${gitFilePath}\n`;
      }
      return _this17.exec(['update-index', '--index-info'], { stdin: indexInfo, writeOperation: true });
    })();
  }

  getFileMode(filePath) {
    var _this18 = this;

    return _asyncToGenerator(function* () {
      const output = yield _this18.exec(['ls-files', '--stage', '--', (0, _helpers.toGitPathSep)(filePath)]);
      if (output) {
        return output.slice(0, 6);
      } else {
        const executable = yield (0, _helpers.isFileExecutable)(_path2.default.join(_this18.workingDir, filePath));
        return executable ? '100755' : '100644';
      }
    })();
  }

  destroy() {
    this.commandQueue.dispose();
  }
}, _class.defaultExecArgs = { stdin: null, useGitPromptServer: false, writeOperation: false }, _temp);
exports.default = GitShellOutStrategy;


function buildAddedFilePatch(filePath, contents, executable) {
  const hunks = [];
  if (contents) {
    const noNewLine = contents[contents.length - 1] !== '\n';
    const lines = contents.trim().split(LINE_ENDING_REGEX).map(line => `+${line}`);
    if (noNewLine) {
      lines.push('\\ No newline at end of file');
    }
    hunks.push({
      lines,
      oldStartLine: 0,
      oldLineCount: 0,
      newStartLine: 1,
      heading: '',
      newLineCount: noNewLine ? lines.length - 1 : lines.length
    });
  }
  return {
    oldPath: null,
    newPath: (0, _helpers.toNativePathSep)(filePath),
    oldMode: null,
    newMode: executable ? '100755' : '100644',
    status: 'added',
    hunks
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,