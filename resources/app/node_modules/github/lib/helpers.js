'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.classNameForStatus = exports.isFileExecutable = undefined;

let isFileExecutable = exports.isFileExecutable = (() => {
  var _ref = _asyncToGenerator(function* (absoluteFilePath) {
    const stat = yield fsStat(absoluteFilePath);
    return stat.mode & _fsExtra2.default.constants.S_IXUSR; // eslint-disable-line no-bitwise
  });

  return function isFileExecutable(_x3) {
    return _ref.apply(this, arguments);
  };
})();

exports.getPackageRoot = getPackageRoot;
exports.getDugitePath = getDugitePath;
exports.isBinary = isBinary;
exports.firstImplementer = firstImplementer;
exports.readFile = readFile;
exports.fileExists = fileExists;
exports.writeFile = writeFile;
exports.deleteFileOrFolder = deleteFileOrFolder;
exports.copyFile = copyFile;
exports.getTempDir = getTempDir;
exports.fsStat = fsStat;
exports.mkdirs = mkdirs;
exports.shortenSha = shortenSha;
exports.normalizeGitHelperPath = normalizeGitHelperPath;
exports.toNativePathSep = toNativePathSep;
exports.toGitPathSep = toGitPathSep;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _temp = require('temp');

var _temp2 = _interopRequireDefault(_temp);

var _ncp = require('ncp');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function getPackageRoot() {
  var _atom$getLoadSettings = atom.getLoadSettings();

  const resourcePath = _atom$getLoadSettings.resourcePath;

  const currentFileWasRequiredFromSnapshot = !_path2.default.isAbsolute(__dirname);
  if (currentFileWasRequiredFromSnapshot) {
    return _path2.default.join(resourcePath, 'node_modules', 'github');
  } else {
    const packageRoot = _path2.default.resolve(__dirname, '..');
    if (_path2.default.extname(resourcePath) === '.asar') {
      if (packageRoot.indexOf(resourcePath) === 0) {
        return _path2.default.join(`${resourcePath}.unpacked`, 'node_modules', 'github');
      }
    }
    return packageRoot;
  }
}

let DUGITE_PATH;
function getDugitePath() {
  if (!DUGITE_PATH) {
    DUGITE_PATH = require.resolve('dugite');
    if (!_path2.default.isAbsolute(DUGITE_PATH)) {
      // Assume we're snapshotted
      var _atom$getLoadSettings2 = atom.getLoadSettings();

      const resourcePath = _atom$getLoadSettings2.resourcePath;

      if (_path2.default.extname(resourcePath) === '.asar') {
        DUGITE_PATH = _path2.default.join(`${resourcePath}.unpacked`, 'node_modules', 'dugite');
      } else {
        DUGITE_PATH = _path2.default.join(resourcePath, 'node_modules', 'dugite');
      }
    }
  }

  return DUGITE_PATH;
}

function isBinary(data) {
  for (let i = 0; i < 50; i++) {
    const code = data.charCodeAt(i);
    // Char code 65533 is the "replacement character";
    // 8 and below are control characters.
    if (code === 65533 || code < 9) {
      return true;
    }
  }

  return false;
}

function descriptorsFromProto(proto) {
  return Object.getOwnPropertyNames(proto).reduce((acc, name) => {
    Object.assign(acc, {
      [name]: Reflect.getOwnPropertyDescriptor(proto, name)
    });
    return acc;
  }, {});
}

/**
 * Takes an array of targets and returns a proxy. The proxy intercepts property accessor calls and
 * returns the value of that property on the first object in `targets` where the target implements that property.
 */
function firstImplementer() {
  for (var _len = arguments.length, targets = Array(_len), _key = 0; _key < _len; _key++) {
    targets[_key] = arguments[_key];
  }

  return new Proxy({ __implementations: targets }, {
    get(target, name) {
      if (name === 'getImplementers') {
        return () => targets;
      }

      if (Reflect.has(target, name)) {
        return target[name];
      }

      const firstValidTarget = targets.find(t => Reflect.has(t, name));
      if (firstValidTarget) {
        return firstValidTarget[name];
      } else {
        return undefined;
      }
    },

    set(target, name, value) {
      const firstValidTarget = targets.find(t => Reflect.has(t, name));
      if (firstValidTarget) {
        // eslint-disable-next-line no-return-assign
        return firstValidTarget[name] = value;
      } else {
        // eslint-disable-next-line no-return-assign
        return target[name] = value;
      }
    },

    // Used by sinon
    getOwnPropertyDescriptor(target, name) {
      const firstValidTarget = targets.find(t => Reflect.getOwnPropertyDescriptor(t, name));
      const compositeOwnPropertyDescriptor = Reflect.getOwnPropertyDescriptor(target, name);
      if (firstValidTarget) {
        return Reflect.getOwnPropertyDescriptor(firstValidTarget, name);
      } else if (compositeOwnPropertyDescriptor) {
        return compositeOwnPropertyDescriptor;
      } else {
        return undefined;
      }
    },

    // Used by sinon
    getPrototypeOf(target) {
      return targets.reduceRight((acc, t) => {
        return Object.create(acc, descriptorsFromProto(Object.getPrototypeOf(t)));
      }, Object.prototype);
    }
  });
}

function readFile(absoluteFilePath) {
  let encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';

  return new Promise((resolve, reject) => {
    _fsExtra2.default.readFile(absoluteFilePath, encoding, (err, contents) => {
      if (err) {
        reject(err);
      } else {
        resolve(contents);
      }
    });
  });
}

function fileExists(absoluteFilePath) {
  return new Promise((resolve, reject) => {
    _fsExtra2.default.access(absoluteFilePath, err => {
      if (err) {
        if (err.code === 'ENOENT') {
          resolve(false);
        } else {
          reject(err);
        }
      } else {
        resolve(true);
      }
    });
  });
}

function writeFile(absoluteFilePath, contents) {
  return new Promise((resolve, reject) => {
    _fsExtra2.default.writeFile(absoluteFilePath, contents, err => {
      if (err) {
        return reject(err);
      } else {
        return resolve();
      }
    });
  });
}

function deleteFileOrFolder(fileOrFolder) {
  return new Promise((resolve, reject) => {
    _fsExtra2.default.remove(fileOrFolder, err => {
      if (err) {
        return reject(err);
      } else {
        return resolve();
      }
    });
  });
}

function copyFile(source, target) {
  return new Promise((resolve, reject) => {
    (0, _ncp.ncp)(source, target, err => {
      if (err) {
        return reject(err);
      } else {
        return resolve(target);
      }
    });
  });
}

function getTempDir() {
  let prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  return new Promise((resolve, reject) => {
    _temp2.default.mkdir(prefix, (tempError, folder) => {
      if (tempError) {
        reject(tempError);
        return;
      }

      _fsExtra2.default.realpath(folder, (realError, rpath) => realError ? reject(realError) : resolve(rpath));
    });
  });
}

function fsStat(absoluteFilePath) {
  return new Promise((resolve, reject) => {
    _fsExtra2.default.stat(absoluteFilePath, (err, stats) => {
      if (err) {
        reject(err);
      } else {
        resolve(stats);
      }
    });
  });
}

function mkdirs(directory) {
  return new Promise((resolve, reject) => {
    _fsExtra2.default.mkdirs(directory, err => err ? reject(err) : resolve());
  });
}

function shortenSha(sha) {
  return sha.slice(0, 8);
}

const classNameForStatus = exports.classNameForStatus = {
  added: 'added',
  deleted: 'removed',
  modified: 'modified',
  equivalent: 'ignored'
};

/*
 * Apply any platform-specific munging to a path before presenting it as
 * a git environment variable or option.
 *
 * Convert a Windows-style "C:\foo\bar\baz" path to a "/c/foo/bar/baz" UNIX-y
 * path that the sh.exe used to execute git's credential helpers will
 * understand.
 */
function normalizeGitHelperPath(inPath) {
  if (process.platform === 'win32') {
    return inPath.replace(/\\/g, '/').replace(/^([^:]+):/, '/$1');
  } else {
    return inPath;
  }
}

/*
 * On Windows, git commands report paths with / delimiters. Convert them to \-delimited paths
 * so that Atom unifromly treats paths with native path separators.
 */
function toNativePathSep(rawPath) {
  if (process.platform !== 'win32') {
    return rawPath;
  } else {
    return rawPath.split('/').join(_path2.default.sep);
  }
}

/*
 * Convert Windows paths back to /-delimited paths to be presented to git.
 */
function toGitPathSep(rawPath) {
  if (process.platform !== 'win32') {
    return rawPath;
  } else {
    return rawPath.split(_path2.default.sep).join('/');
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,