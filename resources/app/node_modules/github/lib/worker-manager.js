'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Operation = exports.RendererProcess = exports.Worker = exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _desc, _value, _class, _class2, _temp, _desc2, _value2, _class3, _class4, _temp2, _desc3, _value3, _class5, _class6, _temp3;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _electron = require('electron');

var _eventKit = require('event-kit');

var _coreDecorators = require('core-decorators');

var _helpers = require('./helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

const BrowserWindow = _electron.remote.BrowserWindow;
let WorkerManager = (_class = (_temp = _class2 = class WorkerManager {

  static getInstance() {
    if (!this.instance) {
      this.instance = new WorkerManager();
    }
    return this.instance;
  }

  static reset(force) {
    if (this.instance) {
      this.instance.destroy(force);
    }
    this.instance = null;
  }

  constructor() {
    this.workers = new Set();
    this.activeWorker = null;
    this.createNewWorker();
  }

  isReady() {
    return this.activeWorker.isReady();
  }

  request(data) {
    if (this.destroyed) {
      throw new Error('Worker is destroyed');
    }
    let operation;
    const requestPromise = new Promise((resolve, reject) => {
      operation = new Operation(data, resolve, reject);
      return this.activeWorker.executeOperation(operation);
    });
    operation.setPromise(requestPromise);
    return {
      cancel: () => this.activeWorker.cancelOperation(operation),
      promise: requestPromise
    };
  }

  createNewWorker() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { operationCountLimit: 10 };

    let operationCountLimit = _ref.operationCountLimit;

    if (this.destroyed) {
      return;
    }
    this.activeWorker = new Worker({
      operationCountLimit,
      onDestroyed: this.onDestroyed,
      onCrashed: this.onCrashed,
      onSick: this.onSick
    });
    this.workers.add(this.activeWorker);
  }

  onDestroyed(destroyedWorker) {
    this.workers.delete(destroyedWorker);
  }

  onCrashed(crashedWorker) {
    if (crashedWorker === this.getActiveWorker()) {
      this.createNewWorker({ operationCountLimit: crashedWorker.getOperationCountLimit() });
    }
    crashedWorker.getRemainingOperations().forEach(operation => this.activeWorker.executeOperation(operation));
  }

  onSick(sickWorker) {
    if (!atom.inSpecMode()) {
      // eslint-disable-next-line no-console
      console.warn(`Sick worker detected.
        operationCountLimit: ${sickWorker.getOperationCountLimit()},
        completed operation count: ${sickWorker.getCompletedOperationCount()}`);
    }
    const operationCountLimit = this.calculateNewOperationCountLimit(sickWorker);
    return this.createNewWorker({ operationCountLimit });
  }

  calculateNewOperationCountLimit(lastWorker) {
    let operationCountLimit = 10;
    if (lastWorker.getOperationCountLimit() >= lastWorker.getCompletedOperationCount()) {
      operationCountLimit = Math.min(lastWorker.getOperationCountLimit() * 2, 100);
    }
    return operationCountLimit;
  }

  getActiveWorker() {
    return this.activeWorker;
  }

  getReadyPromise() {
    return this.activeWorker.getReadyPromise();
  }

  destroy(force) {
    this.destroyed = true;
    this.workers.forEach(worker => worker.destroy(force));
  }
}, _class2.instance = null, _temp), (_applyDecoratedDescriptor(_class.prototype, 'onDestroyed', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'onDestroyed'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'onCrashed', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'onCrashed'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'onSick', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'onSick'), _class.prototype)), _class);
exports.default = WorkerManager;
let Worker = exports.Worker = (_class3 = (_temp2 = _class4 = class Worker {

  constructor(_ref2) {
    let operationCountLimit = _ref2.operationCountLimit,
        onSick = _ref2.onSick,
        onCrashed = _ref2.onCrashed,
        onDestroyed = _ref2.onDestroyed;

    this.operationCountLimit = operationCountLimit;
    this.onSick = onSick;
    this.onCrashed = onCrashed;
    this.onDestroyed = onDestroyed;

    this.operationsById = new Map();
    this.completedOperationCount = 0;
    this.sick = false;

    this.rendererProcess = new RendererProcess({
      loadUrl: this.getLoadUrl(operationCountLimit),
      onData: this.handleDataReceived,
      onCancelled: this.handleCancelled,
      onExecStarted: this.handleExecStarted,
      onSpawnError: this.handleSpawnError,
      onStdinError: this.handleStdinError,
      onSick: this.handleSick,
      onCrashed: this.handleCrashed,
      onDestroyed: this.destroy
    });
  }

  isReady() {
    return this.rendererProcess.isReady();
  }

  getLoadUrl(operationCountLimit) {
    const htmlPath = _path2.default.join((0, _helpers.getPackageRoot)(), 'lib', 'renderer.html');
    const rendererJsPath = _path2.default.join((0, _helpers.getPackageRoot)(), 'lib', 'worker.js');
    const qs = _querystring2.default.stringify({
      js: rendererJsPath,
      managerWebContentsId: this.getWebContentsId(),
      operationCountLimit,
      channelName: Worker.channelName
    });
    return `file://${htmlPath}?${qs}`;
  }

  getWebContentsId() {
    return _electron.remote.getCurrentWebContents().id;
  }

  executeOperation(operation) {
    this.operationsById.set(operation.id, operation);
    operation.onComplete(this.onOperationComplete);
    return this.rendererProcess.executeOperation(operation);
  }

  cancelOperation(operation) {
    return this.rendererProcess.cancelOperation(operation);
  }

  handleDataReceived(_ref3) {
    let id = _ref3.id,
        results = _ref3.results;

    const operation = this.operationsById.get(id);
    operation.complete(results, data => {
      const timing = data.timing;

      const totalInternalTime = timing.execTime + timing.spawnTime;
      const ipcTime = operation.getExecutionTime() - totalInternalTime;
      data.timing.ipcTime = ipcTime;
      return data;
    });
  }

  onOperationComplete(operation) {
    this.completedOperationCount++;
    this.operationsById.delete(operation.id);

    if (this.sick && this.operationsById.size === 0) {
      this.destroy();
    }
  }

  handleCancelled(_ref4) {
    let id = _ref4.id;

    const operation = this.operationsById.get(id);
    if (operation) {
      // handleDataReceived() can be received before handleCancelled()
      operation.wasCancelled();
    }
  }

  handleExecStarted(_ref5) {
    let id = _ref5.id;

    const operation = this.operationsById.get(id);
    operation.setInProgress();
  }

  handleSpawnError(_ref6) {
    let id = _ref6.id,
        err = _ref6.err;

    const operation = this.operationsById.get(id);
    operation.error(err);
  }

  handleStdinError(_ref7) {
    let id = _ref7.id,
        stdin = _ref7.stdin,
        err = _ref7.err;

    const operation = this.operationsById.get(id);
    operation.error(err);
  }

  handleSick() {
    this.sick = true;
    this.onSick(this);
  }

  handleCrashed() {
    this.onCrashed(this);
    this.destroy();
  }

  getOperationCountLimit() {
    return this.operationCountLimit;
  }

  getCompletedOperationCount() {
    return this.completedOperationCount;
  }

  getRemainingOperations() {
    return Array.from(this.operationsById.values());
  }

  getPid() {
    return this.rendererProcess.getPid();
  }

  getReadyPromise() {
    return this.rendererProcess.getReadyPromise();
  }

  destroy(force) {
    var _this = this;

    return _asyncToGenerator(function* () {
      _this.onDestroyed(_this);
      if (_this.operationsById.size > 0 && !force) {
        const remainingOperationPromises = _this.getRemainingOperations().map(function (operation) {
          return operation.getPromise().catch(function () {
            return null;
          });
        });
        yield Promise.all(remainingOperationPromises);
      }
      _this.rendererProcess.destroy();
    })();
  }
}, _class4.channelName = 'github:renderer-ipc', _temp2), (_applyDecoratedDescriptor(_class3.prototype, 'handleDataReceived', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class3.prototype, 'handleDataReceived'), _class3.prototype), _applyDecoratedDescriptor(_class3.prototype, 'onOperationComplete', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class3.prototype, 'onOperationComplete'), _class3.prototype), _applyDecoratedDescriptor(_class3.prototype, 'handleCancelled', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class3.prototype, 'handleCancelled'), _class3.prototype), _applyDecoratedDescriptor(_class3.prototype, 'handleExecStarted', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class3.prototype, 'handleExecStarted'), _class3.prototype), _applyDecoratedDescriptor(_class3.prototype, 'handleSpawnError', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class3.prototype, 'handleSpawnError'), _class3.prototype), _applyDecoratedDescriptor(_class3.prototype, 'handleStdinError', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class3.prototype, 'handleStdinError'), _class3.prototype), _applyDecoratedDescriptor(_class3.prototype, 'handleSick', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class3.prototype, 'handleSick'), _class3.prototype), _applyDecoratedDescriptor(_class3.prototype, 'handleCrashed', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class3.prototype, 'handleCrashed'), _class3.prototype)), _class3);

/*
Sends operations to renderer processes
*/

let RendererProcess = exports.RendererProcess = (_class5 = class RendererProcess {
  constructor(_ref8) {
    let loadUrl = _ref8.loadUrl,
        onDestroyed = _ref8.onDestroyed,
        onCrashed = _ref8.onCrashed,
        onSick = _ref8.onSick,
        onData = _ref8.onData,
        onCancelled = _ref8.onCancelled,
        onSpawnError = _ref8.onSpawnError,
        onStdinError = _ref8.onStdinError,
        onExecStarted = _ref8.onExecStarted;

    this.onDestroyed = onDestroyed;
    this.onCrashed = onCrashed;
    this.onSick = onSick;
    this.onData = onData;
    this.onCancelled = onCancelled;
    this.onSpawnError = onSpawnError;
    this.onStdinError = onStdinError;
    this.onExecStarted = onExecStarted;

    this.win = new BrowserWindow({ show: !!process.env.ATOM_GITHUB_SHOW_RENDERER_WINDOW });
    this.webContents = this.win.webContents;
    // this.webContents.openDevTools();

    this.emitter = new _eventKit.Emitter();
    this.subscriptions = new _eventKit.CompositeDisposable();
    this.registerListeners();

    this.win.loadURL(loadUrl);
    this.win.webContents.on('crashed', this.handleDestroy);
    this.win.webContents.on('destroyed', this.handleDestroy);
    this.subscriptions.add(new _eventKit.Disposable(() => {
      if (!this.win.isDestroyed()) {
        this.win.webContents.removeListener('crashed', this.handleDestroy);
        this.win.webContents.removeListener('destroyed', this.handleDestroy);
        this.win.destroy();
      }
    }), this.emitter);

    this.ready = false;
    this.readyPromise = new Promise(resolve => {
      this.resolveReady = resolve;
    });
  }

  isReady() {
    return this.ready;
  }

  handleDestroy() {
    this.destroy();
    this.onCrashed(...arguments);
  }

  registerListeners() {
    const handleMessages = (event, _ref9) => {
      let sourceWebContentsId = _ref9.sourceWebContentsId,
          type = _ref9.type,
          data = _ref9.data;

      if (sourceWebContentsId === this.win.webContents.id) {
        this.emitter.emit(type, data);
      }
    };

    _electron.ipcRenderer.on(Worker.channelName, handleMessages);
    this.emitter.on('renderer-ready', (_ref10) => {
      let pid = _ref10.pid;

      this.pid = pid;
      this.ready = true;
      this.resolveReady();
    });
    this.emitter.on('git-data', this.onData);
    this.emitter.on('git-cancelled', this.onCancelled);
    this.emitter.on('git-spawn-error', this.onSpawnError);
    this.emitter.on('git-stdin-error', this.onStdinError);
    this.emitter.on('slow-spawns', this.onSick);

    // not currently used to avoid clogging up ipc channel
    // keeping it around as it's potentially useful for avoiding duplicate write operations upon renderer crashing
    this.emitter.on('exec-started', this.onExecStarted);

    this.subscriptions.add(new _eventKit.Disposable(() => _electron.ipcRenderer.removeListener(Worker.channelName, handleMessages)));
  }

  executeOperation(operation) {
    return operation.execute(payload => {
      if (this.destroyed) {
        return null;
      }
      return this.webContents.send(Worker.channelName, {
        type: 'git-exec',
        data: payload
      });
    });
  }

  cancelOperation(operation) {
    return operation.cancel(payload => {
      if (this.destroyed) {
        return null;
      }
      return this.webContents.send(Worker.channelName, {
        type: 'git-cancel',
        data: payload
      });
    });
  }

  getPid() {
    return this.pid;
  }

  getReadyPromise() {
    return this.readyPromise;
  }

  destroy() {
    this.destroyed = true;
    this.subscriptions.dispose();
  }
}, (_applyDecoratedDescriptor(_class5.prototype, 'handleDestroy', [_coreDecorators.autobind], Object.getOwnPropertyDescriptor(_class5.prototype, 'handleDestroy'), _class5.prototype)), _class5);
let Operation = exports.Operation = (_temp3 = _class6 = class Operation {

  constructor(data, resolve, reject) {
    this.id = Operation.id++;
    this.data = data;
    this.resolve = resolve;
    this.reject = reject;
    this.promise = null;
    this.cancellationResolve = () => {};
    this.startTime = null;
    this.endTime = null;
    this.status = Operation.status.PENDING;
    this.results = null;
    this.emitter = new _eventKit.Emitter();
  }

  onComplete(cb) {
    return this.emitter.on('complete', cb);
  }

  setPromise(promise) {
    this.promise = promise;
  }

  getPromise() {
    return this.promise;
  }

  setInProgress() {
    // after exec has been called but before results a received
    this.status = Operation.status.INPROGRESS;
  }

  getExecutionTime() {
    if (!this.startTime || !this.endTime) {
      return NaN;
    } else {
      return this.endTime - this.startTime;
    }
  }

  complete(results) {
    let mutate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : data => data;

    this.endTime = performance.now();
    this.results = results;
    this.resolve(mutate(results));
    this.cancellationResolve();
    this.status = Operation.status.COMPLETE;
    this.emitter.emit('complete', this);
    this.emitter.dispose();
  }

  wasCancelled() {
    this.status = Operation.status.CANCELLED;
    this.cancellationResolve();
  }

  error(results) {
    this.endTime = performance.now();
    const err = new Error(results.message, results.fileName, results.lineNumber);
    err.stack = results.stack;
    this.reject(err);
  }

  execute(execFn) {
    this.startTime = performance.now();
    return execFn(_extends({}, this.data, { id: this.id }));
  }

  cancel(execFn) {
    return new Promise(resolve => {
      this.status = Operation.status.CANCELLING;
      this.cancellationResolve = resolve;
      execFn({ id: this.id });
    });
  }
}, _class6.status = {
  PENDING: Symbol('pending'),
  INPROGRESS: Symbol('in-progress'),
  COMPLETE: Symbol('complete'),
  CANCELLING: Symbol('cancelling'),
  CANCELLED: Symbol('canceled')
}, _class6.id = 0, _temp3);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,