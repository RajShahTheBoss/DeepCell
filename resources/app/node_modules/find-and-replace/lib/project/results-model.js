(function() {
  var Emitter, Result, ResultsModel, TextEditor, _, binaryIndex, escapeHelper, ref, stringCompare,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore-plus');

  ref = require('atom'), Emitter = ref.Emitter, TextEditor = ref.TextEditor;

  escapeHelper = require('../escape-helper');

  Result = (function() {
    Result.create = function(result) {
      var matches, ref1;
      if (result != null ? (ref1 = result.matches) != null ? ref1.length : void 0 : void 0) {
        matches = result.matches.map(function(m) {
          return {
            matchText: m.matchText,
            lineText: m.lineText,
            lineTextOffset: m.lineTextOffset,
            range: m.range,
            leadingContextLines: m.leadingContextLines,
            trailingContextLines: m.trailingContextLines
          };
        });
        return new Result({
          filePath: result.filePath,
          matches: matches
        });
      } else {
        return null;
      }
    };

    function Result(result) {
      _.extend(this, result);
    }

    return Result;

  })();

  module.exports = ResultsModel = (function() {
    function ResultsModel(findOptions) {
      this.findOptions = findOptions;
      this.onContentsModified = bind(this.onContentsModified, this);
      this.emitter = new Emitter;
      atom.workspace.getCenter().observeActivePaneItem((function(_this) {
        return function(item) {
          if (item instanceof TextEditor) {
            return item.onDidStopChanging(function() {
              return _this.onContentsModified(item);
            });
          }
        };
      })(this));
      this.clear();
    }

    ResultsModel.prototype.onDidClear = function(callback) {
      return this.emitter.on('did-clear', callback);
    };

    ResultsModel.prototype.onDidClearSearchState = function(callback) {
      return this.emitter.on('did-clear-search-state', callback);
    };

    ResultsModel.prototype.onDidClearReplacementState = function(callback) {
      return this.emitter.on('did-clear-replacement-state', callback);
    };

    ResultsModel.prototype.onDidSearchPaths = function(callback) {
      return this.emitter.on('did-search-paths', callback);
    };

    ResultsModel.prototype.onDidErrorForPath = function(callback) {
      return this.emitter.on('did-error-for-path', callback);
    };

    ResultsModel.prototype.onDidStartSearching = function(callback) {
      return this.emitter.on('did-start-searching', callback);
    };

    ResultsModel.prototype.onDidCancelSearching = function(callback) {
      return this.emitter.on('did-cancel-searching', callback);
    };

    ResultsModel.prototype.onDidFinishSearching = function(callback) {
      return this.emitter.on('did-finish-searching', callback);
    };

    ResultsModel.prototype.onDidStartReplacing = function(callback) {
      return this.emitter.on('did-start-replacing', callback);
    };

    ResultsModel.prototype.onDidFinishReplacing = function(callback) {
      return this.emitter.on('did-finish-replacing', callback);
    };

    ResultsModel.prototype.onDidSearchPath = function(callback) {
      return this.emitter.on('did-search-path', callback);
    };

    ResultsModel.prototype.onDidReplacePath = function(callback) {
      return this.emitter.on('did-replace-path', callback);
    };

    ResultsModel.prototype.onDidAddResult = function(callback) {
      return this.emitter.on('did-add-result', callback);
    };

    ResultsModel.prototype.onDidRemoveResult = function(callback) {
      return this.emitter.on('did-remove-result', callback);
    };

    ResultsModel.prototype.clear = function() {
      this.clearSearchState();
      this.clearReplacementState();
      return this.emitter.emit('did-clear', this.getResultsSummary());
    };

    ResultsModel.prototype.clearSearchState = function() {
      this.pathCount = 0;
      this.matchCount = 0;
      this.regex = null;
      this.results = {};
      this.paths = [];
      this.active = false;
      this.searchErrors = null;
      if (this.inProgressSearchPromise != null) {
        this.inProgressSearchPromise.cancel();
        this.inProgressSearchPromise = null;
      }
      return this.emitter.emit('did-clear-search-state', this.getResultsSummary());
    };

    ResultsModel.prototype.clearReplacementState = function() {
      this.replacePattern = null;
      this.replacedPathCount = null;
      this.replacementCount = null;
      this.replacementErrors = null;
      return this.emitter.emit('did-clear-replacement-state', this.getResultsSummary());
    };

    ResultsModel.prototype.shoudldRerunSearch = function(findPattern, pathsPattern, replacePattern, options) {
      var onlyRunIfChanged;
      if (options == null) {
        options = {};
      }
      onlyRunIfChanged = options.onlyRunIfChanged;
      if (onlyRunIfChanged && (findPattern != null) && (pathsPattern != null) && findPattern === this.lastFindPattern && pathsPattern === this.lastPathsPattern) {
        return false;
      } else {
        return true;
      }
    };

    ResultsModel.prototype.search = function(findPattern, pathsPattern, replacePattern, options) {
      var keepReplacementState, leadingContextLineCount, onPathsSearched, searchPaths, trailingContextLineCount;
      if (options == null) {
        options = {};
      }
      if (!this.shoudldRerunSearch(findPattern, pathsPattern, replacePattern, options)) {
        return Promise.resolve();
      }
      keepReplacementState = options.keepReplacementState;
      if (keepReplacementState) {
        this.clearSearchState();
      } else {
        this.clear();
      }
      this.lastFindPattern = findPattern;
      this.lastPathsPattern = pathsPattern;
      this.findOptions.set(_.extend({
        findPattern: findPattern,
        replacePattern: replacePattern,
        pathsPattern: pathsPattern
      }, options));
      this.regex = this.findOptions.getFindPatternRegex();
      this.active = true;
      searchPaths = this.pathsArrayFromPathsPattern(pathsPattern);
      onPathsSearched = (function(_this) {
        return function(numberOfPathsSearched) {
          return _this.emitter.emit('did-search-paths', numberOfPathsSearched);
        };
      })(this);
      leadingContextLineCount = atom.config.get('find-and-replace.searchContextLineCountBefore');
      trailingContextLineCount = atom.config.get('find-and-replace.searchContextLineCountAfter');
      this.inProgressSearchPromise = atom.workspace.scan(this.regex, {
        paths: searchPaths,
        onPathsSearched: onPathsSearched,
        leadingContextLineCount: leadingContextLineCount,
        trailingContextLineCount: trailingContextLineCount
      }, (function(_this) {
        return function(result, error) {
          if (result) {
            return _this.setResult(result.filePath, Result.create(result));
          } else {
            if (_this.searchErrors == null) {
              _this.searchErrors = [];
            }
            _this.searchErrors.push(error);
            return _this.emitter.emit('did-error-for-path', error);
          }
        };
      })(this));
      this.emitter.emit('did-start-searching', this.inProgressSearchPromise);
      return this.inProgressSearchPromise.then((function(_this) {
        return function(message) {
          if (message === 'cancelled') {
            return _this.emitter.emit('did-cancel-searching');
          } else {
            _this.inProgressSearchPromise = null;
            return _this.emitter.emit('did-finish-searching', _this.getResultsSummary());
          }
        };
      })(this));
    };

    ResultsModel.prototype.replace = function(pathsPattern, replacePattern, replacementPaths) {
      var promise;
      if (!(this.findOptions.findPattern && (this.regex != null))) {
        return;
      }
      this.findOptions.set({
        replacePattern: replacePattern,
        pathsPattern: pathsPattern
      });
      if (this.findOptions.useRegex) {
        replacePattern = escapeHelper.unescapeEscapeSequence(replacePattern);
      }
      this.active = false;
      this.replacedPathCount = 0;
      this.replacementCount = 0;
      promise = atom.workspace.replace(this.regex, replacePattern, replacementPaths, (function(_this) {
        return function(result, error) {
          if (result) {
            if (result.replacements) {
              _this.replacedPathCount++;
              _this.replacementCount += result.replacements;
            }
            return _this.emitter.emit('did-replace-path', result);
          } else {
            if (_this.replacementErrors == null) {
              _this.replacementErrors = [];
            }
            _this.replacementErrors.push(error);
            return _this.emitter.emit('did-error-for-path', error);
          }
        };
      })(this));
      this.emitter.emit('did-start-replacing', promise);
      return promise.then((function(_this) {
        return function() {
          _this.emitter.emit('did-finish-replacing', _this.getResultsSummary());
          return _this.search(_this.findOptions.findPattern, _this.findOptions.pathsPattern, _this.findOptions.replacePattern, {
            keepReplacementState: true
          });
        };
      })(this))["catch"](function(e) {
        return console.error(e.stack);
      });
    };

    ResultsModel.prototype.setActive = function(isActive) {
      if ((isActive && this.findOptions.findPattern) || !isActive) {
        return this.active = isActive;
      }
    };

    ResultsModel.prototype.getActive = function() {
      return this.active;
    };

    ResultsModel.prototype.getFindOptions = function() {
      return this.findOptions;
    };

    ResultsModel.prototype.getLastFindPattern = function() {
      return this.lastFindPattern;
    };

    ResultsModel.prototype.getResultsSummary = function() {
      var findPattern, ref1, replacePattern;
      findPattern = (ref1 = this.lastFindPattern) != null ? ref1 : this.findOptions.findPattern;
      replacePattern = this.findOptions.replacePattern;
      return {
        findPattern: findPattern,
        replacePattern: replacePattern,
        pathCount: this.pathCount,
        matchCount: this.matchCount,
        searchErrors: this.searchErrors,
        replacedPathCount: this.replacedPathCount,
        replacementCount: this.replacementCount,
        replacementErrors: this.replacementErrors
      };
    };

    ResultsModel.prototype.getPathCount = function() {
      return this.pathCount;
    };

    ResultsModel.prototype.getMatchCount = function() {
      return this.matchCount;
    };

    ResultsModel.prototype.getPaths = function() {
      return this.paths;
    };

    ResultsModel.prototype.getResult = function(filePath) {
      return this.results[filePath];
    };

    ResultsModel.prototype.getResultAt = function(index) {
      return this.results[this.paths[index]];
    };

    ResultsModel.prototype.setResult = function(filePath, result) {
      if (result) {
        return this.addResult(filePath, result);
      } else {
        return this.removeResult(filePath);
      }
    };

    ResultsModel.prototype.addResult = function(filePath, result) {
      var filePathInsertedIndex;
      filePathInsertedIndex = null;
      if (this.results[filePath]) {
        this.matchCount -= this.results[filePath].matches.length;
      } else {
        this.pathCount++;
        filePathInsertedIndex = binaryIndex(this.paths, filePath, stringCompare);
        this.paths.splice(filePathInsertedIndex, 0, filePath);
      }
      this.matchCount += result.matches.length;
      this.results[filePath] = result;
      return this.emitter.emit('did-add-result', {
        filePath: filePath,
        result: result,
        filePathInsertedIndex: filePathInsertedIndex
      });
    };

    ResultsModel.prototype.removeResult = function(filePath) {
      if (this.results[filePath]) {
        this.pathCount--;
        this.matchCount -= this.results[filePath].matches.length;
        this.paths = _.without(this.paths, filePath);
        delete this.results[filePath];
        return this.emitter.emit('did-remove-result', {
          filePath: filePath
        });
      }
    };

    ResultsModel.prototype.onContentsModified = function(editor) {
      var leadingContextLineCount, matches, result, trailingContextLineCount;
      if (!(this.active && this.regex)) {
        return;
      }
      if (!editor.getPath()) {
        return;
      }
      matches = [];
      if (parseFloat(atom.getVersion()) >= 1.17) {
        leadingContextLineCount = atom.config.get('find-and-replace.searchContextLineCountBefore');
        trailingContextLineCount = atom.config.get('find-and-replace.searchContextLineCountAfter');
        editor.scan(this.regex, {
          leadingContextLineCount: leadingContextLineCount,
          trailingContextLineCount: trailingContextLineCount
        }, function(match) {
          return matches.push(match);
        });
      } else {
        editor.scan(this.regex, function(match) {
          return matches.push(match);
        });
      }
      result = Result.create({
        filePath: editor.getPath(),
        matches: matches
      });
      this.setResult(editor.getPath(), result);
      return this.emitter.emit('did-finish-searching', this.getResultsSummary());
    };

    ResultsModel.prototype.pathsArrayFromPathsPattern = function(pathsPattern) {
      var i, inputPath, len, ref1, results;
      ref1 = pathsPattern.trim().split(',');
      results = [];
      for (i = 0, len = ref1.length; i < len; i++) {
        inputPath = ref1[i];
        if (inputPath) {
          results.push(inputPath.trim());
        }
      }
      return results;
    };

    return ResultsModel;

  })();

  stringCompare = function(a, b) {
    return a.localeCompare(b);
  };

  binaryIndex = function(array, value, comparator) {
    var high, low, mid;
    low = 0;
    high = array.length;
    while (low < high) {
      mid = Math.floor((low + high) / 2);
      if (comparator(array[mid], value) < 0) {
        low = mid + 1;
      } else {
        high = mid;
      }
    }
    return low;
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
