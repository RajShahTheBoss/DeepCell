(function() {
  var BracketMatcherView, CompositeDisposable, MAX_ROWS_TO_SCAN, Point, Range, SelectorCache, TagFinder, _, ref,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  CompositeDisposable = require('atom').CompositeDisposable;

  _ = require('underscore-plus');

  ref = require('atom'), Range = ref.Range, Point = ref.Point;

  TagFinder = require('./tag-finder');

  SelectorCache = require('./selector-cache');

  MAX_ROWS_TO_SCAN = 10000;

  module.exports = BracketMatcherView = (function() {
    function BracketMatcherView(editor, editorElement, matchManager) {
      this.editor = editor;
      this.matchManager = matchManager;
      this.updateMatch = bind(this.updateMatch, this);
      this.destroy = bind(this.destroy, this);
      this.subscriptions = new CompositeDisposable;
      this.tagFinder = new TagFinder(this.editor);
      this.pairHighlighted = false;
      this.tagHighlighted = false;
      this.commentOrStringSelector = SelectorCache.get('comment.* | string.*');
      this.subscriptions.add(this.editor.onDidTokenize(this.updateMatch));
      this.subscriptions.add(this.editor.getBuffer().onDidChangeText(this.updateMatch));
      this.subscriptions.add(this.editor.onDidChangeGrammar(this.updateMatch));
      this.subscriptions.add(this.editor.onDidChangeSelectionRange(this.updateMatch));
      this.subscriptions.add(this.editor.onDidAddCursor(this.updateMatch));
      this.subscriptions.add(this.editor.onDidRemoveCursor(this.updateMatch));
      this.subscriptions.add(atom.commands.add(editorElement, 'bracket-matcher:go-to-matching-bracket', (function(_this) {
        return function() {
          return _this.goToMatchingPair();
        };
      })(this)));
      this.subscriptions.add(atom.commands.add(editorElement, 'bracket-matcher:go-to-enclosing-bracket', (function(_this) {
        return function() {
          return _this.goToEnclosingPair();
        };
      })(this)));
      this.subscriptions.add(atom.commands.add(editorElement, 'bracket-matcher:select-inside-brackets', (function(_this) {
        return function() {
          return _this.selectInsidePair();
        };
      })(this)));
      this.subscriptions.add(atom.commands.add(editorElement, 'bracket-matcher:close-tag', (function(_this) {
        return function() {
          return _this.closeTag();
        };
      })(this)));
      this.subscriptions.add(atom.commands.add(editorElement, 'bracket-matcher:remove-matching-brackets', (function(_this) {
        return function() {
          return _this.removeMatchingBrackets();
        };
      })(this)));
      this.subscriptions.add(this.editor.onDidDestroy(this.destroy));
      this.updateMatch();
    }

    BracketMatcherView.prototype.destroy = function() {
      return this.subscriptions.dispose();
    };

    BracketMatcherView.prototype.updateMatch = function() {
      var currentPair, matchPosition, matchingPair, pair, position, ref1, ref2;
      if (this.pairHighlighted) {
        this.editor.destroyMarker(this.startMarker.id);
        this.editor.destroyMarker(this.endMarker.id);
      }
      this.pairHighlighted = false;
      this.tagHighlighted = false;
      if (!this.editor.getLastSelection().isEmpty()) {
        return;
      }
      if (this.editor.isFoldedAtCursorRow()) {
        return;
      }
      if (this.isCursorOnCommentOrString()) {
        return;
      }
      ref1 = this.findCurrentPair(this.matchManager.pairedCharacters), position = ref1.position, currentPair = ref1.currentPair, matchingPair = ref1.matchingPair;
      if (position) {
        matchPosition = this.findMatchingEndPair(position, currentPair, matchingPair);
      } else {
        ref2 = this.findCurrentPair(this.matchManager.pairedCharactersInverse), position = ref2.position, currentPair = ref2.currentPair, matchingPair = ref2.matchingPair;
        if (position) {
          matchPosition = this.findMatchingStartPair(position, matchingPair, currentPair);
        }
      }
      if ((position != null) && (matchPosition != null)) {
        this.startMarker = this.createMarker([position, position.traverse([0, 1])]);
        this.endMarker = this.createMarker([matchPosition, matchPosition.traverse([0, 1])]);
        return this.pairHighlighted = true;
      } else {
        if (pair = this.tagFinder.findMatchingTags()) {
          this.startMarker = this.createMarker(pair.startRange);
          this.endMarker = this.createMarker(pair.endRange);
          this.pairHighlighted = true;
          return this.tagHighlighted = true;
        }
      }
    };

    BracketMatcherView.prototype.removeMatchingBrackets = function() {
      if (this.editor.hasMultipleCursors()) {
        return this.editor.backspace();
      }
      return this.editor.transact((function(_this) {
        return function() {
          var currentPair, matchPosition, matchingPair, position, ref1, ref2, text;
          if (_this.editor.getLastSelection().isEmpty()) {
            _this.editor.selectLeft();
          }
          text = _this.editor.getSelectedText();
          if (_this.matchManager.pairedCharacters.hasOwnProperty(text) || _this.matchManager.pairedCharactersInverse.hasOwnProperty(text)) {
            ref1 = _this.findCurrentPair(_this.matchManager.pairedCharacters), position = ref1.position, currentPair = ref1.currentPair, matchingPair = ref1.matchingPair;
            if (position) {
              matchPosition = _this.findMatchingEndPair(position, currentPair, matchingPair);
            } else {
              ref2 = _this.findCurrentPair(_this.matchManager.pairedCharactersInverse), position = ref2.position, currentPair = ref2.currentPair, matchingPair = ref2.matchingPair;
              if (position) {
                matchPosition = _this.findMatchingStartPair(position, matchingPair, currentPair);
              }
            }
            if ((position != null) && (matchPosition != null)) {
              _this.editor.setCursorBufferPosition(matchPosition);
              _this.editor["delete"]();
              if (position.row === matchPosition.row && _this.matchManager.pairedCharactersInverse.hasOwnProperty(currentPair)) {
                position = position.traverse([0, -1]);
              }
              _this.editor.setCursorBufferPosition(position);
              return _this.editor["delete"]();
            } else {
              return _this.editor.backspace();
            }
          } else {
            return _this.editor.backspace();
          }
        };
      })(this));
    };

    BracketMatcherView.prototype.findMatchingEndPair = function(startPairPosition, startPair, endPair) {
      var endPairPosition, scanRange, unpairedCount;
      if (startPair === endPair) {
        return;
      }
      scanRange = new Range(startPairPosition.traverse([0, 1]), startPairPosition.traverse([MAX_ROWS_TO_SCAN, 0]));
      endPairPosition = null;
      unpairedCount = 0;
      this.editor.scanInBufferRange(this.matchManager.pairRegexes[startPair], scanRange, (function(_this) {
        return function(result) {
          if (_this.isRangeCommentedOrString(result.range)) {
            return;
          }
          switch (result.match[0]) {
            case startPair:
              return unpairedCount++;
            case endPair:
              unpairedCount--;
              if (unpairedCount < 0) {
                endPairPosition = result.range.start;
                return result.stop();
              }
          }
        };
      })(this));
      return endPairPosition;
    };

    BracketMatcherView.prototype.findMatchingStartPair = function(endPairPosition, startPair, endPair) {
      var scanRange, startPairPosition, unpairedCount;
      if (startPair === endPair) {
        return;
      }
      scanRange = new Range(endPairPosition.traverse([-MAX_ROWS_TO_SCAN, 0]), endPairPosition);
      startPairPosition = null;
      unpairedCount = 0;
      this.editor.backwardsScanInBufferRange(this.matchManager.pairRegexes[startPair], scanRange, (function(_this) {
        return function(result) {
          if (_this.isRangeCommentedOrString(result.range)) {
            return;
          }
          switch (result.match[0]) {
            case startPair:
              unpairedCount--;
              if (unpairedCount < 0) {
                startPairPosition = result.range.start;
                return result.stop();
              }
              break;
            case endPair:
              return unpairedCount++;
          }
        };
      })(this));
      return startPairPosition;
    };

    BracketMatcherView.prototype.findAnyStartPair = function(cursorPosition) {
      var combinedRegExp, endPair, endPairRegExp, scanRange, startPair, startPairRegExp, startPosition, unpairedCount;
      scanRange = new Range([0, 0], cursorPosition);
      startPair = _.escapeRegExp(_.keys(this.matchManager.pairedCharacters).join(''));
      endPair = _.escapeRegExp(_.keys(this.matchManager.pairedCharactersInverse).join(''));
      combinedRegExp = new RegExp("[" + startPair + endPair + "]", 'g');
      startPairRegExp = new RegExp("[" + startPair + "]", 'g');
      endPairRegExp = new RegExp("[" + endPair + "]", 'g');
      startPosition = null;
      unpairedCount = 0;
      this.editor.backwardsScanInBufferRange(combinedRegExp, scanRange, (function(_this) {
        return function(result) {
          if (_this.isRangeCommentedOrString(result.range)) {
            return;
          }
          if (result.match[0].match(endPairRegExp)) {
            return unpairedCount++;
          } else if (result.match[0].match(startPairRegExp)) {
            unpairedCount--;
            if (unpairedCount < 0) {
              startPosition = result.range.start;
              return result.stop();
            }
          }
        };
      })(this));
      return startPosition;
    };

    BracketMatcherView.prototype.createMarker = function(bufferRange) {
      var marker;
      marker = this.editor.markBufferRange(bufferRange);
      this.editor.decorateMarker(marker, {
        type: 'highlight',
        "class": 'bracket-matcher',
        deprecatedRegionClass: 'bracket-matcher'
      });
      return marker;
    };

    BracketMatcherView.prototype.findCurrentPair = function(matches) {
      var currentPair, matchingPair, position;
      position = this.editor.getCursorBufferPosition();
      currentPair = this.editor.getTextInRange(Range.fromPointWithDelta(position, 0, 1));
      if (!matches[currentPair]) {
        position = position.traverse([0, -1]);
        currentPair = this.editor.getTextInRange(Range.fromPointWithDelta(position, 0, 1));
      }
      if (matchingPair = matches[currentPair]) {
        return {
          position: position,
          currentPair: currentPair,
          matchingPair: matchingPair
        };
      } else {
        return {};
      }
    };

    BracketMatcherView.prototype.goToMatchingPair = function() {
      var endPosition, endRange, position, previousPosition, ref1, startPosition, startRange, tagCharacterOffset, tagLength;
      if (!this.pairHighlighted) {
        return this.goToEnclosingPair();
      }
      position = this.editor.getCursorBufferPosition();
      if (this.tagHighlighted) {
        startRange = this.startMarker.getBufferRange();
        tagLength = startRange.end.column - startRange.start.column;
        endRange = this.endMarker.getBufferRange();
        if (startRange.compare(endRange) > 0) {
          ref1 = [endRange, startRange], startRange = ref1[0], endRange = ref1[1];
        }
        startRange = new Range(startRange.start.traverse([0, -1]), endRange.end.traverse([0, -1]));
        endRange = new Range(endRange.start.traverse([0, -2]), endRange.end.traverse([0, -2]));
        if (position.isLessThan(endRange.start)) {
          tagCharacterOffset = position.column - startRange.start.column;
          if (tagCharacterOffset > 0) {
            tagCharacterOffset++;
          }
          tagCharacterOffset = Math.min(tagCharacterOffset, tagLength + 2);
          return this.editor.setCursorBufferPosition(endRange.start.traverse([0, tagCharacterOffset]));
        } else {
          tagCharacterOffset = position.column - endRange.start.column;
          if (tagCharacterOffset > 1) {
            tagCharacterOffset--;
          }
          tagCharacterOffset = Math.min(tagCharacterOffset, tagLength + 1);
          return this.editor.setCursorBufferPosition(startRange.start.traverse([0, tagCharacterOffset]));
        }
      } else {
        previousPosition = position.traverse([0, -1]);
        startPosition = this.startMarker.getStartBufferPosition();
        endPosition = this.endMarker.getStartBufferPosition();
        if (position.isEqual(startPosition)) {
          return this.editor.setCursorBufferPosition(endPosition.traverse([0, 1]));
        } else if (previousPosition.isEqual(startPosition)) {
          return this.editor.setCursorBufferPosition(endPosition);
        } else if (position.isEqual(endPosition)) {
          return this.editor.setCursorBufferPosition(startPosition.traverse([0, 1]));
        } else if (previousPosition.isEqual(endPosition)) {
          return this.editor.setCursorBufferPosition(startPosition);
        }
      }
    };

    BracketMatcherView.prototype.goToEnclosingPair = function() {
      var endRange, matchPosition, pair, ref1, startRange;
      if (this.pairHighlighted) {
        return;
      }
      if (matchPosition = this.findAnyStartPair(this.editor.getCursorBufferPosition())) {
        return this.editor.setCursorBufferPosition(matchPosition);
      } else if (pair = this.tagFinder.findEnclosingTags()) {
        startRange = pair.startRange, endRange = pair.endRange;
        if (startRange.compare(endRange) > 0) {
          ref1 = [endRange, startRange], startRange = ref1[0], endRange = ref1[1];
        }
        return this.editor.setCursorBufferPosition(pair.startRange.start);
      }
    };

    BracketMatcherView.prototype.selectInsidePair = function() {
      var endPosition, endRange, pair, rangeToSelect, ref1, ref2, startPair, startPosition, startRange;
      if (this.pairHighlighted) {
        startRange = this.startMarker.getBufferRange();
        endRange = this.endMarker.getBufferRange();
        if (startRange.compare(endRange) > 0) {
          ref1 = [endRange, startRange], startRange = ref1[0], endRange = ref1[1];
        }
        if (this.tagHighlighted) {
          startPosition = startRange.end;
          endPosition = endRange.start.traverse([0, -2]);
        } else {
          startPosition = startRange.start;
          endPosition = endRange.start;
        }
      } else {
        if (startPosition = this.findAnyStartPair(this.editor.getCursorBufferPosition())) {
          startPair = this.editor.getTextInRange(Range.fromPointWithDelta(startPosition, 0, 1));
          endPosition = this.findMatchingEndPair(startPosition, startPair, this.matchManager.pairedCharacters[startPair]);
        } else if (pair = this.tagFinder.findEnclosingTags()) {
          startRange = pair.startRange, endRange = pair.endRange;
          if (startRange.compare(endRange) > 0) {
            ref2 = [endRange, startRange], startRange = ref2[0], endRange = ref2[1];
          }
          startPosition = startRange.end;
          endPosition = endRange.start.traverse([0, -2]);
        }
      }
      if ((startPosition != null) && (endPosition != null)) {
        rangeToSelect = new Range(startPosition.traverse([0, 1]), endPosition);
        return this.editor.setSelectedBufferRange(rangeToSelect);
      }
    };

    BracketMatcherView.prototype.closeTag = function() {
      var cursorPosition, postFragment, preFragment, tag;
      cursorPosition = this.editor.getCursorBufferPosition();
      preFragment = this.editor.getTextInBufferRange([[0, 0], cursorPosition]);
      postFragment = this.editor.getTextInBufferRange([cursorPosition, [2e308, 2e308]]);
      if (tag = this.tagFinder.closingTagForFragments(preFragment, postFragment)) {
        return this.editor.insertText("</" + tag + ">");
      }
    };

    BracketMatcherView.prototype.isCursorOnCommentOrString = function() {
      return this.commentOrStringSelector.matches(this.editor.getLastCursor().getScopeDescriptor().getScopesArray());
    };

    BracketMatcherView.prototype.isRangeCommentedOrString = function(range) {
      return this.commentOrStringSelector.matches(this.editor.scopeDescriptorForBufferPosition(range.start).getScopesArray());
    };

    return BracketMatcherView;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,
