Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

/** @babel */
/** @jsx etch.dom */

var _fsPlus = require('fs-plus');

var _fsPlus2 = _interopRequireDefault(_fsPlus);

var _humanizePlus = require('humanize-plus');

var _humanizePlus2 = _interopRequireDefault(_humanizePlus);

var _lsArchive = require('ls-archive');

var _lsArchive2 = _interopRequireDefault(_lsArchive);

var _atom = require('atom');

var _etch = require('etch');

var _etch2 = _interopRequireDefault(_etch);

var _fileView = require('./file-view');

var _fileView2 = _interopRequireDefault(_fileView);

var _directoryView = require('./directory-view');

var _directoryView2 = _interopRequireDefault(_directoryView);

var ArchiveEditorView = (function () {
  function ArchiveEditorView(editor) {
    var _this = this;

    _classCallCheck(this, ArchiveEditorView);

    this.disposables = new _atom.CompositeDisposable();
    this.entries = [];
    _etch2['default'].initialize(this);
    this.setModel(editor);

    var focusHandler = function focusHandler() {
      _this.focusSelectedFile();
    };
    this.element.addEventListener('focus', focusHandler);
    this.disposables.add(new _atom.Disposable(function () {
      _this.element.removeEventListener('focus', focusHandler);
    }));
  }

  _createClass(ArchiveEditorView, [{
    key: 'update',
    value: function update() {}
  }, {
    key: 'destroy',
    value: function destroy() {
      while (this.entries.length > 0) {
        this.entries.pop().destroy();
      }
      this.disposables.dispose();
      return _etch2['default'].destroy(this);
    }
  }, {
    key: 'render',
    value: function render() {
      return _etch2['default'].dom(
        'div',
        { className: 'archive-editor', tabIndex: '-1' },
        _etch2['default'].dom(
          'div',
          { className: 'archive-container' },
          _etch2['default'].dom(
            'div',
            { ref: 'loadingMessage', className: 'padded icon icon-hourglass text-info' },
            'Loading archiveâ€¦'
          ),
          _etch2['default'].dom('div', { ref: 'errorMessage', className: 'padded icon icon-alert text-error' }),
          _etch2['default'].dom(
            'div',
            { className: 'inset-panel' },
            _etch2['default'].dom('div', { ref: 'summary', className: 'panel-heading' }),
            _etch2['default'].dom('ol', { ref: 'tree', className: 'archive-tree padded list-tree has-collapsable-children' })
          )
        )
      );
    }
  }, {
    key: 'setPath',
    value: function setPath(path) {
      if (path && this.path !== path) {
        this.path = path;
        this.refresh();
      }
    }
  }, {
    key: 'refresh',
    value: function refresh() {
      var _this2 = this;

      this.refs.summary.style.display = 'none';
      this.refs.tree.style.display = 'none';
      this.refs.loadingMessage.style.display = '';
      this.refs.errorMessage.style.display = 'none';

      var originalPath = this.path;
      _lsArchive2['default'].list(this.path, { tree: true }, function (error, entries) {
        if (originalPath !== _this2.path) {
          return;
        }

        _this2.refs.loadingMessage.style.display = 'none';
        if (error != null) {
          var message = 'Reading the archive file failed';
          if (error.message) {
            message += ': ' + error.message;
          }
          _this2.refs.errorMessage.style.display = '';
          _this2.refs.errorMessage.textContent = message;
        } else {
          _this2.createTreeEntries(entries);
          _this2.updateSummary();
        }
      });
    }
  }, {
    key: 'createTreeEntries',
    value: function createTreeEntries(entries) {
      while (this.entries.length > 0) {
        this.entries.pop().destroy();
      }

      var index = 0;
      for (var entry of entries) {
        if (entry.isDirectory()) {
          var entryView = new _directoryView2['default'](this, index, this.path, entry);
          this.entries.push(entryView);
          this.refs.tree.appendChild(entryView.element);
        } else {
          var entryView = new _fileView2['default'](this, index, this.path, entry);
          this.entries.push(entryView);
          this.refs.tree.appendChild(entryView.element);
        }
        index++;
      }

      this.refs.tree.style.display = '';
      this.selectFileAfterIndex(-1);
    }
  }, {
    key: 'updateSummary',
    value: function updateSummary() {
      var fileCount = this.entries.filter(function (entry) {
        return entry instanceof _fileView2['default'];
      });
      var fileLabel = fileCount === 1 ? '1 file' : _humanizePlus2['default'].intComma(fileCount) + ' files';

      var directoryCount = this.entries.filter(function (entry) {
        return entry instanceof _directoryView2['default'];
      });
      var directoryLabel = directoryCount === 1 ? '1 folder' : _humanizePlus2['default'].intComma(directoryCount) + ' folders';

      this.refs.summary.style.display = '';
      this.refs.summary.textContent = _humanizePlus2['default'].fileSize(_fsPlus2['default'].getSizeSync(this.path)) + ' with ' + fileLabel + ' and ' + directoryLabel;
    }
  }, {
    key: 'focusSelectedFile',
    value: function focusSelectedFile() {
      var selectedFile = this.refs.tree.querySelector('.selected');
      if (selectedFile) {
        selectedFile.focus();
      }
    }
  }, {
    key: 'selectFileBeforeIndex',
    value: function selectFileBeforeIndex(index) {
      for (var i = index - 1; i >= 0; i--) {
        var previousEntry = this.entries[i];
        if (previousEntry instanceof _fileView2['default']) {
          previousEntry.select();
          break;
        } else {
          if (previousEntry.selectLastFile()) {
            break;
          }
        }
      }
    }
  }, {
    key: 'selectFileAfterIndex',
    value: function selectFileAfterIndex(index) {
      for (var i = index + 1; i < this.entries.length; i++) {
        var nextEntry = this.entries[i];
        if (nextEntry instanceof _fileView2['default']) {
          nextEntry.select();
          break;
        } else {
          if (nextEntry.selectFirstFile()) {
            break;
          }
        }
      }
    }
  }, {
    key: 'focus',
    value: function focus() {
      this.focusSelectedFile();
    }
  }, {
    key: 'setModel',
    value: function setModel(editor) {
      var _this3 = this;

      if (!editor) {
        return;
      }

      this.editor = editor;
      this.setPath(this.editor.getPath());
      this.disposables.add(this.editor.file.onDidChange(function () {
        _this3.refresh();
      }));
      this.disposables.add(this.editor.file.onDidDelete(function () {
        var pane = atom.workspace.paneForItem(_this3.editor);
        if (pane) {
          pane.destroyItem(_this3.editor);
        }
      }));
    }
  }]);

  return ArchiveEditorView;
})();

exports['default'] = ArchiveEditorView;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vQzovcHJvamVjdHMvYXRvbS9vdXQvYXBwL25vZGVfbW9kdWxlcy9hcmNoaXZlLXZpZXcvbGliL2FyY2hpdmUtZWRpdG9yLXZpZXcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztzQkFHZSxTQUFTOzs7OzRCQUNILGVBQWU7Ozs7eUJBQ2hCLFlBQVk7Ozs7b0JBQ2MsTUFBTTs7b0JBQ25DLE1BQU07Ozs7d0JBRUYsYUFBYTs7Ozs2QkFDUixrQkFBa0I7Ozs7SUFFdkIsaUJBQWlCO0FBQ3hCLFdBRE8saUJBQWlCLENBQ3ZCLE1BQU0sRUFBRTs7OzBCQURGLGlCQUFpQjs7QUFFbEMsUUFBSSxDQUFDLFdBQVcsR0FBRywrQkFBeUIsQ0FBQTtBQUM1QyxRQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQTtBQUNqQixzQkFBSyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDckIsUUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQTs7QUFFckIsUUFBTSxZQUFZLEdBQUcsU0FBZixZQUFZLEdBQVM7QUFDekIsWUFBSyxpQkFBaUIsRUFBRSxDQUFBO0tBQ3pCLENBQUE7QUFDRCxRQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQTtBQUNwRCxRQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxxQkFBZSxZQUFNO0FBQUUsWUFBSyxPQUFPLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFBO0tBQUUsQ0FBQyxDQUFDLENBQUE7R0FDeEc7O2VBWmtCLGlCQUFpQjs7V0FjN0Isa0JBQUcsRUFBRTs7O1dBRUosbUJBQUc7QUFDVCxhQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtBQUM5QixZQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFBO09BQzdCO0FBQ0QsVUFBSSxD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TCxjQUFJLFNBQVMsQ0FBQyxlQUFlLEVBQUUsRUFBRTtBQUMvQixrQkFBSztXQUNOO1NBQ0Y7T0FDRjtLQUNGOzs7V0FFSyxpQkFBRztBQUNQLFVBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFBO0tBQ3pCOzs7V0FFUSxrQkFBQyxNQUFNLEVBQUU7OztBQUNoQixVQUFJLENBQUMsTUFBTSxFQUFFO0FBQ1gsZUFBTTtPQUNQOztBQUVELFVBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO0FBQ3BCLFVBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFBO0FBQ25DLFVBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFNO0FBQ3RELGVBQUssT0FBTyxFQUFFLENBQUE7T0FDZixDQUFDLENBQUMsQ0FBQTtBQUNILFVBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFNO0FBQ3RELFlBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLE9BQUssTUFBTSxDQUFDLENBQUE7QUFDcEQsWUFBSSxJQUFJLEVBQUU7QUFDUixjQUFJLENBQUMsV0FBVyxDQUFDLE9BQUssTUFBTSxDQUFDLENBQUE7U0FDOUI7T0FDRixDQUFDLENBQUMsQ0FBQTtLQUNKOzs7U0FsS2tCLGlCQUFpQjs7O3FCQUFqQixpQkFBaUIiLCJmaWxlIjoiZmlsZTovLy9DOi9wcm9qZWN0cy9hdG9tL291dC9hcHAvbm9kZV9tb2R1bGVzL2FyY2hpdmUtdmlldy9saWIvYXJjaGl2ZS1lZGl0b3Itdmlldy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAYmFiZWwgKi9cbi8qKiBAanN4IGV0Y2guZG9tICovXG5cbmltcG9ydCBmcyBmcm9tICdmcy1wbHVzJ1xuaW1wb3J0IGh1bWFuaXplIGZyb20gJ2h1bWFuaXplLXBsdXMnXG5pbXBvcnQgYXJjaGl2ZSBmcm9tICdscy1hcmNoaXZlJ1xuaW1wb3J0IHtDb21wb3NpdGVEaXNwb3NhYmxlLCBEaXNwb3NhYmxlfSBmcm9tICdhdG9tJ1xuaW1wb3J0IGV0Y2ggZnJvbSAnZXRjaCdcblxuaW1wb3J0IEZpbGVWaWV3IGZyb20gJy4vZmlsZS12aWV3J1xuaW1wb3J0IERpcmVjdG9yeVZpZXcgZnJvbSAnLi9kaXJlY3RvcnktdmlldydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXJjaGl2ZUVkaXRvclZpZXcge1xuICBjb25zdHJ1Y3RvciAoZWRpdG9yKSB7XG4gICAgdGhpcy5kaXNwb3NhYmxlcyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKClcbiAgICB0aGlzLmVudHJpZXMgPSBbXVxuICAgIGV0Y2guaW5pdGlhbGl6ZSh0aGlzKVxuICAgIHRoaXMuc2V0TW9kZWwoZWRpdG9yKVxuXG4gICAgY29uc3QgZm9jdXNIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgdGhpcy5mb2N1c1NlbGVjdGVkRmlsZSgpXG4gICAgfVxuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGZvY3VzSGFuZGxlcilcbiAgICB0aGlzLmRpc3Bvc2FibGVzLmFkZChuZXcgRGlzcG9zYWJsZSgoKSA9PiB7IHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIGZvY3VzSGFuZGxlcikgfSkpXG4gIH1cblxuICB1cGRhdGUgKCkge31cblxuICBkZXN0cm95ICgpIHtcbiAgICB3aGlsZSAodGhpcy5lbnRyaWVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuZW50cmllcy5wb3AoKS5kZXN0cm95KClcbiAgICB9XG4gICAgdGhpcy5kaXNwb3NhYmxlcy5kaXNwb3NlKClcbiAgICByZXR1cm4gZXRjaC5kZXN0cm95KHRoaXMpXG4gIH1cblxuICByZW5kZXIgKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nYXJjaGl2ZS1lZGl0b3InIHRhYkluZGV4PSctMSc+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdhcmNoaXZlLWNvbnRhaW5lcic+XG4gICAgICAgICAgPGRpdiByZWY9J2xvYWRpbmdNZXNzYWdlJyBjbGFzc05hbWU9J3BhZGRlZCBpY29uIGljb24taG91cmdsYXNzIHRleHQtaW5mbyc+e2BMb2FkaW5nIGFyY2hpdmVcXHUyMDI2YH08L2Rpdj5cbiAgICAgICAgICA8ZGl2IHJlZj0nZXJyb3JNZXNzYWdlJyBjbGFzc05hbWU9J3BhZGRlZCBpY29uIGljb24tYWxlcnQgdGV4dC1lcnJvcic+PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2luc2V0LXBhbmVsJz5cbiAgICAgICAgICAgIDxkaXYgcmVmPSdzdW1tYXJ5JyBjbGFzc05hbWU9J3BhbmVsLWhlYWRpbmcnPjwvZGl2PlxuICAgICAgICAgICAgPG9sIHJlZj0ndHJlZScgY2xhc3NOYW1lPSdhcmNoaXZlLXRyZWUgcGFkZGVkIGxpc3QtdHJlZSBoYXMtY29sbGFwc2FibGUtY2hpbGRyZW4nPjwvb2w+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG5cbiAgc2V0UGF0aCAocGF0aCkge1xuICAgIGlmIChwYXRoICYmIHRoaXMucGF0aCAhPT0gcGF0aCkge1xuICAgICAgdGhpcy5wYXRoID0gcGF0aFxuICAgICAgdGhpcy5yZWZyZXNoKClcbiAgICB9XG4gIH1cblxuICByZWZyZXNoICgpIHtcbiAgICB0aGlzLnJlZnMuc3VtbWFyeS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgdGhpcy5yZWZzLnRyZWUuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICAgIHRoaXMucmVmcy5sb2FkaW5nTWVzc2FnZS5zdHlsZS5kaXNwbGF5ID0gJydcbiAgICB0aGlzLnJlZnMuZXJyb3JNZXNzYWdlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcblxuICAgIGNvbnN0IG9yaWdpbmFsUGF0aCA9IHRoaXMucGF0aFxuICAgIGFyY2hpdmUubGlzdCh0aGlzLnBhdGgsIHt0cmVlOiB0cnVlfSwgKGVycm9yLCBlbnRyaWVzKSA9PiB7XG4gICAgICBpZiAob3JpZ2luYWxQYXRoICE9PSB0aGlzLnBhdGgpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIHRoaXMucmVmcy5sb2FkaW5nTWVzc2FnZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgICBpZiAoZXJyb3IgIT0gbnVsbCkge1xuICAgICAgICBsZXQgbWVzc2FnZSA9ICdSZWFkaW5nIHRoZSBhcmNoaXZlIGZpbGUgZmFpbGVkJ1xuICAgICAgICBpZiAoZXJyb3IubWVzc2FnZSkge1xuICAgICAgICAgIG1lc3NhZ2UgKz0gYDogJHtlcnJvci5tZXNzYWdlfWBcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlZnMuZXJyb3JNZXNzYWdlLnN0eWxlLmRpc3BsYXkgPSAnJ1xuICAgICAgICB0aGlzLnJlZnMuZXJyb3JNZXNzYWdlLnRleHRDb250ZW50ID0gbWVzc2FnZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jcmVhdGVUcmVlRW50cmllcyhlbnRyaWVzKVxuICAgICAgICB0aGlzLnVwZGF0ZVN1bW1hcnkoKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBjcmVhdGVUcmVlRW50cmllcyAoZW50cmllcykge1xuICAgIHdoaWxlICh0aGlzLmVudHJpZXMubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5lbnRyaWVzLnBvcCgpLmRlc3Ryb3koKVxuICAgIH1cblxuICAgIGxldCBpbmRleCA9IDBcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpIHtcbiAgICAgIGlmIChlbnRyeS5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgIGNvbnN0IGVudHJ5VmlldyA9IG5ldyBEaXJlY3RvcnlWaWV3KHRoaXMsIGluZGV4LCB0aGlzLnBhdGgsIGVudHJ5KVxuICAgICAgICB0aGlzLmVudHJpZXMucHVzaChlbnRyeVZpZXcpXG4gICAgICAgIHRoaXMucmVmcy50cmVlLmFwcGVuZENoaWxkKGVudHJ5Vmlldy5lbGVtZW50KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgZW50cnlWaWV3ID0gbmV3IEZpbGVWaWV3KHRoaXMsIGluZGV4LCB0aGlzLnBhdGgsIGVudHJ5KVxuICAgICAgICB0aGlzLmVudHJpZXMucHVzaChlbnRyeVZpZXcpXG4gICAgICAgIHRoaXMucmVmcy50cmVlLmFwcGVuZENoaWxkKGVudHJ5Vmlldy5lbGVtZW50KVxuICAgICAgfVxuICAgICAgaW5kZXgrK1xuICAgIH1cblxuICAgIHRoaXMucmVmcy50cmVlLnN0eWxlLmRpc3BsYXkgPSAnJ1xuICAgIHRoaXMuc2VsZWN0RmlsZUFmdGVySW5kZXgoLTEpXG4gIH1cblxuICB1cGRhdGVTdW1tYXJ5ICgpIHtcbiAgICBjb25zdCBmaWxlQ291bnQgPSB0aGlzLmVudHJpZXMuZmlsdGVyKChlbnRyeSkgPT4gZW50cnkgaW5zdGFuY2VvZiBGaWxlVmlldylcbiAgICBjb25zdCBmaWxlTGFiZWwgPSBmaWxlQ291bnQgPT09IDEgPyAnMSBmaWxlJyA6IGAke2h1bWFuaXplLmludENvbW1hKGZpbGVDb3VudCl9IGZpbGVzYFxuXG4gICAgY29uc3QgZGlyZWN0b3J5Q291bnQgPSB0aGlzLmVudHJpZXMuZmlsdGVyKChlbnRyeSkgPT4gZW50cnkgaW5zdGFuY2VvZiBEaXJlY3RvcnlWaWV3KVxuICAgIGNvbnN0IGRpcmVjdG9yeUxhYmVsID0gZGlyZWN0b3J5Q291bnQgPT09IDEgPyAnMSBmb2xkZXInIDogYCR7aHVtYW5pemUuaW50Q29tbWEoZGlyZWN0b3J5Q291bnQpfSBmb2xkZXJzYFxuXG4gICAgdGhpcy5yZWZzLnN1bW1hcnkuc3R5bGUuZGlzcGxheSA9ICcnXG4gICAgdGhpcy5yZWZzLnN1bW1hcnkudGV4dENvbnRlbnQgPSBgJHtodW1hbml6ZS5maWxlU2l6ZShmcy5nZXRTaXplU3luYyh0aGlzLnBhdGgpKX0gd2l0aCAke2ZpbGVMYWJlbH0gYW5kICR7ZGlyZWN0b3J5TGFiZWx9YFxuICB9XG5cbiAgZm9jdXNTZWxlY3RlZEZpbGUgKCkge1xuICAgIGNvbnN0IHNlbGVjdGVkRmlsZSA9IHRoaXMucmVmcy50cmVlLnF1ZXJ5U2VsZWN0b3IoJy5zZWxlY3RlZCcpXG4gICAgaWYgKHNlbGVjdGVkRmlsZSkge1xuICAgICAgc2VsZWN0ZWRGaWxlLmZvY3VzKClcbiAgICB9XG4gIH1cblxuICBzZWxlY3RGaWxlQmVmb3JlSW5kZXggKGluZGV4KSB7XG4gICAgZm9yIChsZXQgaSA9IGluZGV4IC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGNvbnN0IHByZXZpb3VzRW50cnkgPSB0aGlzLmVudHJpZXNbaV1cbiAgICAgIGlmIChwcmV2aW91c0VudHJ5IGluc3RhbmNlb2YgRmlsZVZpZXcpIHtcbiAgICAgICAgcHJldmlvdXNFbnRyeS5zZWxlY3QoKVxuICAgICAgICBicmVha1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHByZXZpb3VzRW50cnkuc2VsZWN0TGFzdEZpbGUoKSkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzZWxlY3RGaWxlQWZ0ZXJJbmRleCAoaW5kZXgpIHtcbiAgICBmb3IgKGxldCBpID0gaW5kZXggKyAxOyBpIDwgdGhpcy5lbnRyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBuZXh0RW50cnkgPSB0aGlzLmVudHJpZXNbaV1cbiAgICAgIGlmIChuZXh0RW50cnkgaW5zdGFuY2VvZiBGaWxlVmlldykge1xuICAgICAgICBuZXh0RW50cnkuc2VsZWN0KClcbiAgICAgICAgYnJlYWtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChuZXh0RW50cnkuc2VsZWN0Rmlyc3RGaWxlKCkpIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9jdXMgKCkge1xuICAgIHRoaXMuZm9jdXNTZWxlY3RlZEZpbGUoKVxuICB9XG5cbiAgc2V0TW9kZWwgKGVkaXRvcikge1xuICAgIGlmICghZWRpdG9yKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLmVkaXRvciA9IGVkaXRvclxuICAgIHRoaXMuc2V0UGF0aCh0aGlzLmVkaXRvci5nZXRQYXRoKCkpXG4gICAgdGhpcy5kaXNwb3NhYmxlcy5hZGQodGhpcy5lZGl0b3IuZmlsZS5vbkRpZENoYW5nZSgoKSA9PiB7XG4gICAgICB0aGlzLnJlZnJlc2goKVxuICAgIH0pKVxuICAgIHRoaXMuZGlzcG9zYWJsZXMuYWRkKHRoaXMuZWRpdG9yLmZpbGUub25EaWREZWxldGUoKCkgPT4ge1xuICAgICAgY29uc3QgcGFuZSA9IGF0b20ud29ya3NwYWNlLnBhbmVGb3JJdGVtKHRoaXMuZWRpdG9yKVxuICAgICAgaWYgKHBhbmUpIHtcbiAgICAgICAgcGFuZS5kZXN0cm95SXRlbSh0aGlzLmVkaXRvcilcbiAgICAgIH1cbiAgICB9KSlcbiAgfVxufVxuIl19