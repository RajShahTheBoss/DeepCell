Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

/** @babel */

var _atom = require('atom');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsPlus = require('fs-plus');

var _fsPlus2 = _interopRequireDefault(_fsPlus);

var _temp = require('temp');

var _temp2 = _interopRequireDefault(_temp);

var _lsArchive = require('ls-archive');

var _lsArchive2 = _interopRequireDefault(_lsArchive);

var _fileIcons = require('./file-icons');

var _fileIcons2 = _interopRequireDefault(_fileIcons);

var FileView = (function () {
  function FileView(parentView, indexInParentView, archivePath, entry) {
    var _name$classList,
        _this = this;

    _classCallCheck(this, FileView);

    this.disposables = new _atom.CompositeDisposable();
    this.parentView = parentView;
    this.indexInParentView = indexInParentView;
    this.archivePath = archivePath;
    this.entry = entry;
    var typeClass = _fileIcons2['default'].getService().iconClassForPath(this.entry.path, 'archive-view') || [];
    if (!Array.isArray(typeClass)) {
      if (typeClass) {
        typeClass = typeClass.toString().split(/\s+/g);
      }
    }

    this.element = document.createElement('li');
    this.element.classList.add('list-item', 'entry');
    this.element.tabIndex = -1;

    this.name = document.createElement('span');
    (_name$classList = this.name.classList).add.apply(_name$classList, ['file', 'icon'].concat(_toConsumableArray(typeClass)));
    this.name.textContent = this.entry.getName();
    this.element.appendChild(this.name);

    var clickHandler = function clickHandler() {
      _this.select();
      _this.openFile();
    };
    this.element.addEventListener('click', clickHandler);
    this.disposables.add(new _atom.Disposable(function () {
      _this.element.removeEventListener('click', clickHandler);
    }));

    this.disposables.add(atom.commands.add(this.element, {
      'core:confirm': function coreConfirm() {
        if (_this.isSelected()) {
          _this.openFile();
        }
      },

      'core:move-down': function coreMoveDown() {
        if (_this.isSelected()) {
          _this.parentView.selectFileAfterIndex(_this.indexInParentView);
        }
      },

      'core:move-up': function coreMoveUp() {
        if (_this.isSelected()) {
          _this.parentView.selectFileBeforeIndex(_this.indexInParentView);
        }
      }
    }));
  }

  _createClass(FileView, [{
    key: 'destroy',
    value: function destroy() {
      this.disposables.dispose();
      this.element.remove();
    }
  }, {
    key: 'isSelected',
    value: function isSelected() {
      return this.element.classList.contains('selected');
    }
  }, {
    key: 'logError',
    value: function logError(message, error) {
      console.error(message, error.stack != null ? error.stack : error);
    }
  }, {
    key: 'openFile',
    value: function openFile() {
      var _this2 = this;

      _lsArchive2['default'].readFile(this.archivePath, this.entry.getPath(), function (error, contents) {
        if (error != null) {
          _this2.logError('Error reading: ' + _this2.entry.getPath() + ' from ' + _this2.archivePath, error);
        } else {
          _temp2['default'].mkdir('atom-', function (error, tempDirPath) {
            if (error != null) {
              _this2.logError('Error creating temp directory: ' + tempDirPath, error);
            } else {
              (function () {
                var tempFilePath = _path2['default'].join(tempDirPath, _path2['default'].basename(_this2.archivePath), _this2.entry.getName());
                _fsPlus2['default'].writeFile(tempFilePath, contents, function (error) {
                  if (error != null) {
                    return _this2.logError('Error writing to ' + tempFilePath, error);
                  } else {
                    return atom.workspace.open(tempFilePath);
                  }
                });
              })();
            }
          });
        }
      });
    }
  }, {
    key: 'select',
    value: function select() {
      for (var selected of this.element.closest('.archive-editor').querySelectorAll('.selected')) {
        selected.classList.remove('selected');
      }
      this.element.classList.add('selected');
      this.element.focus();
    }
  }]);

  return FileView;
})();

exports['default'] = FileView;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,