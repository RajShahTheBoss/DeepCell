Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

/** @babel */

var _iconvLite = require('iconv-lite');

var _iconvLite2 = _interopRequireDefault(_iconvLite);

var _jschardet = require('jschardet');

var _jschardet2 = _interopRequireDefault(_jschardet);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _atomSelectList = require('atom-select-list');

var _atomSelectList2 = _interopRequireDefault(_atomSelectList);

var EncodingListView = (function () {
  function EncodingListView(encodings) {
    var _this = this;

    _classCallCheck(this, EncodingListView);

    this.encodings = encodings;
    this.selectListView = new _atomSelectList2['default']({
      itemsClassList: ['mark-active'],
      items: [],
      filterKeyForItem: function filterKeyForItem(encoding) {
        return encoding.name;
      },
      elementForItem: function elementForItem(encoding) {
        var element = document.createElement('li');
        if (encoding.id === _this.currentEncoding) {
          element.classList.add('active');
        }
        element.textContent = encoding.name;
        element.dataset.encoding = encoding.id;
        return element;
      },
      didConfirmSelection: function didConfirmSelection(encoding) {
        _this.cancel();
        if (encoding.id === 'detect') {
          _this.detectEncoding();
        } else {
          atom.workspace.getActiveTextEditor().setEncoding(encoding.id);
        }
      },
      didCancelSelection: function didCancelSelection() {
        _this.cancel();
      }
    });
    this.selectListView.element.classList.add('encoding-selector');
  }

  _createClass(EncodingListView, [{
    key: 'destroy',
    value: function destroy() {
      this.cancel();
      return this.selectListView.destroy();
    }
  }, {
    key: 'cancel',
    value: function cancel() {
      if (this.panel != null) {
        this.panel.destroy();
      }
      this.panel = null;
      this.currentEncoding = null;
      if (this.previouslyFocusedElement) {
        this.previouslyFocusedElement.focus();
        this.previouslyFocusedElement = null;
      }
    }
  }, {
    key: 'attach',
    value: function attach() {
      this.previouslyFocusedElement = document.activeElement;
      if (this.panel == null) {
        this.panel = atom.workspace.addModalPanel({ item: this.selectListView });
      }
      this.selectListView.focus();
      this.selectListView.reset();
    }
  }, {
    key: 'toggle',
    value: _asyncToGenerator(function* () {
      if (this.panel != null) {
        this.cancel();
      } else if (atom.workspace.getActiveTextEditor()) {
        var editor = atom.workspace.getActiveTextEditor();
        this.currentEncoding = editor.getEncoding();
        var encodingItems = [];

        if (_fs2['default'].existsSync(editor.getPath())) {
          encodingItems.push({ id: 'detect', name: 'Auto Detect' });
        }

        for (var id in this.encodings) {
          encodingItems.push({ id: id, name: this.encodings[id].list });
        }

        yield this.selectListView.update({ items: encodingItems });
        this.attach();
      }
    })
  }, {
    key: 'detectEncoding',
    value: function detectEncoding() {
      var editor = atom.workspace.getActiveTextEditor();
      var filePath = editor.getPath();
      if (_fs2['default'].existsSync(filePath)) {
        _fs2['default'].readFile(filePath, function (error, buffer) {
          if (!error) {
            var _ref = _jschardet2['default'].detect(buffer) || {};

            var encoding = _ref.encoding;

            if (encoding === 'ascii') {
              encoding = 'utf8';
            }

            if (_iconvLite2['default'].encodingExists(encoding)) {
              editor.setEncoding(encoding.toLowerCase().replace(/[^0-9a-z]|:\d{4}$/g, ''));
            }
          }
        });
      }
    }
  }]);

  return EncodingListView;
})();

exports['default'] = EncodingListView;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,