Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

/** @babel */

var _atom = require('atom');

var EncodingStatusView = (function () {
  function EncodingStatusView(statusBar, encodings) {
    var _this = this;

    _classCallCheck(this, EncodingStatusView);

    this.statusBar = statusBar;
    this.encodings = encodings;
    this.element = document.createElement('encoding-selector-status');
    this.element.classList.add('encoding-status', 'inline-block');
    this.encodingLink = document.createElement('a');
    this.encodingLink.classList.add('inline-block');
    this.encodingLink.href = '#';
    this.element.appendChild(this.encodingLink);

    // TODO[v1.19]: Remove conditional once atom.workspace.observeActiveTextEditor ships in Atom v1.19
    if (atom.workspace.observeActiveTextEditor) {
      this.activeItemSubscription = atom.workspace.observeActiveTextEditor(this.subscribeToActiveTextEditor.bind(this));
    } else {
      this.activeItemSubscription = atom.workspace.observeActivePaneItem(this.subscribeToActiveTextEditor.bind(this));
    }

    var clickHandler = function clickHandler(event) {
      event.preventDefault();
      atom.commands.dispatch(atom.workspace.getActiveTextEditor().element, 'encoding-selector:show');
    };
    this.element.addEventListener('click', clickHandler);
    this.clickSubscription = new _atom.Disposable(function () {
      return _this.element.removeEventListener('click', clickHandler);
    });
  }

  _createClass(EncodingStatusView, [{
    key: 'destroy',
    value: function destroy() {
      if (this.activeItemSubscription) {
        this.activeItemSubscription.dispose();
      }

      if (this.encodingSubscription) {
        this.encodingSubscription.dispose();
      }

      if (this.clickSubscription) {
        this.clickSubscription.dispose();
      }

      if (this.tile) {
        this.tile.destroy();
      }

      if (this.tooltip) {
        this.tooltip.dispose();
      }
    }
  }, {
    key: 'attach',
    value: function attach() {
      this.tile = this.statusBar.addRightTile({ priority: 11, item: this.element });
    }
  }, {
    key: 'subscribeToActiveTextEditor',
    value: function subscribeToActiveTextEditor() {
      if (this.encodingSubscription) {
        this.encodingSubscription.dispose();
      }

      var editor = atom.workspace.getActiveTextEditor();
      if (editor) {
        this.encodingSubscription = editor.onDidChangeEncoding(this.updateEncodingText.bind(this));
      }
      this.updateEncodingText();
    }
  }, {
    key: 'updateEncodingText',
    value: function updateEncodingText() {
      var _this2 = this;

      atom.views.updateDocument(function () {
        var editor = atom.workspace.getActiveTextEditor();
        if (editor && editor.getEncoding()) {
          var editorEncoding = editor.getEncoding().toLowerCase().replace(/[^0-9a-z]|:\d{4}$/g, '');
          var encodingLabel = _this2.encodings[editorEncoding] || { status: editorEncoding };
          _this2.encodingLink.textContent = encodingLabel.status;
          _this2.encodingLink.dataset.encoding = editorEncoding;
          _this2.element.style.display = '';

          if (_this2.tooltip) {
            _this2.tooltip.dispose();
          }
          _this2.tooltip = atom.tooltips.add(_this2.encodingLink, { title: 'This file uses ' + encodingLabel.list + ' encoding' });
        } else {
          _this2.element.style.display = 'none';
        }
      });
    }
  }]);

  return EncodingStatusView;
})();

exports['default'] = EncodingStatusView;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,