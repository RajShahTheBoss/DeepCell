(function() {
  var BufferedProcess, CompositeDisposable, Disposable, PackageGeneratorView, TextEditor, _, fs, path, ref,
    slice = [].slice;

  path = require('path');

  _ = require('underscore-plus');

  ref = require('atom'), TextEditor = ref.TextEditor, BufferedProcess = ref.BufferedProcess, CompositeDisposable = ref.CompositeDisposable, Disposable = ref.Disposable;

  fs = require('fs-plus');

  module.exports = PackageGeneratorView = (function() {
    PackageGeneratorView.prototype.previouslyFocusedElement = null;

    PackageGeneratorView.prototype.mode = null;

    function PackageGeneratorView() {
      var blurHandler;
      this.disposables = new CompositeDisposable;
      this.element = document.createElement('div');
      this.element.classList.add('package-generator');
      this.miniEditor = new TextEditor({
        mini: true
      });
      this.element.appendChild(this.miniEditor.element);
      this.error = document.createElement('div');
      this.error.classList.add('error');
      this.element.appendChild(this.error);
      this.message = document.createElement('div');
      this.message.classList.add('message');
      this.element.appendChild(this.message);
      this.disposables.add(atom.commands.add('atom-workspace', {
        'package-generator:generate-package': (function(_this) {
          return function() {
            return _this.attach('package');
          };
        })(this),
        'package-generator:generate-syntax-theme': (function(_this) {
          return function() {
            return _this.attach('theme');
          };
        })(this)
      }));
      blurHandler = (function(_this) {
        return function() {
          return _this.close();
        };
      })(this);
      this.miniEditor.element.addEventListener('blur', blurHandler);
      this.disposables.add(new Disposable((function(_this) {
        return function() {
          return _this.miniEditor.element.removeEventListener('blur', blurHandler);
        };
      })(this)));
      this.disposables.add(atom.commands.add(this.element, {
        'core:confirm': (function(_this) {
          return function() {
            return _this.confirm();
          };
        })(this),
        'core:cancel': (function(_this) {
          return function() {
            return _this.close();
          };
        })(this)
      }));
    }

    PackageGeneratorView.prototype.destroy = function() {
      var ref1;
      if ((ref1 = this.panel) != null) {
        ref1.destroy();
      }
      return this.disposables.dispose();
    };

    PackageGeneratorView.prototype.attach = function(mode) {
      this.mode = mode;
      if (this.panel == null) {
        this.panel = atom.workspace.addModalPanel({
          item: this,
          visible: false
        });
      }
      this.previouslyFocusedElement = document.activeElement;
      this.panel.show();
      this.message.textContent = "Enter " + this.mode + " path";
      if (this.isInPackageMode()) {
        this.setPathText("my-package");
      } else {
        this.setPathText("my-theme-syntax", [0, 8]);
      }
      return this.miniEditor.element.focus();
    };

    PackageGeneratorView.prototype.setPathText = function(placeholderName, rangeToSelect) {
      var endOfDirectoryIndex, packagesDirectory, pathLength;
      if (rangeToSelect == null) {
        rangeToSelect = [0, placeholderName.length];
      }
      packagesDirectory = this.getPackagesDirectory();
      this.miniEditor.setText(path.join(packagesDirectory, placeholderName));
      pathLength = this.miniEditor.getText().length;
      endOfDirectoryIndex = pathLength - placeholderName.length;
      return this.miniEditor.setSelectedBufferRange([[0, endOfDirectoryIndex + rangeToSelect[0]], [0, endOfDirectoryIndex + rangeToSelect[1]]]);
    };

    PackageGeneratorView.prototype.close = function() {
      var ref1;
      if (!this.panel.isVisible()) {
        return;
      }
      this.panel.hide();
      return (ref1 = this.previouslyFocusedElement) != null ? ref1.focus() : void 0;
    };

    PackageGeneratorView.prototype.confirm = function() {
      if (this.validPackagePath()) {
        return this.createPackageFiles((function(_this) {
          return function() {
            var packagePath;
            packagePath = _this.getPackagePath();
            atom.open({
              pathsToOpen: [packagePath]
            });
            return _this.close();
          };
        })(this));
      }
    };

    PackageGeneratorView.prototype.getPackagePath = function() {
      var packageName, packagePath;
      packagePath = fs.normalize(this.miniEditor.getText().trim());
      packageName = _.dasherize(path.basename(packagePath));
      return path.join(path.dirname(packagePath), packageName);
    };

    PackageGeneratorView.prototype.getPackagesDirectory = function() {
      return atom.config.get('core.projectHome') || process.env.ATOM_REPOS_HOME || path.join(fs.getHomeDirectory(), 'github');
    };

    PackageGeneratorView.prototype.validPackagePath = function() {
      if (fs.existsSync(this.getPackagePath())) {
        this.error.textContent = "Path already exists at '" + (this.getPackagePath()) + "'";
        this.error.style.display = 'block';
        return false;
      } else {
        return true;
      }
    };

    PackageGeneratorView.prototype.getInitOptions = function(packagePath) {
      var options;
      options = ["--" + this.mode, packagePath];
      if (this.isInPackageMode()) {
        return slice.call(options).concat(['--syntax'], [atom.config.get('package-generator.packageSyntax')]);
      } else {
        return options;
      }
    };

    PackageGeneratorView.prototype.initPackage = function(packagePath, callback) {
      var command;
      command = ['init'].concat(slice.call(this.getInitOptions(packagePath)));
      return this.runCommand(atom.packages.getApmPath(), command, callback);
    };

    PackageGeneratorView.prototype.linkPackage = function(packagePath, callback) {
      var args;
      args = ['link'];
      if (atom.config.get('package-generator.createInDevMode')) {
        args.push('--dev');
      }
      args.push(packagePath.toString());
      return this.runCommand(atom.packages.getApmPath(), args, callback);
    };

    PackageGeneratorView.prototype.isInPackageMode = function() {
      return this.mode === 'package';
    };

    PackageGeneratorView.prototype.isStoredInDotAtom = function(packagePath) {
      var devPackagesPath, packagesPath;
      packagesPath = path.join(atom.getConfigDirPath(), 'packages', path.sep);
      if (packagePath.indexOf(packagesPath) === 0) {
        return true;
      }
      devPackagesPath = path.join(atom.getConfigDirPath(), 'dev', 'packages', path.sep);
      return packagePath.indexOf(devPackagesPath) === 0;
    };

    PackageGeneratorView.prototype.createPackageFiles = function(callback) {
      var packagePath;
      packagePath = this.getPackagePath();
      if (this.isStoredInDotAtom(packagePath)) {
        return this.initPackage(packagePath, callback);
      } else {
        return this.initPackage(packagePath, (function(_this) {
          return function() {
            return _this.linkPackage(packagePath, callback);
          };
        })(this));
      }
    };

    PackageGeneratorView.prototype.runCommand = function(command, args, exit) {
      return new BufferedProcess({
        command: command,
        args: args,
        exit: exit
      });
    };

    return PackageGeneratorView;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,
