(function() {
  var Reporter, extend, getOsArch, getReleaseChannel, path, post, querystring,
    slice = [].slice;

  path = require('path');

  querystring = require('querystring');

  extend = function() {
    var i, key, len, propertyMap, propertyMaps, target, value;
    target = arguments[0], propertyMaps = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    for (i = 0, len = propertyMaps.length; i < len; i++) {
      propertyMap = propertyMaps[i];
      for (key in propertyMap) {
        value = propertyMap[key];
        target[key] = value;
      }
    }
    return target;
  };

  post = function(url) {
    var xhr;
    xhr = new XMLHttpRequest();
    xhr.open('POST', url);
    return xhr.send(null);
  };

  getReleaseChannel = function() {
    var version;
    version = atom.getVersion();
    if (version.indexOf('beta') > -1) {
      return 'beta';
    } else if (version.indexOf('dev') > -1) {
      return 'dev';
    } else {
      return 'stable';
    }
  };

  getOsArch = function() {
    if (process.platform === 'win32' && process.env.PROCESSOR_ARCHITEW6432 === 'AMD64') {
      return 'x64';
    }
    return process.arch;
  };

  module.exports = Reporter = (function() {
    function Reporter() {}

    Reporter.consented = function() {
      return atom.config.get('core.telemetryConsent') === 'limited';
    };

    Reporter.sendEvent = function(category, action, label, value) {
      var params;
      params = {
        t: 'event',
        ec: category,
        ea: action
      };
      if (label != null) {
        params.el = label;
      }
      if (value != null) {
        params.ev = value;
      }
      return this.send(params);
    };

    Reporter.sendTiming = function(category, name, value) {
      var params;
      params = {
        t: 'timing',
        utc: category,
        utv: name,
        utt: value
      };
      return this.send(params);
    };

    Reporter.sendException = function(description) {
      var params;
      params = {
        t: 'exception',
        exd: description,
        exf: atom.inDevMode() ? '0' : '1'
      };
      return this.send(params);
    };

    Reporter.viewNameForPaneItem = function(item) {
      var extension, itemPath, name, ref;
      name = (ref = typeof item.getViewClass === "function" ? item.getViewClass().name : void 0) != null ? ref : item.constructor.name;
      itemPath = typeof item.getPath === "function" ? item.getPath() : void 0;
      if (!((itemPath != null) && path.dirname(itemPath) === atom.getConfigDirPath())) {
        return name;
      }
      extension = path.extname(itemPath);
      switch (path.basename(itemPath, extension)) {
        case 'config':
          if (extension === '.json' || extension === '.cson') {
            name = 'UserConfig';
          }
          break;
        case 'init':
          if (extension === '.js' || extension === '.coffee') {
            name = 'UserInitScript';
          }
          break;
        case 'keymap':
          if (extension === '.json' || extension === '.cson') {
            name = 'UserKeymap';
          }
          break;
        case 'snippets':
          if (extension === '.json' || extension === '.cson') {
            name = 'UserSnippets';
          }
          break;
        case 'styles':
          if (extension === '.css' || extension === '.less') {
            name = 'UserStylesheet';
          }
      }
      return name;
    };

    Reporter.sendPaneItem = function(item) {
      var grammarName, params, ref;
      params = {
        t: 'appview',
        cd: this.viewNameForPaneItem(item)
      };
      grammarName = typeof item.getGrammar === "function" ? (ref = item.getGrammar()) != null ? ref.name : void 0 : void 0;
      if (grammarName != null) {
        params.dt = grammarName;
      }
      return this.send(params);
    };

    Reporter.sendCommand = function(commandName) {
      var base, params;
      if (this.commandCount == null) {
        this.commandCount = {};
      }
      if ((base = this.commandCount)[commandName] == null) {
        base[commandName] = 0;
      }
      this.commandCount[commandName]++;
      params = {
        t: 'event',
        ec: 'command',
        ea: commandName.split(':')[0],
        el: commandName,
        ev: this.commandCount[commandName]
      };
      return this.send(params);
    };

    Reporter.send = function(params) {
      if (navigator.onLine) {
        extend(params, {
          v: 1,
          aip: 1,
          tid: 'UA-3769691-33',
          cid: localStorage.getItem('metrics.userId'),
          an: 'atom',
          av: atom.getVersion()
        });
        if (Reporter.consented()) {
          extend(params, Reporter.consentedParams());
        }
        if (Reporter.consented() || Reporter.isTelemetryConsentChoice(params)) {
          return Reporter.request("https://ssl.google-analytics.com/collect?" + (querystring.stringify(params)));
        }
      }
    };

    Reporter.isTelemetryConsentChoice = function(params) {
      return params.t === 'event' && params.ec === 'setting' && params.ea === 'core.telemetryConsent';
    };

    Reporter.request = function(url) {
      return post(url);
    };

    Reporter.consentedParams = function() {
      var memUse;
      memUse = process.memoryUsage();
      return {
        cd2: getOsArch(),
        cd3: process.arch,
        cm1: memUse.heapUsed >> 20,
        cm2: Math.round((memUse.heapUsed / memUse.heapTotal) * 100),
        sr: screen.width + "x" + screen.height,
        vp: innerWidth + "x" + innerHeight,
        aiid: getReleaseChannel()
      };
    };

    return Reporter;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,
