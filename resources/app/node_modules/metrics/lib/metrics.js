(function() {
  var CompositeDisposable, IgnoredCommands, PathRE, Reporter, fs, grim, path, stripPath;

  CompositeDisposable = require('atom').CompositeDisposable;

  path = require('path');

  Reporter = require('./reporter');

  fs = require('fs-plus');

  grim = require('grim');

  IgnoredCommands = {
    'vim-mode:move-up': true,
    'vim-mode:move-down': true,
    'vim-mode:move-left': true,
    'vim-mode:move-right': true
  };

  module.exports = {
    activate: function(arg) {
      var sessionLength;
      sessionLength = arg.sessionLength;
      this.subscriptions = new CompositeDisposable;
      this.shouldIncludePanesAndCommands = Math.random() < 0.05;
      return this.ensureClientId((function(_this) {
        return function() {
          return _this.begin(sessionLength);
        };
      })(this));
    },
    deactivate: function() {
      var ref;
      return (ref = this.subscriptions) != null ? ref.dispose() : void 0;
    },
    serialize: function() {
      return {
        sessionLength: Date.now() - this.sessionStart
      };
    },
    provideReporter: function() {
      return {
        sendEvent: Reporter.sendEvent.bind(Reporter),
        sendTiming: Reporter.sendTiming.bind(Reporter),
        sendException: Reporter.sendException.bind(Reporter)
      };
    },
    begin: function(sessionLength) {
      this.sessionStart = Date.now();
      if (sessionLength) {
        Reporter.sendEvent('window', 'ended', null, sessionLength);
      }
      Reporter.sendEvent('window', 'started');
      this.subscriptions.add(atom.onDidThrowError(function(event) {
        var errorMessage;
        errorMessage = event;
        if (typeof event !== 'string') {
          errorMessage = event.message;
        }
        errorMessage = stripPath(errorMessage) || 'Unknown';
        errorMessage = errorMessage.replace('Uncaught ', '').slice(0, 150);
        return Reporter.sendException(errorMessage);
      }));
      this.subscriptions.add(atom.config.onDidChange('core.telemetryConsent', function(arg) {
        var newValue, oldValue;
        newValue = arg.newValue, oldValue = arg.oldValue;
        if (newValue !== 'undecided') {
          return Reporter.sendEvent('setting', 'core.telemetryConsent', newValue);
        }
      }));
      this.watchPaneItems();
      this.watchCommands();
      this.watchDeprecations();
      if (atom.getLoadSettings().shellLoadTime != null) {
        Reporter.sendTiming('shell', 'load', atom.getLoadSettings().shellLoadTime);
      }
      return process.nextTick(function() {
        return Reporter.sendTiming('core', 'load', atom.getWindowLoadTime());
      });
    },
    ensureClientId: function(callback) {
      if (localStorage.getItem('metrics.userId')) {
        return callback();
      } else if (atom.config.get('metrics.userId')) {
        localStorage.setItem('metrics.userId', atom.config.get('metrics.userId'));
        return callback();
      } else {
        return this.createClientId(function(clientId) {
          localStorage.setItem('metrics.userId', clientId);
          return callback();
        });
      }
    },
    createClientId: function(callback) {
      return callback(require('node-uuid').v4());
    },
    getClientId: function() {
      return localStorage.getItem('metrics.userId');
    },
    watchPaneItems: function() {
      return this.subscriptions.add(atom.workspace.onDidAddPaneItem((function(_this) {
        return function(arg) {
          var item;
          item = arg.item;
          if (!_this.shouldIncludePanesAndCommands) {
            return;
          }
          return Reporter.sendPaneItem(item);
        };
      })(this)));
    },
    watchCommands: function() {
      return this.subscriptions.add(atom.commands.onWillDispatch((function(_this) {
        return function(commandEvent) {
          var eventName, ref;
          if (!_this.shouldIncludePanesAndCommands) {
            return;
          }
          eventName = commandEvent.type;
          if ((ref = commandEvent.detail) != null ? ref.jQueryTrigger : void 0) {
            return;
          }
          if (eventName.startsWith('core:') || eventName.startsWith('editor:')) {
            return;
          }
          if (!(eventName.indexOf(':') > -1)) {
            return;
          }
          if (eventName in IgnoredCommands) {
            return;
          }
          return Reporter.sendCommand(eventName);
        };
      })(this)));
    },
    watchDeprecations: function() {
      this.deprecationCache = {};
      this.packageVersionCache = {};
      atom.packages.onDidActivateInitialPackages((function(_this) {
        return function() {
          var j, len, pack, packages, ref;
          packages = atom.packages.getLoadedPackages();
          for (j = 0, len = packages.length; j < len; j++) {
            pack = packages[j];
            _this.packageVersionCache[pack.name] = (pack != null ? (ref = pack.metadata) != null ? ref.version : void 0 : void 0) || 'unknown';
          }
          setImmediate(function() {
            var deprecation, k, len1, ref1;
            ref1 = grim.getDeprecations();
            for (k = 0, len1 = ref1.length; k < len1; k++) {
              deprecation = ref1[k];
              _this.reportDeprecation(deprecation);
            }
          });
        };
      })(this));
      atom.packages.onDidLoadPackage((function(_this) {
        return function(pack) {
          var ref;
          if (!_this.packageVersionCache[pack.name]) {
            return _this.packageVersionCache[pack.name] = (pack != null ? (ref = pack.metadata) != null ? ref.version : void 0 : void 0) || 'unknown';
          }
        };
      })(this));
      return grim.on('updated', (function(_this) {
        return function(deprecation) {
          return setImmediate(function() {
            return _this.reportDeprecation(deprecation);
          });
        };
      })(this));
    },
    reportDeprecation: function(deprecation) {
      var __, message, nameAndVersion, pack, packageName, ref, ref1, ref2, ref3, stack, version;
      message = deprecation.getMessage().slice(0, 500);
      ref = deprecation.stacks;
      for (__ in ref) {
        stack = ref[__];
        packageName = (ref1 = (ref2 = stack.metadata) != null ? ref2.packageName : void 0) != null ? ref1 : (this.getPackageName(stack) || '').toLowerCase();
        if (!packageName) {
          continue;
        }
        if (!this.packageVersionCache[packageName]) {
          pack = atom.packages.getLoadedPackage(packageName);
          this.packageVersionCache[packageName] = (pack != null ? (ref3 = pack.metadata) != null ? ref3.version : void 0 : void 0) || 'unknown';
        }
        version = this.packageVersionCache[packageName];
        nameAndVersion = packageName + "@" + version;
        if (this.deprecationCache[nameAndVersion + message] == null) {
          this.deprecationCache[nameAndVersion + message] = true;
          Reporter.sendEvent('deprecation-v3', nameAndVersion, message);
        }
      }
    },
    getFileNameFromCallSite: function(callsite) {
      var ref;
      return (ref = callsite.fileName) != null ? ref : callsite.getFileName();
    },
    getPackageName: function(stack) {
      var fileName, i, j, packageName, packagePath, packagePaths, ref, relativePath;
      packagePaths = this.getPackagePathsByPackageName();
      for (i = j = 1, ref = stack.length; 1 <= ref ? j < ref : j > ref; i = 1 <= ref ? ++j : --j) {
        fileName = this.getFileNameFromCallSite(stack[i]);
        if (!fileName) {
          return;
        }
        if (fileName.includes(path.sep + "node_modules" + path.sep)) {
          continue;
        }
        for (packageName in packagePaths) {
          packagePath = packagePaths[packageName];
          relativePath = path.relative(packagePath, fileName);
          if (!/^\.\./.test(relativePath)) {
            return packageName;
          }
        }
        if (atom.getUserInitScriptPath() === fileName) {
          return "init-script";
        }
      }
    },
    getPackagePathsByPackageName: function() {
      var j, len, pack, ref;
      if (this.packagePathsByPackageName != null) {
        return this.packagePathsByPackageName;
      }
      this.packagePathsByPackageName = {};
      ref = atom.packages.getLoadedPackages();
      for (j = 0, len = ref.length; j < len; j++) {
        pack = ref[j];
        this.packagePathsByPackageName[pack.name] = pack.path;
        if (pack.path.indexOf('.atom/dev/packages') > -1 || pack.path.indexOf('.atom/packages') > -1) {
          this.packagePathsByPackageName[pack.name] = fs.absolute(pack.path);
        }
      }
      return this.packagePathsByPackageName;
    }
  };

  PathRE = /'?((\/|\\|[a-z]:\\)[^\s']+)+'?/ig;

  stripPath = function(message) {
    return message.replace(PathRE, '<path>');
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZmlsZTovLy9DOi9wcm9qZWN0cy9hdG9tL291dC9hcHAvbm9kZV9tb2R1bGVzL21ldHJpY3MvbGliL21ldHJpY3MuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQyxzQkFBdUIsT0FBQSxDQUFRLE1BQVI7O0VBRXhCLElBQUEsR0FBTyxPQUFBLENBQVEsTUFBUjs7RUFDUCxRQUFBLEdBQVcsT0FBQSxDQUFRLFlBQVI7O0VBQ1gsRUFBQSxHQUFLLE9BQUEsQ0FBUSxTQUFSOztFQUNMLElBQUEsR0FBTyxPQUFBLENBQVEsTUFBUjs7RUFFUCxlQUFBLEdBQ0U7SUFBQSxrQkFBQSxFQUFvQixJQUFwQjtJQUNBLG9CQUFBLEVBQXNCLElBRHRCO0lBRUEsb0JBQUEsRUFBc0IsSUFGdEI7SUFHQSxxQkFBQSxFQUF1QixJQUh2Qjs7O0VBS0YsTUFBTSxDQUFDLE9BQVAsR0FDRTtJQUFBLFFBQUEsRUFBVSxTQUFDLEdBQUQ7QUFDUixVQUFBO01BRFUsZ0JBQUQ7TUFDVCxJQUFDLENBQUEsYUFBRCxHQUFpQixJQUFJO01BQ3JCLElBQUMsQ0FBQSw2QkFBRCxHQUFpQyxJQUFJLENBQUMsTUFBTCxDQUFBLENBQUEsR0FBZ0I7YUFDakQsSUFBQyxDQUFBLGNBQUQsQ0FBZ0IsQ0FBQSxTQUFBLEtBQUE7ZUFBQSxTQUFBO2lCQUFHLEtBQUMsQ0FBQSxLQUFELENBQU8sYUFBUDtRQUFIO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFoQjtJQUhRLENBQVY7SUFLQSxVQUFBLEVBQVksU0FBQTtBQUNWLFVBQUE7cURBQWMsQ0FBRSxPQUFoQixDQUFBO0lBRFUsQ0FMWjtJQVFBLFNBQUEsRUFBVyxTQUFBO2FBQ1Q7UUFBQSxhQUFBLEVBQWUsSUFBSSxDQUFDLEdBQUwsQ0FBQSxDQUFBLEdBQWEsSUFBQyxDQUFBLFlBQTdCOztJQURTLENBUlg7SUFXQSxlQUFBLEVBQWlCLFNBQUE7YUFD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O1VBQ0UsWUFBQSxHQUFlLElBQUksQ0FBQyxRQUFMLENBQWMsV0FBZCxFQUEyQixRQUEzQjtVQUNmLElBQUEsQ0FBMEIsT0FBTyxDQUFDLElBQVIsQ0FBYSxZQUFiLENBQTFCO0FBQUEsbUJBQU8sWUFBUDs7QUFGRjtRQUdBLElBQXdCLElBQUksQ0FBQyxxQkFBTCxDQUFBLENBQUEsS0FBZ0MsUUFBeEQ7QUFBQSxpQkFBTyxjQUFQOztBQVRGO0lBSGMsQ0E3SGhCO0lBNElBLDRCQUFBLEVBQThCLFNBQUE7QUFDNUIsVUFBQTtNQUFBLElBQXFDLHNDQUFyQztBQUFBLGVBQU8sSUFBQyxDQUFBLDBCQUFSOztNQUNBLElBQUMsQ0FBQSx5QkFBRCxHQUE2QjtBQUM3QjtBQUFBLFdBQUEscUNBQUE7O1FBQ0UsSUFBQyxDQUFBLHlCQUEwQixDQUFBLElBQUksQ0FBQyxJQUFMLENBQTNCLEdBQXdDLElBQUksQ0FBQztRQUM3QyxJQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBVixDQUFrQixvQkFBbEIsQ0FBQSxHQUEwQyxDQUFDLENBQTNDLElBQWdELElBQUksQ0FBQyxJQUFJLENBQUMsT0FBVixDQUFrQixnQkFBbEIsQ0FBQSxHQUFzQyxDQUFDLENBQTFGO1VBQ0UsSUFBQyxDQUFBLHlCQUEwQixDQUFBLElBQUksQ0FBQyxJQUFMLENBQTNCLEdBQXdDLEVBQUUsQ0FBQyxRQUFILENBQVksSUFBSSxDQUFDLElBQWpCLEVBRDFDOztBQUZGO2FBSUEsSUFBQyxDQUFBO0lBUDJCLENBNUk5Qjs7O0VBcUpGLE1BQUEsR0FBUzs7RUFDVCxTQUFBLEdBQVksU0FBQyxPQUFEO1dBQ1YsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsTUFBaEIsRUFBd0IsUUFBeEI7RUFEVTtBQXBLWiIsInNvdXJjZXNDb250ZW50IjpbIntDb21wb3NpdGVEaXNwb3NhYmxlfSA9IHJlcXVpcmUgJ2F0b20nXG5cbnBhdGggPSByZXF1aXJlICdwYXRoJ1xuUmVwb3J0ZXIgPSByZXF1aXJlICcuL3JlcG9ydGVyJ1xuZnMgPSByZXF1aXJlICdmcy1wbHVzJ1xuZ3JpbSA9IHJlcXVpcmUgJ2dyaW0nXG5cbklnbm9yZWRDb21tYW5kcyA9XG4gICd2aW0tbW9kZTptb3ZlLXVwJzogdHJ1ZVxuICAndmltLW1vZGU6bW92ZS1kb3duJzogdHJ1ZVxuICAndmltLW1vZGU6bW92ZS1sZWZ0JzogdHJ1ZVxuICAndmltLW1vZGU6bW92ZS1yaWdodCc6IHRydWVcblxubW9kdWxlLmV4cG9ydHMgPVxuICBhY3RpdmF0ZTogKHtzZXNzaW9uTGVuZ3RofSkgLT5cbiAgICBAc3Vic2NyaXB0aW9ucyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlXG4gICAgQHNob3VsZEluY2x1ZGVQYW5lc0FuZENvbW1hbmRzID0gTWF0aC5yYW5kb20oKSA8IDAuMDVcbiAgICBAZW5zdXJlQ2xpZW50SWQgPT4gQGJlZ2luKHNlc3Npb25MZW5ndGgpXG5cbiAgZGVhY3RpdmF0ZTogLT5cbiAgICBAc3Vic2NyaXB0aW9ucz8uZGlzcG9zZSgpXG5cbiAgc2VyaWFsaXplOiAtPlxuICAgIHNlc3Npb25MZW5ndGg6IERhdGUubm93KCkgLSBAc2Vzc2lvblN0YXJ0XG5cbiAgcHJvdmlkZVJlcG9ydGVyOiAtPlxuICAgIHNlbmRFdmVudDogUmVwb3J0ZXIuc2VuZEV2ZW50LmJpbmQoUmVwb3J0ZXIpXG4gICAgc2VuZFRpbWluZzogUmVwb3J0ZXIuc2VuZFRpbWluZy5iaW5kKFJlcG9ydGVyKVxuICAgIHNlbmRFeGNlcHRpb246IFJlcG9ydGVyLnNlbmRFeGNlcHRpb24uYmluZChSZXBvcnRlcilcblxuICBiZWdpbjogKHNlc3Npb25MZW5ndGgpIC0+XG4gICAgQHNlc3Npb25TdGFydCA9IERhdGUubm93KClcblxuICAgIFJlcG9ydGVyLnNlbmRFdmVudCgnd2luZG93JywgJ2VuZGVkJywgbnVsbCwgc2Vzc2lvbkxlbmd0aCkgaWYgc2Vzc2lvbkxlbmd0aFxuICAgIFJlcG9ydGVyLnNlbmRFdmVudCgnd2luZG93JywgJ3N0YXJ0ZWQnKVxuXG4gICAgQHN1YnNjcmlwdGlvbnMuYWRkIGF0b20ub25EaWRUaHJvd0Vycm9yIChldmVudCkgLT5cbiAgICAgIGVycm9yTWVzc2FnZSA9IGV2ZW50XG4gICAgICBlcnJvck1lc3NhZ2UgPSBldmVudC5tZXNzYWdlIGlmIHR5cGVvZiBldmVudCBpc250ICdzdHJpbmcnXG4gICAgICBlcnJvck1lc3NhZ2UgPSBzdHJpcFBhdGgoZXJyb3JNZXNzYWdlKSBvciAnVW5rbm93bidcbiAgICAgIGVycm9yTWVzc2FnZSA9IGVycm9yTWVzc2FnZS5yZXBsYWNlKCdVbmNhdWdodCAnLCAnJykuc2xpY2UoMCwgMTUwKVxuICAgICAgUmVwb3J0ZXIuc2VuZEV4Y2VwdGlvbihlcnJvck1lc3NhZ2UpXG5cbiAgICBAc3Vic2NyaXB0aW9ucy5hZGQgYXRvbS5jb25maWcub25EaWRDaGFuZ2UgJ2NvcmUudGVsZW1ldHJ5Q29uc2VudCcsICh7bmV3VmFsdWUsIG9sZFZhbHVlfSkgLT5cbiAgICAgIFJlcG9ydGVyLnNlbmRFdmVudCAnc2V0dGluZycsICdjb3JlLnRlbGVtZXRyeUNvbnNlbnQnLCBuZXdWYWx1ZSB1bmxlc3MgbmV3VmFsdWUgaXMgJ3VuZGVjaWRlZCdcblxuICAgIEB3YXRjaFBhbmVJdGVtcygpXG4gICAgQHdhdGNoQ29tbWFuZHMoKVxuICAgIEB3YXRjaERlcHJlY2F0aW9ucygpXG5cbiAgICBpZiBhdG9tLmdldExvYWRTZXR0aW5ncygpLnNoZWxsTG9hZFRpbWU/XG4gICAgICAjIE9ubHkgc2VuZCBzaGVsbCBsb2FkIHRpbWUgZm9yIHRoZSBmaXJzdCB3aW5kb3dcbiAgICAgIFJlcG9ydGVyLnNlbmRUaW1pbmcoJ3NoZWxsJywgJ2xvYWQnLCBhdG9tLmdldExvYWRTZXR0aW5ncygpLnNoZWxsTG9hZFRpbWUpXG5cbiAgICBwcm9jZXNzLm5leHRUaWNrIC0+XG4gICAgICAjIFdhaXQgdW50aWwgd2luZG93IGlzIGZ1bGx5IGJvb3RzdHJhcHBlZCBiZWZvcmUgc2VuZGluZyB0aGUgbG9hZCB0aW1lXG4gICAgICBSZXBvcnRlci5zZW5kVGltaW5nKCdjb3JlJywgJ2xvYWQnLCBhdG9tLmdldFdpbmRvd0xvYWRUaW1lKCkpXG5cbiAgZW5zdXJlQ2xpZW50SWQ6IChjYWxsYmFjaykgLT5cbiAgICAjIEluY29ycmVjdGx5IHByZXZpb3VzbHkgY2FsbGVkIHVzZXJJZC4gSXQncyBhY3R1YWxseSBhIGNsaWVudElkIChpLmUuIG5vdCBhY3Jvc3MgZGV2aWNlcylcbiAgICBpZiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbWV0cmljcy51c2VySWQnKVxuICAgICAgY2FsbGJhY2soKVxuICAgIGVsc2UgaWYgYXRvbS5jb25maWcuZ2V0KCdtZXRyaWNzLnVzZXJJZCcpXG4gICAgICAjIGxlZ2FjeS4gVXNlcnMgd2hvIGhhZCB0aGUgbWV0cmljcyBpZCBpbiB0aGVpciBjb25maWcgZmlsZVxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ21ldHJpY3MudXNlcklkJywgYXRvbS5jb25maWcuZ2V0KCdtZXRyaWNzLnVzZXJJZCcpKVxuICAgICAgY2FsbGJhY2soKVxuICAgIGVsc2VcbiAgICAgIEBjcmVhdGVDbGllbnRJZCAoY2xpZW50SWQpIC0+XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdtZXRyaWNzLnVzZXJJZCcsIGNsaWVudElkKVxuICAgICAgICBjYWxsYmFjaygpXG5cbiAgY3JlYXRlQ2xpZW50SWQ6IChjYWxsYmFjaykgLT5cbiAgICBjYWxsYmFjayByZXF1aXJlKCdub2RlLXV1aWQnKS52NCgpXG5cbiAgZ2V0Q2xpZW50SWQ6IC0+XG4gICAgbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ21ldHJpY3MudXNlcklkJylcblxuICB3YXRjaFBhbmVJdGVtczogLT5cbiAgICBAc3Vic2NyaXB0aW9ucy5hZGQgYXRvbS53b3Jrc3BhY2Uub25EaWRBZGRQYW5lSXRlbSAoe2l0ZW19KSA9PlxuICAgICAgcmV0dXJuIHVubGVzcyBAc2hvdWxkSW5jbHVkZVBhbmVzQW5kQ29tbWFuZHNcbiAgICAgIFJlcG9ydGVyLnNlbmRQYW5lSXRlbShpdGVtKVxuXG4gIHdhdGNoQ29tbWFuZHM6IC0+XG4gICAgQHN1YnNjcmlwdGlvbnMuYWRkIGF0b20uY29tbWFuZHMub25XaWxsRGlzcGF0Y2ggKGNvbW1hbmRFdmVudCkgPT5cbiAgICAgIHJldHVybiB1bmxlc3MgQHNob3VsZEluY2x1ZGVQYW5lc0FuZENvbW1hbmRzXG4gICAgICB7dHlwZTogZXZlbnROYW1lfSA9IGNvbW1hbmRFdmVudFxuICAgICAgcmV0dXJuIGlmIGNvbW1hbmRFdmVudC5kZXRhaWw/LmpRdWVyeVRyaWdnZXJcbiAgICAgIHJldHVybiBpZiBldmVudE5hbWUuc3RhcnRzV2l0aCgnY29yZTonKSBvciBldmVudE5hbWUuc3RhcnRzV2l0aCgnZWRpdG9yOicpXG4gICAgICByZXR1cm4gdW5sZXNzIGV2ZW50TmFtZS5pbmRleE9mKCc6JykgPiAtMVxuICAgICAgcmV0dXJuIGlmIGV2ZW50TmFtZSBvZiBJZ25vcmVkQ29tbWFuZHNcbiAgICAgIFJlcG9ydGVyLnNlbmRDb21tYW5kKGV2ZW50TmFtZSlcblxuICB3YXRjaERlcHJlY2F0aW9uczogLT5cbiAgICBAZGVwcmVjYXRpb25DYWNoZSA9IHt9XG4gICAgQHBhY2thZ2VWZXJzaW9uQ2FjaGUgPSB7fVxuXG4gICAgYXRvbS5wYWNrYWdlcy5vbkRpZEFjdGl2YXRlSW5pdGlhbFBhY2thZ2VzID0+XG4gICAgICBwYWNrYWdlcyA9IGF0b20ucGFja2FnZXMuZ2V0TG9hZGVkUGFja2FnZXMoKVxuICAgICAgZm9yIHBhY2sgaW4gcGFja2FnZXNcbiAgICAgICAgQHBhY2thZ2VWZXJzaW9uQ2FjaGVbcGFjay5uYW1lXSA9IHBhY2s/Lm1ldGFkYXRhPy52ZXJzaW9uIG9yICd1bmtub3duJ1xuXG4gICAgICAjIFJlcG9ydHMgaW5pdGlhbCBkZXByZWNhdGlvbnMgYXMgZGVwcmVjYXRpb25zIG1heSBoYXZlIGhhcHBlbmVkIGJlZm9yZSBtZXRyaWNzIGFjdGl2YXRpb24uXG4gICAgICBzZXRJbW1lZGlhdGUgPT5cbiAgICAgICAgZm9yIGRlcHJlY2F0aW9uIGluIGdyaW0uZ2V0RGVwcmVjYXRpb25zKClcbiAgICAgICAgICBAcmVwb3J0RGVwcmVjYXRpb24oZGVwcmVjYXRpb24pXG4gICAgICAgIHJldHVyblxuXG4gICAgICByZXR1cm5cblxuICAgIGF0b20ucGFja2FnZXMub25EaWRMb2FkUGFja2FnZSAocGFjaykgPT5cbiAgICAgIHVubGVzcyBAcGFja2FnZVZlcnNpb25DYWNoZVtwYWNrLm5hbWVdXG4gICAgICAgIEBwYWNrYWdlVmVyc2lvbkNhY2hlW3BhY2submFtZV0gPSBwYWNrPy5tZXRhZGF0YT8udmVyc2lvbiBvciAndW5rbm93bidcblxuICAgIGdyaW0ub24gJ3VwZGF0ZWQnLCAoZGVwcmVjYXRpb24pID0+XG4gICAgICBzZXRJbW1lZGlhdGUgPT4gQHJlcG9ydERlcHJlY2F0aW9uKGRlcHJlY2F0aW9uKVxuXG4gIHJlcG9ydERlcHJlY2F0aW9uOiAoZGVwcmVjYXRpb24pIC0+XG4gICAgbWVzc2FnZSA9IGRlcHJlY2F0aW9uLmdldE1lc3NhZ2UoKVswLi4uNTAwXVxuXG4gICAgZm9yIF9fLCBzdGFjayBvZiBkZXByZWNhdGlvbi5zdGFja3NcbiAgICAgIHBhY2thZ2VOYW1lID0gc3RhY2subWV0YWRhdGE/LnBhY2thZ2VOYW1lID8gKEBnZXRQYWNrYWdlTmFtZShzdGFjaykgb3IgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgIGNvbnRpbnVlIHVubGVzcyBwYWNrYWdlTmFtZVxuXG4gICAgICB1bmxlc3MgQHBhY2thZ2VWZXJzaW9uQ2FjaGVbcGFja2FnZU5hbWVdXG4gICAgICAgIHBhY2sgPSBhdG9tLnBhY2thZ2VzLmdldExvYWRlZFBhY2thZ2UocGFja2FnZU5hbWUpXG4gICAgICAgIEBwYWNrYWdlVmVyc2lvbkNhY2hlW3BhY2thZ2VOYW1lXSA9IHBhY2s/Lm1ldGFkYXRhPy52ZXJzaW9uIG9yICd1bmtub3duJ1xuXG4gICAgICB2ZXJzaW9uID0gQHBhY2thZ2VWZXJzaW9uQ2FjaGVbcGFja2FnZU5hbWVdXG4gICAgICBuYW1lQW5kVmVyc2lvbiA9IFwiI3twYWNrYWdlTmFtZX1AI3t2ZXJzaW9ufVwiXG5cbiAgICAgIHVubGVzcyBAZGVwcmVjYXRpb25DYWNoZVtuYW1lQW5kVmVyc2lvbiArIG1lc3NhZ2VdP1xuICAgICAgICBAZGVwcmVjYXRpb25DYWNoZVtuYW1lQW5kVmVyc2lvbiArIG1lc3NhZ2VdID0gdHJ1ZVxuICAgICAgICBSZXBvcnRlci5zZW5kRXZlbnQoJ2RlcHJlY2F0aW9uLXYzJywgbmFtZUFuZFZlcnNpb24sIG1lc3NhZ2UpXG5cbiAgICByZXR1cm5cblxuICBnZXRGaWxlTmFtZUZyb21DYWxsU2l0ZTogKGNhbGxzaXRlKSAtPlxuICAgIGNhbGxzaXRlLmZpbGVOYW1lID8gY2FsbHNpdGUuZ2V0RmlsZU5hbWUoKVxuXG4gIGdldFBhY2thZ2VOYW1lOiAoc3RhY2spIC0+XG4gICAgcGFja2FnZVBhdGhzID0gQGdldFBhY2thZ2VQYXRoc0J5UGFja2FnZU5hbWUoKVxuXG4gICAgZm9yIGkgaW4gWzEuLi5zdGFjay5sZW5ndGhdXG4gICAgICBmaWxlTmFtZSA9IEBnZXRGaWxlTmFtZUZyb21DYWxsU2l0ZShzdGFja1tpXSlcbiAgICAgICMgRW1wdHkgd2hlbiBpdCB3YXMgcnVuIGZyb20gdGhlIGRldiBjb25zb2xlXG4gICAgICByZXR1cm4gdW5sZXNzIGZpbGVOYW1lXG4gICAgICAjIENvbnRpbnVlIHRvIG5leHQgc3RhY2sgZW50cnkgaWYgY2FsbCBpcyBpbiBub2RlX21vZHVsZXNcbiAgICAgIGNvbnRpbnVlIGlmIGZpbGVOYW1lLmluY2x1ZGVzKHBhdGguc2VwICsgXCJub2RlX21vZHVsZXNcIiArIHBhdGguc2VwKVxuICAgICAgZm9yIHBhY2thZ2VOYW1lLCBwYWNrYWdlUGF0aCBvZiBwYWNrYWdlUGF0aHNcbiAgICAgICAgcmVsYXRpdmVQYXRoID0gcGF0aC5yZWxhdGl2ZShwYWNrYWdlUGF0aCwgZmlsZU5hbWUpXG4gICAgICAgIHJldHVybiBwYWNrYWdlTmFtZSB1bmxlc3MgL15cXC5cXC4vLnRlc3QocmVsYXRpdmVQYXRoKVxuICAgICAgcmV0dXJuIFwiaW5pdC1zY3JpcHRcIiBpZiBhdG9tLmdldFVzZXJJbml0U2NyaXB0UGF0aCgpIGlzIGZpbGVOYW1lXG4gICAgcmV0dXJuXG5cbiAgZ2V0UGFja2FnZVBhdGhzQnlQYWNrYWdlTmFtZTogLT5cbiAgICByZXR1cm4gQHBhY2thZ2VQYXRoc0J5UGFja2FnZU5hbWUgaWYgQHBhY2thZ2VQYXRoc0J5UGFja2FnZU5hbWU/XG4gICAgQHBhY2thZ2VQYXRoc0J5UGFja2FnZU5hbWUgPSB7fVxuICAgIGZvciBwYWNrIGluIGF0b20ucGFja2FnZXMuZ2V0TG9hZGVkUGFja2FnZXMoKVxuICAgICAgQHBhY2thZ2VQYXRoc0J5UGFja2FnZU5hbWVbcGFjay5uYW1lXSA9IHBhY2sucGF0aFxuICAgICAgaWYgcGFjay5wYXRoLmluZGV4T2YoJy5hdG9tL2Rldi9wYWNrYWdlcycpID4gLTEgb3IgcGFjay5wYXRoLmluZGV4T2YoJy5hdG9tL3BhY2thZ2VzJykgPiAtMVxuICAgICAgICBAcGFja2FnZVBhdGhzQnlQYWNrYWdlTmFtZVtwYWNrLm5hbWVdID0gZnMuYWJzb2x1dGUocGFjay5wYXRoKVxuICAgIEBwYWNrYWdlUGF0aHNCeVBhY2thZ2VOYW1lXG5cblBhdGhSRSA9IC8nPygoXFwvfFxcXFx8W2Etel06XFxcXClbXlxccyddKykrJz8vaWdcbnN0cmlwUGF0aCA9IChtZXNzYWdlKSAtPlxuICBtZXNzYWdlLnJlcGxhY2UoUGF0aFJFLCAnPHBhdGg+JylcbiJdfQ==
