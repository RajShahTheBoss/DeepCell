Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** @babel */
/** @jsx etch.dom */

var _fuzzaldrin = require('fuzzaldrin');

var _fuzzaldrin2 = _interopRequireDefault(_fuzzaldrin);

var _etch = require('etch');

var _etch2 = _interopRequireDefault(_etch);

var _underscorePlus = require('underscore-plus');

var _underscorePlus2 = _interopRequireDefault(_underscorePlus);

var _atom = require('atom');

var _collapsibleSectionPanel = require('./collapsible-section-panel');

var _collapsibleSectionPanel2 = _interopRequireDefault(_collapsibleSectionPanel);

var _packageCard = require('./package-card');

var _packageCard2 = _interopRequireDefault(_packageCard);

var _errorView = require('./error-view');

var _errorView2 = _interopRequireDefault(_errorView);

var _list = require('./list');

var _list2 = _interopRequireDefault(_list);

var _listView = require('./list-view');

var _listView2 = _interopRequireDefault(_listView);

var _utils = require('./utils');

var ThemesPanel = (function (_CollapsibleSectionPanel) {
  _inherits(ThemesPanel, _CollapsibleSectionPanel);

  _createClass(ThemesPanel, null, [{
    key: 'loadPackagesDelay',
    value: function loadPackagesDelay() {
      return 300;
    }
  }]);

  function ThemesPanel(settingsView, packageManager) {
    var _this = this;

    _classCallCheck(this, ThemesPanel);

    _get(Object.getPrototypeOf(ThemesPanel.prototype), 'constructor', this).call(this);

    this.settingsView = settingsView;
    this.packageManager = packageManager;
    _etch2['default'].initialize(this);
    this.items = {
      dev: new _list2['default']('name'),
      core: new _list2['default']('name'),
      user: new _list2['default']('name'),
      git: new _list2['default']('name')
    };
    this.itemViews = {
      dev: new _listView2['default'](this.items.dev, this.refs.devPackages, this.createPackageCard.bind(this)),
      core: new _listView2['default'](this.items.core, this.refs.corePackages, this.createPackageCard.bind(this)),
      user: new _listView2['default'](this.items.user, this.refs.communityPackages, this.createPackageCard.bind(this)),
      git: new _listView2['default'](this.items.git, this.refs.gitPackages, this.createPackageCard.bind(this))
    };

    this.disposables = new _atom.CompositeDisposable();
    this.disposables.add(this.packageManager.on('theme-install-failed theme-uninstall-failed', function (_ref) {
      var pack = _ref.pack;
      var error = _ref.error;

      _this.refs.themeErrors.appendChild(new _errorView2['default'](_this.packageManager, error).element);
    }));
    this.disposables.add(this.handleEvents());
    this.disposables.add(atom.commands.add(this.element, {
      'core:move-up': function coreMoveUp() {
        _this.scrollUp();
      },
      'core:move-down': function coreMoveDown() {
        _this.scrollDown();
      },
      'core:page-up': function corePageUp() {
        _this.pageUp();
      },
      'core:page-down': function corePageDown() {
        _this.pageDown();
      },
      'core:move-to-top': function coreMoveToTop() {
        _this.scrollToTop();
      },
      'core:move-to-bottom': function coreMoveToBottom() {
        _this.scrollToBottom();
      }
    }));
    this.loadPackages();

    this.disposables.add(this.packageManager.on('theme-installed theme-uninstalled', function () {
      var loadPackagesTimeout = undefined;
      clearTimeout(loadPackagesTimeout);
      loadPackagesTimeout = setTimeout(function () {
        _this.populateThemeMenus();
        _this.loadPackages();
      }, ThemesPanel.loadPackagesDelay());
    }));

    this.disposables.add(atom.themes.onDidChangeActiveThemes(function () {
      return _this.updateActiveThemes();
    }));
    this.disposables.add(atom.tooltips.add(this.refs.activeUiThemeSettings, { title: 'Settings' }));
    this.disposables.add(atom.tooltips.add(this.refs.activeSyntaxThemeSettings, { title: 'Settings' }));
    this.updateActiveThemes();

    this.disposables.add(this.refs.filterEditor.onDidStopChanging(function () {
      _this.matchPackages();
    }));
  }

  _createClass(ThemesPanel, [{
    key: 'update',
    value: function update() {}
  }, {
    key: 'focus',
    value: function focus() {
      this.refs.filterEditor.element.focus();
    }
  }, {
    key: 'show',
    value: function show() {
      this.element.style.display = '';
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      this.disposables.dispose();
      return _etch2['default'].destroy(this);
    }
  }, {
    key: 'render',
    value: function render() {
      return _etch2['default'].dom(
        'div',
        { className: 'panels-item', tabIndex: '-1' },
        _etch2['default'].dom(
          'div',
          { className: 'section packages themes-panel' },
          _etch2['default'].dom(
            'div',
            { className: 'section-container' },
            _etch2['default'].dom(
              'div',
              { className: 'section-heading icon icon-paintcan' },
              'Choose a Theme'
            ),
            _etch2['default'].dom(
              'div',
              { className: 'text native-key-bindings', tabIndex: '-1' },
              _etch2['default'].dom(
                'span',
                { className: 'icon icon-question' },
                'You can also style Atom by editing '
              ),
              _etch2['default'].dom(
                'a',
                { className: 'link', onclick: this.didClickOpenUserStyleSheet },
                'your stylesheet'
              )
            ),
            _etch2['default'].dom(
              'div',
              { className: 'themes-picker' },
              _etch2['default'].dom(
                'div',
                { className: 'themes-picker-item control-group' },
                _etch2['default'].dom(
                  'div',
                  { className: 'controls' },
                  _etch2['default'].dom(
                    'label',
                    { className: 'control-label' },
                    _etch2['default'].dom(
                      'div',
                      { className: 'setting-title themes-label text' },
                      'UI Theme'
                    ),
                    _etch2['default'].dom(
                      'div',
                      { className: 'setting-description text theme-description' },
                      'This styles the tabs, status bar, tree view, and dropdowns'
                    )
                  ),
                  _etch2['default'].dom(
                    'div',
                    { className: 'select-container' },
                    _etch2['default'].dom('select', { ref: 'uiMenu', className: 'form-control', onchange: this.didChangeUiMenu.bind(this) }),
                    _etch2['default'].dom('button', {
                      ref: 'activeUiThemeSettings',
                      className: 'btn icon icon-gear active-theme-settings',
                      onclick: this.didClickActiveUiThemeSettings.bind(this) })
                  )
                )
              ),
              _etch2['default'].dom(
                'div',
                { className: 'themes-picker-item control-group' },
                _etch2['default'].dom(
                  'div',
                  { className: 'controls' },
                  _etch2['default'].dom(
                    'label',
                    { className: 'control-label' },
                    _etch2['default'].dom(
                      'div',
                      { className: 'setting-title themes-label text' },
                      'Syntax Theme'
                    ),
                    _etch2['default'].dom(
                      'div',
                      { className: 'setting-description text theme-description' },
                      'This styles the text inside the editor'
                    )
                  ),
                  _etch2['default'].dom(
                    'div',
                    { className: 'select-container' },
                    _etch2['default'].dom('select', { ref: 'syntaxMenu', className: 'form-control', onchange: this.didChangeSyntaxMenu.bind(this) }),
                    _etch2['default'].dom('button', {
                      ref: 'activeSyntaxThemeSettings',
                      className: 'btn icon icon-gear active-syntax-settings',
                      onclick: this.didClickActiveSyntaxThemeSettings.bind(this) })
                  )
                )
              )
            )
          )
        ),
        _etch2['default'].dom(
          'section',
          { className: 'section' },
          _etch2['default'].dom(
            'div',
            { className: 'section-container' },
            _etch2['default'].dom(
              'div',
              { className: 'section-heading icon icon-paintcan' },
              'Installed Themes',
              _etch2['default'].dom(
                'span',
                { ref: 'totalPackages', className: 'section-heading-count badge badge-flexible' },
                '…'
              )
            ),
            _etch2['default'].dom(
              'div',
              { className: 'editor-container' },
              _etch2['default'].dom(_atom.TextEditor, { ref: 'filterEditor', mini: true, placeholderText: 'Filter themes by name' })
            ),
            _etch2['default'].dom('div', { ref: 'themeErrors' }),
            _etch2['default'].dom(
              'section',
              { className: 'sub-section installed-packages' },
              _etch2['default'].dom(
                'h3',
                { ref: 'communityThemesHeader', className: 'sub-section-heading icon icon-paintcan' },
                'Community Themes',
                _etch2['default'].dom(
                  'span',
                  { ref: 'communityCount', className: 'section-heading-count badge badge-flexible' },
                  '…'
                )
              ),
              _etch2['default'].dom(
                'div',
                { ref: 'communityPackages', className: 'container package-container' },
                _etch2['default'].dom(
                  'div',
                  { ref: 'communityLoadingArea', className: 'alert alert-info loading-area icon icon-hourglass' },
                  'Loading themes…'
                )
              )
            ),
            _etch2['default'].dom(
              'section',
              { className: 'sub-section core-packages' },
              _etch2['default'].dom(
                'h3',
                { ref: 'coreThemesHeader', className: 'sub-section-heading icon icon-paintcan' },
                'Core Themes',
                _etch2['default'].dom(
                  'span',
                  { ref: 'coreCount', className: 'section-heading-count badge badge-flexible' },
                  '…'
                )
              ),
              _etch2['default'].dom(
                'div',
                { ref: 'corePackages', className: 'container package-container' },
                _etch2['default'].dom(
                  'div',
                  { ref: 'coreLoadingArea', className: 'alert alert-info loading-area icon icon-hourglass' },
                  'Loading themes…'
                )
              )
            ),
            _etch2['default'].dom(
              'section',
              { className: 'sub-section dev-packages' },
              _etch2['default'].dom(
                'h3',
                { ref: 'developmentThemesHeader', className: 'sub-section-heading icon icon-paintcan' },
                'Development Themes',
                _etch2['default'].dom(
                  'span',
                  { ref: 'devCount', className: 'section-heading-count badge badge-flexible' },
                  '…'
                )
              ),
              _etch2['default'].dom(
                'div',
                { ref: 'devPackages', className: 'container package-container' },
                _etch2['default'].dom(
                  'div',
                  { ref: 'devLoadingArea', className: 'alert alert-info loading-area icon icon-hourglass' },
                  'Loading themes…'
                )
              )
            ),
            _etch2['default'].dom(
              'section',
              { className: 'sub-section git-packages' },
              _etch2['default'].dom(
                'h3',
                { ref: 'gitThemesHeader', className: 'sub-section-heading icon icon-paintcan' },
                'Git Themes',
                _etch2['default'].dom(
                  'span',
                  { ref: 'gitCount', className: 'section-heading-count badge badge-flexible' },
                  '…'
                )
              ),
              _etch2['default'].dom(
                'div',
                { ref: 'gitPackages', className: 'container package-container' },
                _etch2['default'].dom(
                  'div',
                  { ref: 'gitLoadingArea', className: 'alert alert-info loading-area icon icon-hourglass' },
                  'Loading themes…'
                )
              )
            )
          )
        )
      );
    }
  }, {
    key: 'filterThemes',
    value: function filterThemes(packages) {
      packages.dev = packages.dev.filter(function (_ref2) {
        var theme = _ref2.theme;
        return theme;
      });
      packages.user = packages.user.filter(function (_ref3) {
        var theme = _ref3.theme;
        return theme;
      });
      packages.core = packages.core.filter(function (_ref4) {
        var theme = _ref4.theme;
        return theme;
      });
      packages.git = (packages.git || []).filter(function (_ref5) {
        var theme = _ref5.theme;
        return theme;
      });

      for (var pack of packages.core) {
        if (pack.repository == null) {
          pack.repository = 'https://github.com/atom/' + pack.name;
        }
      }

      for (var packageType of ['dev', 'core', 'user', 'git']) {
        for (var pack of packages[packageType]) {
          pack.owner = (0, _utils.ownerFromRepository)(pack.repository);
        }
      }
      return packages;
    }
  }, {
    key: 'sortThemes',
    value: function sortThemes(packages) {
      packages.dev.sort(_utils.packageComparatorAscending);
      packages.core.sort(_utils.packageComparatorAscending);
      packages.user.sort(_utils.packageComparatorAscending);
      packages.git.sort(_utils.packageComparatorAscending);
      return packages;
    }
  }, {
    key: 'loadPackages',
    value: function loadPackages() {
      var _this2 = this;

      this.packageViews = [];
      this.packageManager.getInstalled().then(function (packages) {
        _this2.packages = _this2.sortThemes(_this2.filterThemes(packages));

        _this2.refs.devLoadingArea.remove();
        _this2.items.dev.setItems(_this2.packages.dev);

        _this2.refs.coreLoadingArea.remove();
        _this2.items.core.setItems(_this2.packages.core);

        _this2.refs.communityLoadingArea.remove();
        _this2.items.user.setItems(_this2.packages.user);

        _this2.refs.gitLoadingArea.remove();
        _this2.items.git.setItems(_this2.packages.git);

        // TODO show empty mesage per section

        _this2.updateSectionCounts();
      })['catch'](function (error) {
        _this2.refs.themeErrors.appendChild(new _errorView2['default'](_this2.packageManager, error).element);
      });
    }

    // Update the active UI and syntax themes and populate the menu
  }, {
    key: 'updateActiveThemes',
    value: function updateActiveThemes() {
      this.activeUiTheme = this.getActiveUiTheme();
      this.activeSyntaxTheme = this.getActiveSyntaxTheme();
      this.populateThemeMenus();
      this.toggleActiveThemeButtons();
    }
  }, {
    key: 'toggleActiveThemeButtons',
    value: function toggleActiveThemeButtons() {
      if (this.hasSettings(this.activeUiTheme)) {
        this.refs.activeUiThemeSettings.style.display = '';
      } else {
        this.refs.activeUiThemeSettings.style.display = 'none';
      }

      if (this.hasSettings(this.activeSyntaxTheme)) {
        this.refs.activeSyntaxThemeSettings.display = '';
      } else {
        this.refs.activeSyntaxThemeSettings.display = 'none';
      }
    }
  }, {
    key: 'hasSettings',
    value: function hasSettings(packageName) {
      return this.packageManager.packageHasSettings(packageName);
    }

    // Populate the theme menus from the theme manager's active themes
  }, {
    key: 'populateThemeMenus',
    value: function populateThemeMenus() {
      this.refs.uiMenu.innerHTML = "";
      this.refs.syntaxMenu.innerHTML = "";
      var availableThemes = _underscorePlus2['default'].sortBy(atom.themes.getLoadedThemes(), 'name');
      for (var _ref62 of availableThemes) {
        var _name = _ref62.name;
        var metadata = _ref62.metadata;

        switch (metadata.theme) {
          case 'ui':
            {
              var themeItem = this.createThemeMenuItem(_name);
              if (_name === this.activeUiTheme) {
                themeItem.selected = true;
              }
              this.refs.uiMenu.appendChild(themeItem);
              break;
            }
          case 'syntax':
            {
              var themeItem = this.createThemeMenuItem(_name);
              if (_name === this.activeSyntaxTheme) {
                themeItem.selected = true;
              }
              this.refs.syntaxMenu.appendChild(themeItem);
              break;
            }
        }
      }
    }

    // Get the name of the active ui theme.
  }, {
    key: 'getActiveUiTheme',
    value: function getActiveUiTheme() {
      for (var _ref72 of atom.themes.getActiveThemes()) {
        var _name2 = _ref72.name;
        var metadata = _ref72.metadata;

        if (metadata.theme === 'ui') {
          return _name2;
        }
      }
      return null;
    }

    // Get the name of the active syntax theme.
  }, {
    key: 'getActiveSyntaxTheme',
    value: function getActiveSyntaxTheme() {
      for (var _ref82 of atom.themes.getActiveThemes()) {
        var _name3 = _ref82.name;
        var metadata = _ref82.metadata;

        if (metadata.theme === 'syntax') {
          return _name3;
        }
      }
      return null;
    }

    // Update the config with the selected themes
  }, {
    key: 'updateThemeConfig',
    value: function updateThemeConfig() {
      var themes = [];
      if (this.activeUiTheme) {
        themes.push(this.activeUiTheme);
      }
      if (this.activeSyntaxTheme) {
        themes.push(this.activeSyntaxTheme);
      }
      if (themes.length > 0) {
        atom.config.set("core.themes", themes);
      }
    }
  }, {
    key: 'scheduleUpdateThemeConfig',
    value: function scheduleUpdateThemeConfig() {
      var _this3 = this;

      setTimeout(function () {
        _this3.updateThemeConfig();
      }, 100);
    }

    // Create a menu item for the given theme name.
  }, {
    key: 'createThemeMenuItem',
    value: function createThemeMenuItem(themeName) {
      var title = _underscorePlus2['default'].undasherize(_underscorePlus2['default'].uncamelcase(themeName.replace(/-(ui|syntax)/g, '').replace(/-theme$/g, '')));
      var option = document.createElement('option');
      option.value = themeName;
      option.textContent = title;
      return option;
    }
  }, {
    key: 'createPackageCard',
    value: function createPackageCard(pack) {
      return new _packageCard2['default'](pack, this.settingsView, this.packageManager, { back: 'Themes' });
    }
  }, {
    key: 'filterPackageListByText',
    value: function filterPackageListByText(text) {
      if (!this.packages) {
        return;
      }

      for (var packageType of ['dev', 'core', 'user', 'git']) {
        var allViews = this.itemViews[packageType].getViews();
        var activeViews = this.itemViews[packageType].filterViews(function (pack) {
          if (text === '') {
            return true;
          } else {
            var owner = pack.owner != null ? pack.owner : (0, _utils.ownerFromRepository)(pack.repository);
            var filterText = pack.name + ' ' + owner;
            return _fuzzaldrin2['default'].score(filterText, text) > 0;
          }
        });

        for (var view of allViews) {
          if (view) {
            view.element.style.display = 'none';
            view.element.classList.add('hidden');
          }
        }

        for (var view of activeViews) {
          if (view) {
            view.element.style.display = '';
            view.element.classList.remove('hidden');
          }
        }
      }

      this.updateSectionCounts();
    }
  }, {
    key: 'updateUnfilteredSectionCounts',
    value: function updateUnfilteredSectionCounts() {
      this.updateSectionCount(this.refs.communityThemesHeader, this.refs.communityCount, this.packages.user.length);
      this.updateSectionCount(this.refs.coreThemesHeader, this.refs.coreCount, this.packages.core.length);
      this.updateSectionCount(this.refs.developmentThemesHeader, this.refs.devCount, this.packages.dev.length);
      this.updateSectionCount(this.refs.gitThemesHeader, this.refs.gitCount, this.packages.git.length);

      this.refs.totalPackages.textContent = '' + (this.packages.user.length + this.packages.core.length + this.packages.dev.length + this.packages.git.length);
    }
  }, {
    key: 'updateFilteredSectionCounts',
    value: function updateFilteredSectionCounts() {
      var community = this.notHiddenCardsLength(this.refs.communityPackages);
      this.updateSectionCount(this.refs.communityThemesHeader, this.refs.communityCount, community, this.packages.user.length);

      var dev = this.notHiddenCardsLength(this.refs.devPackages);
      this.updateSectionCount(this.refs.developmentThemesHeader, this.refs.devCount, dev, this.packages.dev.length);

      var core = this.notHiddenCardsLength(this.refs.corePackages);
      this.updateSectionCount(this.refs.coreThemesHeader, this.refs.coreCount, core, this.packages.core.length);

      var git = this.notHiddenCardsLength(this.refs.gitPackages);
      this.updateSectionCount(this.refs.gitThemesHeader, this.refs.gitCount, git, this.packages.git.length);

      var shownThemes = dev + core + community + git;
      var totalThemes = this.packages.user.length + this.packages.core.length + this.packages.dev.length + this.packages.git.length;
      this.refs.totalPackages.textContent = shownThemes + '/' + totalThemes;
    }
  }, {
    key: 'resetSectionHasItems',
    value: function resetSectionHasItems() {
      this.resetCollapsibleSections([this.refs.communityThemesHeader, this.refs.coreThemesHeader, this.refs.developmentThemesHeader, this.refs.gitThemesHeader]);
    }
  }, {
    key: 'matchPackages',
    value: function matchPackages() {
      this.filterPackageListByText(this.refs.filterEditor.getText());
    }
  }, {
    key: 'didClickOpenUserStyleSheet',
    value: function didClickOpenUserStyleSheet(e) {
      e.preventDefault();
      atom.commands.dispatch(atom.views.getView(atom.workspace), 'application:open-your-stylesheet');
    }
  }, {
    key: 'didChangeUiMenu',
    value: function didChangeUiMenu() {
      this.activeUiTheme = this.refs.uiMenu.value;
      this.scheduleUpdateThemeConfig();
    }
  }, {
    key: 'didChangeSyntaxMenu',
    value: function didChangeSyntaxMenu() {
      this.activeSyntaxTheme = this.refs.syntaxMenu.value;
      this.scheduleUpdateThemeConfig();
    }
  }, {
    key: 'didClickActiveUiThemeSettings',
    value: function didClickActiveUiThemeSettings(event) {
      event.stopPropagation();
      var theme = atom.themes.getActiveThemes().find(function (theme) {
        return theme.metadata.theme === 'ui';
      });
      var activeUiTheme = theme != null ? theme.metadata : null;
      if (activeUiTheme != null) {
        this.settingsView.showPanel(this.activeUiTheme, {
          back: 'Themes',
          pack: activeUiTheme
        });
      }
    }
  }, {
    key: 'didClickActiveSyntaxThemeSettings',
    value: function didClickActiveSyntaxThemeSettings(event) {
      event.stopPropagation();
      var theme = atom.themes.getActiveThemes().find(function (theme) {
        return theme.metadata.theme === 'syntax';
      });
      var activeSyntaxTheme = theme != null ? theme.metadata : null;
      if (activeSyntaxTheme != null) {
        this.settingsView.showPanel(this.activeSyntaxTheme, {
          back: 'Themes',
          pack: activeSyntaxTheme
        });
      }
    }
  }, {
    key: 'scrollUp',
    value: function scrollUp() {
      this.element.scrollTop -= document.body.offsetHeight / 20;
    }
  }, {
    key: 'scrollDown',
    value: function scrollDown() {
      this.element.scrollTop += document.body.offsetHeight / 20;
    }
  }, {
    key: 'pageUp',
    value: function pageUp() {
      this.element.scrollTop -= this.element.offsetHeight;
    }
  }, {
    key: 'pageDown',
    value: function pageDown() {
      this.element.scrollTop += this.element.offsetHeight;
    }
  }, {
    key: 'scrollToTop',
    value: function scrollToTop() {
      this.element.scrollTop = 0;
    }
  }, {
    key: 'scrollToBottom',
    value: function scrollToBottom() {
      this.element.scrollTop = this.element.scrollHeight;
    }
  }]);

  return ThemesPanel;
})(_collapsibleSectionPanel2['default']);

exports['default'] = ThemesPanel;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,