(function() {
  var PackageManager, SettingsView, SnippetsProvider, configUri, openPanel, packageManager, settingsView, statusView, uriRegex;

  SettingsView = null;

  settingsView = null;

  statusView = null;

  PackageManager = require('./package-manager');

  packageManager = null;

  SnippetsProvider = {
    getSnippets: function() {
      return atom.config.scopedSettingsStore.propertySets;
    }
  };

  configUri = 'atom://config';

  uriRegex = /config\/([a-z]+)\/?([a-zA-Z0-9_-]+)?/i;

  openPanel = function(settingsView, panelName, uri) {
    var detail, match, options, panel;
    match = uriRegex.exec(uri);
    panel = match != null ? match[1] : void 0;
    detail = match != null ? match[2] : void 0;
    options = {
      uri: uri
    };
    if (panel === "packages" && (detail != null)) {
      panelName = detail;
      options.pack = {
        name: detail
      };
      if (atom.packages.getLoadedPackage(detail)) {
        options.back = 'Packages';
      }
    }
    return settingsView.showPanel(panelName, options);
  };

  module.exports = {
    activate: function() {
      atom.workspace.addOpener((function(_this) {
        return function(uri) {
          var match, panelName;
          if (uri.startsWith(configUri)) {
            if ((settingsView == null) || settingsView.destroyed) {
              settingsView = _this.createSettingsView({
                uri: uri
              });
            }
            if (match = uriRegex.exec(uri)) {
              panelName = match[1];
              panelName = panelName[0].toUpperCase() + panelName.slice(1);
              openPanel(settingsView, panelName, uri);
            }
            return settingsView;
          }
        };
      })(this));
      atom.commands.add('atom-workspace', {
        'settings-view:open': function() {
          return atom.workspace.open(configUri);
        },
        'settings-view:core': function() {
          return atom.workspace.open(configUri + "/core");
        },
        'settings-view:editor': function() {
          return atom.workspace.open(configUri + "/editor");
        },
        'settings-view:show-keybindings': function() {
          return atom.workspace.open(configUri + "/keybindings");
        },
        'settings-view:change-themes': function() {
          return atom.workspace.open(configUri + "/themes");
        },
        'settings-view:install-packages-and-themes': function() {
          return atom.workspace.open(configUri + "/install");
        },
        'settings-view:view-installed-themes': function() {
          return atom.workspace.open(configUri + "/themes");
        },
        'settings-view:uninstall-themes': function() {
          return atom.workspace.open(configUri + "/themes");
        },
        'settings-view:view-installed-packages': function() {
          return atom.workspace.open(configUri + "/packages");
        },
        'settings-view:uninstall-packages': function() {
          return atom.workspace.open(configUri + "/packages");
        },
        'settings-view:check-for-package-updates': function() {
          return atom.workspace.open(configUri + "/updates");
        }
      });
      if (process.platform === 'win32' && (require('atom').WinShell != null)) {
        atom.commands.add('atom-workspace', {
          'settings-view:system': function() {
            return atom.workspace.open(configUri + "/system");
          }
        });
      }
      if (!localStorage.getItem('hasSeenDeprecatedNotification')) {
        if (packageManager == null) {
          packageManager = new PackageManager();
        }
        return packageManager.getInstalled().then((function(_this) {
          return function(packages) {
            var ref;
            if ((ref = packages.user) != null ? ref.length : void 0) {
              return _this.showDeprecatedNotification(packages);
            }
          };
        })(this));
      }
    },
    deactivate: function() {
      if (settingsView != null) {
        settingsView.destroy();
      }
      if (statusView != null) {
        statusView.destroy();
      }
      settingsView = null;
      packageManager = null;
      return statusView = null;
    },
    consumeStatusBar: function(statusBar) {
      if (packageManager == null) {
        packageManager = new PackageManager();
      }
      return packageManager.getOutdated().then(function(updates) {
        var PackageUpdatesStatusView;
        if (packageManager != null) {
          PackageUpdatesStatusView = require('./package-updates-status-view');
          statusView = new PackageUpdatesStatusView();
          return statusView.initialize(statusBar, packageManager, updates);
        }
      });
    },
    consumeSnippets: function(snippets) {
      if (typeof snippets.getUnparsedSnippets === "function") {
        return SnippetsProvider.getSnippets = snippets.getUnparsedSnippets.bind(snippets);
      }
    },
    createSettingsView: function(params) {
      if (SettingsView == null) {
        SettingsView = require('./settings-view');
      }
      if (packageManager == null) {
        packageManager = new PackageManager();
      }
      params.packageManager = packageManager;
      params.snippetsProvider = SnippetsProvider;
      return settingsView = new SettingsView(params);
    },
    showDeprecatedNotification: function(packages) {
      var deprecatedPackages, have, notification, pack, packageText, were;
      localStorage.setItem('hasSeenDeprecatedNotification', true);
      deprecatedPackages = packages.user.filter(function(arg) {
        var name, version;
        name = arg.name, version = arg.version;
        return atom.packages.isDeprecatedPackage(name, version);
      });
      if (!deprecatedPackages.length) {
        return;
      }
      were = 'were';
      have = 'have';
      packageText = 'packages';
      if (packages.length === 1) {
        packageText = 'package';
        were = 'was';
        have = 'has';
      }
      return notification = atom.notifications.addWarning(deprecatedPackages.length + " " + packageText + " " + have + " deprecations and " + were + " not loaded.", {
        description: 'This message will show only one time. Deprecated packages can be viewed in the settings view.',
        detail: ((function() {
          var i, len, results;
          results = [];
          for (i = 0, len = deprecatedPackages.length; i < len; i++) {
            pack = deprecatedPackages[i];
            results.push(pack.name);
          }
          return results;
        })()).join(', '),
        dismissable: true,
        buttons: [
          {
            text: 'View Deprecated Packages',
            onDidClick: function() {
              atom.commands.dispatch(atom.views.getView(atom.workspace), 'settings-view:view-installed-packages');
              return notification.dismiss();
            }
          }
        ]
      });
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
