Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

/** @babel */

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _atom = require('atom');

var _settingsPanel = require('./settings-panel');

var _settingsPanel2 = _interopRequireDefault(_settingsPanel);

// View to display the grammars that a package has registered.

var PackageGrammarsView = (function () {
  function PackageGrammarsView(packagePath) {
    var _this = this;

    _classCallCheck(this, PackageGrammarsView);

    this.element = document.createElement('section');
    this.element.classList.add('package-grammars');

    this.grammarSettings = document.createElement('div');
    this.element.appendChild(this.grammarSettings);

    this.disposables = new _atom.CompositeDisposable();
    this.packagePath = _path2['default'].join(packagePath, _path2['default'].sep);
    this.addGrammars();
    this.disposables.add(atom.grammars.onDidAddGrammar(function () {
      return _this.addGrammars();
    }));
    this.disposables.add(atom.grammars.onDidUpdateGrammar(function () {
      return _this.addGrammars();
    }));
  }

  _createClass(PackageGrammarsView, [{
    key: 'destroy',
    value: function destroy() {
      this.disposables.dispose();
      this.element.remove();
    }
  }, {
    key: 'getPackageGrammars',
    value: function getPackageGrammars() {
      var packageGrammars = [];
      var grammars = atom.grammars.grammars != null ? atom.grammars.grammars : [];
      for (var grammar of grammars) {
        if (grammar.path) {
          if (grammar.path.indexOf(this.packagePath) === 0) {
            packageGrammars.push(grammar);
          }
        }
      }
      return packageGrammars.sort(function (grammar1, grammar2) {
        var name1 = grammar1.name || grammar1.scopeName || '';
        var name2 = grammar2.name || grammar2.scopeName || '';
        return name1.localeCompare(name2);
      });
    }
  }, {
    key: 'addGrammarHeading',
    value: function addGrammarHeading(grammar, panel) {
      var container = document.createElement('div');
      container.classList.add('native-key-bindings', 'text');
      container.tabIndex = -1;

      var grammarScope = document.createElement('div');
      grammarScope.classList.add('grammar-scope');

      var scopeStrong = document.createElement('strong');
      scopeStrong.textContent = 'Scope: ';
      grammarScope.appendChild(scopeStrong);

      var scopeSpan = document.createElement('span');
      scopeSpan.textContent = grammar.scopeName != null ? grammar.scopeName : '';
      grammarScope.appendChild(scopeSpan);
      container.appendChild(grammarScope);

      var grammarFileTypes = document.createElement('div');
      grammarFileTypes.classList.add('grammar-filetypes');

      var fileTypesStrong = document.createElement('strong');
      fileTypesStrong.textContent = 'File Types: ';
      grammarFileTypes.appendChild(fileTypesStrong);

      var fileTypes = grammar.fileTypes || [];
      var fileTypesSpan = document.createElement('span');
      fileTypesSpan.textContent = fileTypes.join(', ');
      grammarFileTypes.appendChild(fileTypesSpan);
      container.appendChild(grammarFileTypes);

      var sectionBody = panel.element.querySelector('.section-body');
      sectionBody.parentElement.insertBefore(container, sectionBody);
    }
  }, {
    key: 'addGrammars',
    value: function addGrammars() {
      this.grammarSettings.innerHTML = '';
      for (var grammar of this.getPackageGrammars()) {
        var scopeName = grammar.scopeName;
        var _name = grammar.name;

        if (!scopeName || !_name) {
          continue;
        }

        if (!scopeName.startsWith('.')) {
          scopeName = '.' + scopeName;
        }

        var title = _name + ' Grammar';
        var panel = new _settingsPanel2['default']({ title: title, scopeName: scopeName, icon: 'puzzle' });
        this.addGrammarHeading(grammar, panel);
        this.grammarSettings.appendChild(panel.element);
      }
    }
  }]);

  return PackageGrammarsView;
})();

exports['default'] = PackageGrammarsView;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,