Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

/** @babel */

var _underscorePlus = require('underscore-plus');

var _underscorePlus2 = _interopRequireDefault(_underscorePlus);

var _atom = require('atom');

var PackageUpdatesStatusView = (function () {
  function PackageUpdatesStatusView() {
    _classCallCheck(this, PackageUpdatesStatusView);
  }

  _createClass(PackageUpdatesStatusView, [{
    key: 'initialize',
    value: function initialize(statusBar, packageManager, updates) {
      var _this = this;

      this.statusBar = statusBar;
      this.updates = updates;
      this.destroyed = true;
      this.updatingPackages = [];
      this.failedUpdates = [];
      this.disposables = new _atom.CompositeDisposable();

      this.element = document.createElement('div');
      this.element.classList.add('package-updates-status-view', 'inline-block', 'text', 'text-info');

      var iconPackage = document.createElement('span');
      iconPackage.classList.add('icon', 'icon-package');
      this.element.appendChild(iconPackage);

      this.countLabel = document.createElement('span');
      this.countLabel.classList.add('available-updates-status');
      this.element.appendChild(this.countLabel);

      this.disposables.add(packageManager.on('package-update-available theme-update-available', function (_ref) {
        var pack = _ref.pack;
        var error = _ref.error;
        _this.onPackageUpdateAvailable(pack);
      }));
      this.disposables.add(packageManager.on('package-updating theme-updating', function (_ref2) {
        var pack = _ref2.pack;
        var error = _ref2.error;
        _this.onPackageUpdating(pack);
      }));
      this.disposables.add(packageManager.on('package-updated theme-updated', function (_ref3) {
        var pack = _ref3.pack;
        var error = _ref3.error;
        _this.onPackageUpdated(pack);
      }));
      this.disposables.add(packageManager.on('package-update-failed theme-update-failed', function (_ref4) {
        var pack = _ref4.pack;
        var error = _ref4.error;
        _this.onPackageUpdateFailed(pack);
      }));

      var clickHandler = function clickHandler() {
        atom.commands.dispatch(atom.views.getView(atom.workspace), 'settings-view:check-for-package-updates');
      };
      this.element.addEventListener('click', clickHandler);
      this.disposables.add(new _atom.Disposable(function () {
        _this.element.removeEventListener('click', clickHandler);
      }));

      this.updateTile();
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      this.disposables.dispose();
      this.element.remove();

      if (this.tile) {
        this.tile.destroy();
        this.tile = null;
      }

      if (this.tooltip) {
        this.tooltip.dispose();
        this.tooltip = null;
      }
    }
  }, {
    key: 'onPackageUpdateAvailable',
    value: function onPackageUpdateAvailable(pack) {
      for (var update of this.updates) {
        if (update.name === pack.name) {
          return;
        }
      }

      this.updates.push(pack);
      this.updateTile();
    }
  }, {
    key: 'onPackageUpdating',
    value: function onPackageUpdating(pack) {
      this.updatingPackages.push(pack);
      this.updateTile();
    }
  }, {
    key: 'onPackageUpdated',
    value: function onPackageUpdated(pack) {
      for (var index = 0; index < this.updates.length; index++) {
        var update = this.updates[index];
        if (update.name === pack.name) {
          this.updates.splice(index, 1);
        }
      }

      for (var index = 0; index < this.updatingPackages.length; index++) {
        var update = this.updatingPackages[index];
        if (update.name === pack.name) {
          this.updatingPackages.splice(index, 1);
        }
      }

      for (var index = 0; index < this.failedUpdates.length; index++) {
        var update = this.failedUpdates[index];
        if (update.name === pack.name) {
          this.failedUpdates.splice(index, 1);
        }
      }

      this.updateTile();
    }
  }, {
    key: 'onPackageUpdateFailed',
    value: function onPackageUpdateFailed(pack) {
      for (var update of this.failedUpdates) {
        if (update.name === pack.name) {
          return;
        }
      }

      for (var index = 0; index < this.updatingPackages.length; index++) {
        var update = this.updatingPackages[index];
        if (update.name === pack.name) {
          this.updatingPackages.splice(index, 1);
        }
      }

      this.failedUpdates.push(pack);
      this.updateTile();
    }
  }, {
    key: 'updateTile',
    value: function updateTile() {
      if (this.updates.length) {
        if (this.tooltip) {
          this.tooltip.dispose();
          this.tooltip = null;
        }

        if (this.destroyed) {
          // Priority of -99 should put us just to the left of the Squirrel icon, which displays when Atom has updates available
          this.tile = this.statusBar.addRightTile({ item: this, priority: -99 });
          this.destroyed = false;
        }

        var labelText = '' + _underscorePlus2['default'].pluralize(this.updates.length, 'update'); // 5 updates
        var tooltipText = _underscorePlus2['default'].pluralize(this.updates.length, 'package update') + ' available';

        if (this.updatingPackages.length) {
          labelText = this.updatingPackages.length + '/' + this.updates.length + ' updating'; // 3/5 updating
          tooltipText += ', ' + _underscorePlus2['default'].pluralize(this.updatingPackages.length, 'package') + ' currently updating';
        }

        if (this.failedUpdates.length) {
          labelText += ' (' + this.failedUpdates.length + ' failed)'; // 1 update (1 failed), or 3/5 updating (1 failed)
          tooltipText += ', ' + _underscorePlus2['default'].pluralize(this.failedUpdates.length, 'failed update');
        }

        this.countLabel.textContent = labelText;
        this.tooltip = atom.tooltips.add(this.element, { title: tooltipText });
      } else if (!this.destroyed) {
        this.tile.destroy();
        this.tile = null;
        this.destroyed = true;
      }
    }
  }]);

  return PackageUpdatesStatusView;
})();

exports['default'] = PackageUpdatesStatusView;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,