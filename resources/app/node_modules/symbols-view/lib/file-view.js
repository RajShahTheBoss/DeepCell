Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** @babel */

var _atom = require('atom');

var _symbolsView = require('./symbols-view');

var _symbolsView2 = _interopRequireDefault(_symbolsView);

var _tagGenerator = require('./tag-generator');

var _tagGenerator2 = _interopRequireDefault(_tagGenerator);

var _fuzzaldrin = require('fuzzaldrin');

var FileView = (function (_SymbolsView) {
  _inherits(FileView, _SymbolsView);

  function FileView(stack) {
    var _this = this;

    _classCallCheck(this, FileView);

    _get(Object.getPrototypeOf(FileView.prototype), 'constructor', this).call(this, stack);
    this.cachedTags = {};

    this.editorsSubscription = atom.workspace.observeTextEditors(function (editor) {
      var removeFromCache = function removeFromCache() {
        delete _this.cachedTags[editor.getPath()];
      };
      var editorSubscriptions = new _atom.CompositeDisposable();
      editorSubscriptions.add(editor.onDidChangeGrammar(removeFromCache));
      editorSubscriptions.add(editor.onDidSave(removeFromCache));
      editorSubscriptions.add(editor.onDidChangePath(removeFromCache));
      editorSubscriptions.add(editor.getBuffer().onDidReload(removeFromCache));
      editorSubscriptions.add(editor.getBuffer().onDidDestroy(removeFromCache));
      editor.onDidDestroy(function () {
        editorSubscriptions.dispose();
      });
    });
  }

  _createClass(FileView, [{
    key: 'destroy',
    value: function destroy() {
      this.editorsSubscription.dispose();
      return _get(Object.getPrototypeOf(FileView.prototype), 'destroy', this).call(this);
    }
  }, {
    key: 'elementForItem',
    value: function elementForItem(_ref) {
      var position = _ref.position;
      var name = _ref.name;

      // Style matched characters in search results
      var matches = (0, _fuzzaldrin.match)(name, this.selectListView.getFilterQuery());

      var li = document.createElement('li');
      li.classList.add('two-lines');

      var primaryLine = document.createElement('div');
      primaryLine.classList.add('primary-line');
      primaryLine.appendChild(_symbolsView2['default'].highlightMatches(this, name, matches));
      li.appendChild(primaryLine);

      var secondaryLine = document.createElement('div');
      secondaryLine.classList.add('secondary-line');
      secondaryLine.textContent = 'Line ' + (position.row + 1);
      li.appendChild(secondaryLine);

      return li;
    }
  }, {
    key: 'didChangeSelection',
    value: function didChangeSelection(item) {
      if (atom.config.get('symbols-view.quickJumpToFileSymbol') && item) {
        this.openTag(item);
      }
    }
  }, {
    key: 'didCancelSelection',
    value: _asyncToGenerator(function* () {
      yield this.cancel();
      var editor = this.getEditor();
      if (this.initialState && editor) {
        this.deserializeEditorState(editor, this.initialState);
      }
      this.initialState = null;
    })
  }, {
    key: 'toggle',
    value: _asyncToGenerator(function* () {
      if (this.panel.isVisible()) {
        yield this.cancel();
      }
      var filePath = this.getPath();
      if (filePath) {
        var editor = this.getEditor();
        if (atom.config.get('symbols-view.quickJumpToFileSymbol') && editor) {
          this.initialState = this.serializeEditorState(editor);
        }
        this.populate(filePath);
        this.attach();
      }
    })
  }, {
    key: 'serializeEditorState',
    value: function serializeEditorState(editor) {
      var editorElement = atom.views.getView(editor);
      var scrollTop = editorElement.getScrollTop();

      return {
        bufferRanges: editor.getSelectedBufferRanges(),
        scrollTop: scrollTop
      };
    }
  }, {
    key: 'deserializeEditorState',
    value: function deserializeEditorState(editor, _ref2) {
      var bufferRanges = _ref2.bufferRanges;
      var scrollTop = _ref2.scrollTop;

      var editorElement = atom.views.getView(editor);

      editor.setSelectedBufferRanges(bufferRanges);
      editorElement.setScrollTop(scrollTop);
    }
  }, {
    key: 'getEditor',
    value: function getEditor() {
      return atom.workspace.getActiveTextEditor();
    }
  }, {
    key: 'getPath',
    value: function getPath() {
      if (this.getEditor()) {
        return this.getEditor().getPath();
      }
      return undefined;
    }
  }, {
    key: 'getScopeName',
    value: function getScopeName() {
      if (this.getEditor() && this.getEditor().getGrammar()) {
        return this.getEditor().getGrammar().scopeName;
      }
      return undefined;
    }
  }, {
    key: 'populate',
    value: _asyncToGenerator(function* (filePath) {
      var tags = this.cachedTags[filePath];
      if (tags) {
        yield this.selectListView.update({ items: tags });
      } else {
        yield this.selectListView.update({
          items: [],
          loadingMessage: 'Generating symbolsâ€¦'
        });
        yield this.selectListView.update({
          items: yield this.generateTags(filePath),
          loadingMessage: null
        });
      }
    })
  }, {
    key: 'generateTags',
    value: _asyncToGenerator(function* (filePath) {
      var generator = new _tagGenerator2['default'](filePath, this.getScopeName());
      this.cachedTags[filePath] = yield generator.generate();
      return this.cachedTags[filePath];
    })
  }]);

  return FileView;
})(_symbolsView2['default']);

exports['default'] = FileView;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,