Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** @babel */

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _symbolsView = require('./symbols-view');

var _symbolsView2 = _interopRequireDefault(_symbolsView);

var _tagReader = require('./tag-reader');

var _tagReader2 = _interopRequireDefault(_tagReader);

var GoToView = (function (_SymbolsView) {
  _inherits(GoToView, _SymbolsView);

  function GoToView() {
    _classCallCheck(this, GoToView);

    _get(Object.getPrototypeOf(GoToView.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(GoToView, [{
    key: 'toggle',
    value: function toggle() {
      if (this.panel.isVisible()) {
        this.cancel();
      } else {
        this.populate();
      }
    }
  }, {
    key: 'detached',
    value: function detached() {
      if (this.resolveFindTagPromise) {
        this.resolveFindTagPromise([]);
      }
    }
  }, {
    key: 'findTag',
    value: function findTag(editor) {
      var _this = this;

      if (this.resolveFindTagPromise) {
        this.resolveFindTagPromise([]);
      }

      return new Promise(function (resolve, reject) {
        _this.resolveFindTagPromise = resolve;
        _tagReader2['default'].find(editor, function (error, matches) {
          if (!matches) {
            matches = [];
          }
          if (error) {
            return reject(error);
          } else {
            return resolve(matches);
          }
        });
      });
    }
  }, {
    key: 'populate',
    value: _asyncToGenerator(function* () {
      var _this2 = this;

      var editor = atom.workspace.getActiveTextEditor();
      if (!editor) {
        return;
      }

      this.findTag(editor).then(_asyncToGenerator(function* (matches) {
        var tags = [];
        for (var match of Array.from(matches)) {
          var position = _this2.getTagLine(match);
          if (!position) {
            continue;
          }
          match.name = _path2['default'].basename(match.file);
          tags.push(match);
        }

        if (tags.length === 1) {
          _this2.openTag(tags[0]);
        } else if (tags.length > 0) {
          yield _this2.selectListView.update({ items: tags });
          _this2.attach();
        }
      }));
    })
  }]);

  return GoToView;
})(_symbolsView2['default']);

exports['default'] = GoToView;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vQzovcHJvamVjdHMvYXRvbS9vdXQvYXBwL25vZGVfbW9kdWxlcy9zeW1ib2xzLXZpZXcvbGliL2dvLXRvLXZpZXcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUVpQixNQUFNOzs7OzJCQUNDLGdCQUFnQjs7Ozt5QkFDbEIsY0FBYzs7OztJQUVmLFFBQVE7WUFBUixRQUFROztXQUFSLFFBQVE7MEJBQVIsUUFBUTs7K0JBQVIsUUFBUTs7O2VBQVIsUUFBUTs7V0FDckIsa0JBQUc7QUFDUCxVQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLEVBQUU7QUFDMUIsWUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO09BQ2YsTUFBTTtBQUNMLFlBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztPQUNqQjtLQUNGOzs7V0FFTyxvQkFBRztBQUNULFVBQUksSUFBSSxDQUFDLHFCQUFxQixFQUFFO0FBQzlCLFlBQUksQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztPQUNoQztLQUNGOzs7V0FFTSxpQkFBQyxNQUFNLEVBQUU7OztBQUNkLFVBQUksSUFBSSxDQUFDLHFCQUFxQixFQUFFO0FBQzlCLFlBQUksQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztPQUNoQzs7QUFFRCxhQUFPLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBSztBQUN0QyxjQUFLLHFCQUFxQixHQUFHLE9BQU8sQ0FBQztBQUNyQywrQkFBVSxJQUFJLENBQUMsTUFBTSxFQUFFLFVBQUMsS0FBSyxFQUFFLE9BQU8sRUFBSztBQUN6QyxjQUFJLENBQUMsT0FBTyxFQUFFO0FBQ1osbUJBQU8sR0FBRyxFQUFFLENBQUM7V0FDZDtBQUNELGNBQUksS0FBSyxFQUFFO0FBQ1QsbUJBQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1dBQ3RCLE1BQU07QUFDTCxtQkFBTyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7V0FDekI7U0FDRixDQUFDLENBQUM7T0FDSixDQUFDLENBQUM7S0FDSjs7OzZCQUVhLGFBQUc7OztBQUNmLFVBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztBQUNsRCxVQUFJLENBQUMsTUFBTSxFQUFFO0FBQ1gsZUFBTztPQUNSOztBQUVELFVBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxtQkFBQyxXQUFNLE9BQU8sRUFBSTtBQUN6QyxZQUFJLElBQUksR0FBRyxFQUFFLENBQUM7QUFDZCxhQUFLLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDckMsY0FBSSxRQUFRLEdBQUcsT0FBSyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdEMsY0FBSSxDQUFDLFFBQVEsRUFBRTtBQUFFLHFCQUFTO1dBQUU7QUFDNUIsZUFBSyxDQUFDLElBQUksR0FBRyxrQkFBSyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3ZDLGNBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbEI7O0FBRUQsWUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtBQUNyQixpQkFBSyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDdkIsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0FBQzFCLGdCQUFNLE9BQUssY0FBYyxDQUFDLE1BQU0sQ0FBQyxFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO0FBQ2hELGlCQUFLLE1BQU0sRUFBRSxDQUFDO1NBQ2Y7T0FDRixFQUFDLENBQUM7S0FDSjs7O1NBekRrQixRQUFROzs7cUJBQVIsUUFBUSIsImZpbGUiOiJmaWxlOi8vL0M6L3Byb2plY3RzL2F0b20vb3V0L2FwcC9ub2RlX21vZHVsZXMvc3ltYm9scy12aWV3L2xpYi9nby10by12aWV3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBiYWJlbCAqL1xuXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBTeW1ib2xzVmlldyBmcm9tICcuL3N5bWJvbHMtdmlldyc7XG5pbXBvcnQgVGFnUmVhZGVyIGZyb20gJy4vdGFnLXJlYWRlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdvVG9WaWV3IGV4dGVuZHMgU3ltYm9sc1ZpZXcge1xuICB0b2dnbGUoKSB7XG4gICAgaWYgKHRoaXMucGFuZWwuaXNWaXNpYmxlKCkpIHtcbiAgICAgIHRoaXMuY2FuY2VsKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucG9wdWxhdGUoKTtcbiAgICB9XG4gIH1cblxuICBkZXRhY2hlZCgpIHtcbiAgICBpZiAodGhpcy5yZXNvbHZlRmluZFRhZ1Byb21pc2UpIHtcbiAgICAgIHRoaXMucmVzb2x2ZUZpbmRUYWdQcm9taXNlKFtdKTtcbiAgICB9XG4gIH1cblxuICBmaW5kVGFnKGVkaXRvcikge1xuICAgIGlmICh0aGlzLnJlc29sdmVGaW5kVGFnUHJvbWlzZSkge1xuICAgICAgdGhpcy5yZXNvbHZlRmluZFRhZ1Byb21pc2UoW10pO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLnJlc29sdmVGaW5kVGFnUHJvbWlzZSA9IHJlc29sdmU7XG4gICAgICBUYWdSZWFkZXIuZmluZChlZGl0b3IsIChlcnJvciwgbWF0Y2hlcykgPT4ge1xuICAgICAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgICAgICBtYXRjaGVzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChlcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUobWF0Y2hlcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgcG9wdWxhdGUoKSB7XG4gICAgbGV0IGVkaXRvciA9IGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVRleHRFZGl0b3IoKTtcbiAgICBpZiAoIWVkaXRvcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZmluZFRhZyhlZGl0b3IpLnRoZW4oYXN5bmMgbWF0Y2hlcyA9PiB7XG4gICAgICBsZXQgdGFncyA9IFtdO1xuICAgICAgZm9yIChsZXQgbWF0Y2ggb2YgQXJyYXkuZnJvbShtYXRjaGVzKSkge1xuICAgICAgICBsZXQgcG9zaXRpb24gPSB0aGlzLmdldFRhZ0xpbmUobWF0Y2gpO1xuICAgICAgICBpZiAoIXBvc2l0aW9uKSB7IGNvbnRpbnVlOyB9XG4gICAgICAgIG1hdGNoLm5hbWUgPSBwYXRoLmJhc2VuYW1lKG1hdGNoLmZpbGUpO1xuICAgICAgICB0YWdzLnB1c2gobWF0Y2gpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGFncy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgdGhpcy5vcGVuVGFnKHRhZ3NbMF0pO1xuICAgICAgfSBlbHNlIGlmICh0YWdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYXdhaXQgdGhpcy5zZWxlY3RMaXN0Vmlldy51cGRhdGUoe2l0ZW1zOiB0YWdzfSk7XG4gICAgICAgIHRoaXMuYXR0YWNoKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==