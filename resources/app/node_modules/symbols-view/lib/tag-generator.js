Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

/** @babel */

var _atom = require('atom');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsPlus = require('fs-plus');

var _fsPlus2 = _interopRequireDefault(_fsPlus);

var TagGenerator = (function () {
  function TagGenerator(path1, scopeName) {
    _classCallCheck(this, TagGenerator);

    this.path = path1;
    this.scopeName = scopeName;
  }

  _createClass(TagGenerator, [{
    key: 'getPackageRoot',
    value: function getPackageRoot() {
      var _atom$getLoadSettings = atom.getLoadSettings();

      var resourcePath = _atom$getLoadSettings.resourcePath;

      var currentFileWasRequiredFromSnapshot = !_fsPlus2['default'].isAbsolute(__dirname);
      if (currentFileWasRequiredFromSnapshot) {
        return _path2['default'].join(resourcePath, 'node_modules', 'symbols-view');
      } else {
        var packageRoot = _path2['default'].resolve(__dirname, '..');
        if (_path2['default'].extname(resourcePath) === '.asar') {
          if (packageRoot.indexOf(resourcePath) === 0) {
            return _path2['default'].join(resourcePath + '.unpacked', 'node_modules', 'symbols-view');
          }
        }
        return packageRoot;
      }
    }
  }, {
    key: 'parseTagLine',
    value: function parseTagLine(line) {
      var sections = line.split('\t');
      if (sections.length > 3) {
        return {
          position: new _atom.Point(parseInt(sections[2], 10) - 1),
          name: sections[0]
        };
      }
      return null;
    }
  }, {
    key: 'getLanguage',
    value: function getLanguage() {
      if (['.cson', '.gyp'].includes(_path2['default'].extname(this.path))) {
        return 'Cson';
      }

      switch (this.scopeName) {
        case 'source.c':
          return 'C';
        case 'source.cpp':
          return 'C++';
        case 'source.clojure':
          return 'Lisp';
        case 'source.capnp':
          return 'Capnp';
        case 'source.coffee':
          return 'CoffeeScript';
        case 'source.css':
          return 'Css';
        case 'source.css.less':
          return 'Css';
        case 'source.css.scss':
          return 'Css';
        case 'source.elixir':
          return 'Elixir';
        case 'source.fountain':
          return 'Fountain';
        case 'source.gfm':
          return 'Markdown';
        case 'source.go':
          return 'Go';
        case 'source.java':
          return 'Java';
        case 'source.js':
          return 'JavaScript';
        case 'source.js.jsx':
          return 'JavaScript';
        case 'source.jsx':
          return 'JavaScript';
        case 'source.json':
          return 'Json';
        case 'source.julia':
          return 'Julia';
        case 'source.makefile':
          return 'Make';
        case 'source.objc':
          return 'C';
        case 'source.objcpp':
          return 'C++';
        case 'source.python':
          return 'Python';
        case 'source.ruby':
          return 'Ruby';
        case 'source.sass':
          return 'Sass';
        case 'source.yaml':
          return 'Yaml';
        case 'text.html':
          return 'Html';
        case 'text.html.php':
          return 'Php';
        case 'text.tex.latex':
          return 'Latex';
      }
      return undefined;
    }
  }, {
    key: 'generate',
    value: function generate() {
      var _this = this;

      var tags = {};
      var packageRoot = this.getPackageRoot();
      var command = _path2['default'].join(packageRoot, 'vendor', 'ctags-' + process.platform);
      var defaultCtagsFile = _path2['default'].join(packageRoot, 'lib', 'ctags-config');
      var args = ['--options=' + defaultCtagsFile, '--fields=+KS'];

      if (atom.config.get('symbols-view.useEditorGrammarAsCtagsLanguage')) {
        var language = this.getLanguage();
        if (language) {
          args.push('--language-force=' + language);
        }
      }

      args.push('-nf', '-', this.path);

      return new Promise(function (resolve) {
        var result = undefined,
            tag = undefined;
        return new _atom.BufferedProcess({
          command: command,
          args: args,
          stdout: function stdout(lines) {
            return (function () {
              result = [];
              for (var line of Array.from(lines.split('\n'))) {
                var item = undefined;
                if (tag = _this.parseTagLine(line)) {
                  item = tags[tag.position.row] ? tags[tag.position.row] : tags[tag.position.row] = tag;
                }
                result.push(item);
              }
              return result;
            })();
          },
          stderr: function stderr() {},
          exit: function exit() {
            tags = (function () {
              result = [];
              for (var row in tags) {
                tag = tags[row];
                result.push(tag);
              }
              return result;
            })();
            return resolve(tags);
          }
        });
      });
    }
  }]);

  return TagGenerator;
})();

exports['default'] = TagGenerator;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,