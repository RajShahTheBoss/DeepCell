Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

/** @babel */

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _atom = require('atom');

var _atomSelectList = require('atom-select-list');

var _atomSelectList2 = _interopRequireDefault(_atomSelectList);

var _fsPlus = require('fs-plus');

var _fsPlus2 = _interopRequireDefault(_fsPlus);

var _fuzzaldrin = require('fuzzaldrin');

var SymbolsView = (function () {
  _createClass(SymbolsView, null, [{
    key: 'highlightMatches',
    value: function highlightMatches(context, name, matches, offsetIndex) {
      if (!offsetIndex) {
        offsetIndex = 0;
      }
      var lastIndex = 0;
      var matchedChars = []; // Build up a set of matched chars to be more semantic
      var fragment = document.createDocumentFragment();

      for (var matchIndex of Array.from(matches)) {
        matchIndex -= offsetIndex;
        if (matchIndex < 0) {
          continue; // If marking up the basename, omit name matches
        }
        var unmatched = name.substring(lastIndex, matchIndex);
        if (unmatched) {
          if (matchedChars.length) {
            var span = document.createElement('span');
            span.classList.add('character-match');
            span.textContent = matchedChars.join('');
            fragment.appendChild(span);
          }
          matchedChars = [];
          fragment.appendChild(document.createTextNode(unmatched));
        }
        matchedChars.push(name[matchIndex]);
        lastIndex = matchIndex + 1;
      }

      if (matchedChars.length) {
        var span = document.createElement('span');
        span.classList.add('character-match');
        span.textContent = matchedChars.join('');
        fragment.appendChild(span);
      }

      // Remaining characters are plain text
      fragment.appendChild(document.createTextNode(name.substring(lastIndex)));

      return fragment;
    }
  }]);

  function SymbolsView(stack) {
    var emptyMessage = arguments.length <= 1 || arguments[1] === undefined ? 'No symbols found' : arguments[1];
    var maxResults = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

    _classCallCheck(this, SymbolsView);

    this.stack = stack;
    this.selectListView = new _atomSelectList2['default']({
      maxResults: maxResults,
      emptyMessage: emptyMessage,
      items: [],
      filterKeyForItem: function filterKeyForItem(item) {
        return item.name;
      },
      elementForItem: this.elementForItem.bind(this),
      didChangeSelection: this.didChangeSelection.bind(this),
      didConfirmSelection: this.didConfirmSelection.bind(this),
      didConfirmEmptySelection: this.didConfirmEmptySelection.bind(this),
      didCancelSelection: this.didCancelSelection.bind(this)
    });
    this.element = this.selectListView.element;
    this.element.classList.add('symbols-view');
    this.panel = atom.workspace.addModalPanel({ item: this, visible: false });
  }

  _createClass(SymbolsView, [{
    key: 'destroy',
    value: _asyncToGenerator(function* () {
      yield this.cancel();
      this.panel.destroy();
      return this.selectListView.destroy();
    })
  }, {
    key: 'getFilterKey',
    value: function getFilterKey() {
      return 'name';
    }
  }, {
    key: 'elementForItem',
    value: function elementForItem(_ref) {
      var position = _ref.position;
      var name = _ref.name;
      var file = _ref.file;
      var directory = _ref.directory;

      // Style matched characters in search results
      var matches = (0, _fuzzaldrin.match)(name, this.selectListView.getFilterQuery());

      if (atom.project.getPaths().length > 1) {
        file = _path2['default'].join(_path2['default'].basename(directory), file);
      }

      var li = document.createElement('li');
      li.classList.add('two-lines');

      var primaryLine = document.createElement('div');
      primaryLine.classList.add('primary-line');
      if (position) {
        primaryLine.textContent = name + ':' + (position.row + 1);
      } else {
        primaryLine.appendChild(SymbolsView.highlightMatches(this, name, matches));
      }
      li.appendChild(primaryLine);

      var secondaryLine = document.createElement('div');
      secondaryLine.classList.add('secondary-line');
      secondaryLine.textContent = file;
      li.appendChild(secondaryLine);

      return li;
    }
  }, {
    key: 'cancel',
    value: _asyncToGenerator(function* () {
      if (!this.isCanceling) {
        this.isCanceling = true;
        yield this.selectListView.update({ items: [] });
        this.panel.hide();
        if (this.previouslyFocusedElement) {
          this.previouslyFocusedElement.focus();
          this.previouslyFocusedElement = null;
        }
        this.isCanceling = false;
      }
    })
  }, {
    key: 'didCancelSelection',
    value: function didCancelSelection() {
      this.cancel();
    }
  }, {
    key: 'didConfirmEmptySelection',
    value: function didConfirmEmptySelection() {
      this.cancel();
    }
  }, {
    key: 'didConfirmSelection',
    value: _asyncToGenerator(function* (tag) {
      var _this = this;

      if (tag.file && !_fsPlus2['default'].isFileSync(_path2['default'].join(tag.directory, tag.file))) {
        yield this.selectListView.update({ errorMessage: 'Selected file does not exist' });
        setTimeout(function () {
          _this.selectListView.update({ errorMessage: null });
        }, 2000);
      } else {
        yield this.cancel();
        this.openTag(tag);
      }
    })
  }, {
    key: 'didChangeSelection',
    value: function didChangeSelection(tag) {
      // no-op
    }
  }, {
    key: 'openTag',
    value: function openTag(tag) {
      var _this2 = this;

      var editor = atom.workspace.getActiveTextEditor();
      var previous = undefined;
      if (editor) {
        previous = {
          editorId: editor.id,
          position: editor.getCursorBufferPosition(),
          file: editor.getURI()
        };
      }

      var position = tag.position;

      if (!position) {
        position = this.getTagLine(tag);
      }
      if (tag.file) {
        atom.workspace.open(_path2['default'].join(tag.directory, tag.file)).then(function () {
          if (position) {
            return _this2.moveToPosition(position);
          }
          return undefined;
        });
      } else if (position && previous && !previous.position.isEqual(position)) {
        this.moveToPosition(position);
      }

      this.stack.push(previous);
    }
  }, {
    key: 'moveToPosition',
    value: function moveToPosition(position, beginningOfLine) {
      var editor = atom.workspace.getActiveTextEditor();
      if (beginningOfLine == null) {
        beginningOfLine = true;
      }
      if (editor) {
        editor.scrollToBufferPosition(position, { center: true });
        editor.setCursorBufferPosition(position);
        if (beginningOfLine) {
          editor.moveToFirstCharacterOfLine();
        }
      }
    }
  }, {
    key: 'attach',
    value: function attach() {
      this.previouslyFocusedElement = document.activeElement;
      this.panel.show();
      this.selectListView.reset();
      this.selectListView.focus();
    }
  }, {
    key: 'getTagLine',
    value: function getTagLine(tag) {
      // Remove leading /^ and trailing $/
      if (!tag || !tag.pattern) {
        return undefined;
      }
      var pattern = tag.pattern.replace(/(^^\/\^)|(\$\/$)/g, '').trim();

      if (!pattern) {
        return undefined;
      }
      var file = _path2['default'].join(tag.directory, tag.file);
      if (!_fsPlus2['default'].isFileSync(file)) {
        return undefined;
      }
      var iterable = _fsPlus2['default'].readFileSync(file, 'utf8').split('\n');
      for (var index = 0; index < iterable.length; index++) {
        var line = iterable[index];
        if (pattern === line.trim()) {
          return new _atom.Point(index, 0);
        }
      }

      return undefined;
    }
  }]);

  return SymbolsView;
})();

exports['default'] = SymbolsView;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,