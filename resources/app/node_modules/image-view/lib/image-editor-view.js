Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

/** @babel */
/** @jsx etch.dom */

var _fsPlus = require('fs-plus');

var _fsPlus2 = _interopRequireDefault(_fsPlus);

var _atom = require('atom');

var _etch = require('etch');

var _etch2 = _interopRequireDefault(_etch);

// View that renders the image of an {ImageEditor}.

var ImageEditorView = (function () {
  function ImageEditorView(editor) {
    var _this = this;

    _classCallCheck(this, ImageEditorView);

    this.editor = editor;
    this.emitter = new _atom.Emitter();
    this.disposables = new _atom.CompositeDisposable();
    this.imageSize = _fsPlus2['default'].statSync(this.editor.getPath()).size;
    this.loaded = false;
    this.mode = 'reset-zoom';
    _etch2['default'].initialize(this);

    this.refs.image.style.display = 'none';
    this.updateImageURI();

    this.disposables.add(this.editor.onDidChange(function () {
      return _this.updateImageURI();
    }));
    this.disposables.add(atom.commands.add(this.element, {
      'image-view:reload': function imageViewReload() {
        return _this.updateImageURI();
      },
      'image-view:zoom-in': function imageViewZoomIn() {
        return _this.zoomIn();
      },
      'image-view:zoom-out': function imageViewZoomOut() {
        return _this.zoomOut();
      },
      'image-view:zoom-to-fit': function imageViewZoomToFit() {
        return _this.zoomToFit();
      },
      'image-view:reset-zoom': function imageViewResetZoom() {
        return _this.resetZoom();
      },
      'core:move-up': function coreMoveUp() {
        _this.scrollUp();
      },
      'core:move-down': function coreMoveDown() {
        _this.scrollDown();
      },
      'core:page-up': function corePageUp() {
        _this.pageUp();
      },
      'core:page-down': function corePageDown() {
        _this.pageDown();
      },
      'core:move-to-top': function coreMoveToTop() {
        _this.scrollToTop();
      },
      'core:move-to-bottom': function coreMoveToBottom() {
        _this.scrollToBottom();
      }
    }));

    this.refs.image.onload = function () {
      _this.refs.image.onload = null;
      _this.originalHeight = _this.refs.image.naturalHeight;
      _this.originalWidth = _this.refs.image.naturalWidth;
      _this.loaded = true;
      _this.refs.image.style.display = '';
      _this.emitter.emit('did-load');
    };

    this.disposables.add(atom.tooltips.add(this.refs.whiteTransparentBackgroundButton, { title: 'Use white transparent background' }));
    this.disposables.add(atom.tooltips.add(this.refs.blackTransparentBackgroundButton, { title: 'Use black transparent background' }));
    this.disposables.add(atom.tooltips.add(this.refs.transparentTransparentBackgroundButton, { title: 'Use transparent background' }));

    var clickHandler = function clickHandler(event) {
      event.preventDefault();
      event.stopPropagation();
      _this.changeBackground(event.target.value);
    };

    this.refs.whiteTransparentBackgroundButton.addEventListener('click', clickHandler);
    this.disposables.add(new _atom.Disposable(function () {
      _this.refs.whiteTransparentBackgroundButton.removeEventListener('click', clickHandler);
    }));
    this.refs.blackTransparentBackgroundButton.addEventListener('click', clickHandler);
    this.disposables.add(new _atom.Disposable(function () {
      _this.refs.blackTransparentBackgroundButton.removeEventListener('click', clickHandler);
    }));
    this.refs.transparentTransparentBackgroundButton.addEventListener('click', clickHandler);
    this.disposables.add(new _atom.Disposable(function () {
      _this.refs.transparentTransparentBackgroundButton.removeEventListener('click', clickHandler);
    }));

    var zoomInClickHandler = function zoomInClickHandler() {
      _this.zoomIn();
    };
    this.refs.zoomInButton.addEventListener('click', zoomInClickHandler);
    this.disposables.add(new _atom.Disposable(function () {
      _this.refs.zoomInButton.removeEventListener('click', zoomInClickHandler);
    }));

    var zoomOutClickHandler = function zoomOutClickHandler() {
      _this.zoomOut();
    };
    this.refs.zoomOutButton.addEventListener('click', zoomOutClickHandler);
    this.disposables.add(new _atom.Disposable(function () {
      _this.refs.zoomOutButton.removeEventListener('click', zoomOutClickHandler);
    }));

    var resetZoomClickHandler = function resetZoomClickHandler() {
      _this.resetZoom();
    };
    this.refs.resetZoomButton.addEventListener('click', resetZoomClickHandler);
    this.disposables.add(new _atom.Disposable(function () {
      _this.refs.resetZoomButton.removeEventListener('click', resetZoomClickHandler);
    }));

    var zoomToFitClickHandler = function zoomToFitClickHandler() {
      _this.zoomToFit();
    };
    this.refs.zoomToFitButton.addEventListener('click', zoomToFitClickHandler);
    this.disposables.add(new _atom.Disposable(function () {
      _this.refs.zoomToFitButton.removeEventListener('click', zoomToFitClickHandler);
    }));
  }

  _createClass(ImageEditorView, [{
    key: 'onDidLoad',
    value: function onDidLoad(callback) {
      return this.emitter.on('did-load', callback);
    }
  }, {
    key: 'update',
    value: function update() {}
  }, {
    key: 'destroy',
    value: function destroy() {
      this.disposables.dispose();
      this.emitter.dispose();
      return _etch2['default'].destroy(this);
    }
  }, {
    key: 'render',
    value: function render() {
      return _etch2['default'].dom(
        'div',
        { className: 'image-view', tabIndex: '-1' },
        _etch2['default'].dom(
          'div',
          { className: 'image-controls', ref: 'imageControls' },
          _etch2['default'].dom(
            'div',
            { className: 'image-controls-group' },
            _etch2['default'].dom(
              'a',
              { ref: 'whiteTransparentBackgroundButton', className: 'image-controls-color-white', value: 'white' },
              'white'
            ),
            _etch2['default'].dom(
              'a',
              { ref: 'blackTransparentBackgroundButton', className: 'image-controls-color-black', value: 'black' },
              'black'
            ),
            _etch2['default'].dom(
              'a',
              { ref: 'transparentTransparentBackgroundButton', className: 'image-controls-color-transparent', value: 'transparent' },
              'transparent'
            )
          ),
          _etch2['default'].dom(
            'div',
            { className: 'image-controls-group btn-group' },
            _etch2['default'].dom(
              'button',
              { className: 'btn', ref: 'zoomOutButton' },
              '-'
            ),
            _etch2['default'].dom(
              'button',
              { className: 'btn reset-zoom-button', ref: 'resetZoomButton' },
              '100%'
            ),
            _etch2['default'].dom(
              'button',
              { className: 'btn', ref: 'zoomInButton' },
              '+'
            )
          ),
          _etch2['default'].dom(
            'div',
            { className: 'image-controls-group btn-group' },
            _etch2['default'].dom(
              'button',
              { className: 'btn', ref: 'zoomToFitButton' },
              'Zoom to fit'
            )
          )
        ),
        _etch2['default'].dom(
          'div',
          { className: 'image-container', background: 'white', ref: 'imageContainer' },
          _etch2['default'].dom('img', { ref: 'image' })
        )
      );
    }
  }, {
    key: 'updateImageURI',
    value: function updateImageURI() {
      this.refs.image.src = this.editor.getEncodedURI() + '?time=' + Date.now();
    }

    // Zooms the image out by 25%.
  }, {
    key: 'zoomOut',
    value: function zoomOut() {
      this.adjustSize(0.75);
    }

    // Zooms the image in by 25%.
  }, {
    key: 'zoomIn',
    value: function zoomIn() {
      this.adjustSize(1.25);
    }

    // Zooms the image to its normal width and height.
  }, {
    key: 'resetZoom',
    value: function resetZoom() {
      if (!this.loaded || this.element.offsetHeight === 0) {
        return;
      }

      this.mode = 'reset-zoom';
      this.refs.imageContainer.classList.remove('zoom-to-fit');
      this.refs.zoomToFitButton.classList.remove('selected');
      this.refs.image.style.width = this.originalWidth + 'px';
      this.refs.image.style.height = this.originalHeight + 'px';
      this.refs.resetZoomButton.textContent = '100%';
    }

    // Zooms to fit the image, doesn't scale beyond actual size
  }, {
    key: 'zoomToFit',
    value: function zoomToFit() {
      if (!this.loaded || this.element.offsetHeight === 0) {
        return;
      }

      this.mode = 'zoom-to-fit';
      this.refs.imageContainer.classList.add('zoom-to-fit');
      this.refs.zoomToFitButton.classList.add('selected');
      this.refs.image.style.width = '';
      this.refs.image.style.height = '';
      this.refs.resetZoomButton.textContent = 'Auto';
    }

    // Adjust the size of the image by the given multiplying factor.
    //
    // factor - A {Number} to multiply against the current size.
  }, {
    key: 'adjustSize',
    value: function adjustSize(factor) {
      if (!this.loaded || this.element.offsetHeight === 0) {
        return;
      }

      if (this.mode === 'zoom-to-fit') {
        this.mode = 'zoom-manual';
        this.refs.imageContainer.classList.remove('zoom-to-fit');
        this.refs.zoomToFitButton.classList.remove('selected');
      } else if (this.mode === 'reset-zoom') {
        this.mode = 'zoom-manual';
      }

      var newWidth = this.refs.image.offsetWidth * factor;
      var newHeight = this.refs.image.offsetHeight * factor;
      var percent = Math.max(1, Math.round(newWidth / this.originalWidth * 100));

      // Switch to pixelated rendering when image is bigger than 200%
      if (newWidth > this.originalWidth * 2) {
        this.refs.image.style.imageRendering = 'pixelated';
      } else {
        this.refs.image.style.imageRendering = '';
      }

      this.refs.image.style.width = newWidth + 'px';
      this.refs.image.style.height = newHeight + 'px';
      this.refs.resetZoomButton.textContent = percent + '%';
    }

    // Changes the background color of the image view.
    //
    // color - A {String} that gets used as class name.
  }, {
    key: 'changeBackground',
    value: function changeBackground(color) {
      if (this.loaded && this.element.offsetHeight > 0 && color) {
        this.refs.imageContainer.setAttribute('background', color);
      }
    }
  }, {
    key: 'scrollUp',
    value: function scrollUp() {
      this.refs.imageContainer.scrollTop -= document.body.offsetHeight / 20;
    }
  }, {
    key: 'scrollDown',
    value: function scrollDown() {
      this.refs.imageContainer.scrollTop += document.body.offsetHeight / 20;
    }
  }, {
    key: 'pageUp',
    value: function pageUp() {
      this.refs.imageContainer.scrollTop -= this.element.offsetHeight;
    }
  }, {
    key: 'pageDown',
    value: function pageDown() {
      this.refs.imageContainer.scrollTop += this.element.offsetHeight;
    }
  }, {
    key: 'scrollToTop',
    value: function scrollToTop() {
      this.refs.imageContainer.scrollTop = 0;
    }
  }, {
    key: 'scrollToBottom',
    value: function scrollToBottom() {
      this.refs.imageContainer.scrollTop = this.refs.imageContainer.scrollHeight;
    }
  }]);

  return ImageEditorView;
})();

exports['default'] = ImageEditorView;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,