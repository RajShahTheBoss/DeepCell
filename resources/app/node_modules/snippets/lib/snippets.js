(function() {
  var CSON, CompositeDisposable, Disposable, Emitter, File, ScopedPropertyStore, Snippet, SnippetExpansion, _, async, fs, path, ref,
    slice = [].slice;

  path = require('path');

  ref = require('atom'), Emitter = ref.Emitter, Disposable = ref.Disposable, CompositeDisposable = ref.CompositeDisposable, File = ref.File;

  _ = require('underscore-plus');

  async = require('async');

  CSON = require('season');

  fs = require('fs-plus');

  ScopedPropertyStore = require('scoped-property-store');

  Snippet = require('./snippet');

  SnippetExpansion = require('./snippet-expansion');

  module.exports = {
    loaded: false,
    activate: function() {
      var snippets;
      this.userSnippetsPath = null;
      this.snippetIdCounter = 0;
      this.parsedSnippetsById = new Map;
      this.scopedPropertyStore = new ScopedPropertyStore;
      this.subscriptions = new CompositeDisposable;
      this.subscriptions.add(atom.workspace.addOpener((function(_this) {
        return function(uri) {
          if (uri === 'atom://.atom/snippets') {
            return atom.workspace.openTextFile(_this.getUserSnippetsPath());
          }
        };
      })(this)));
      this.loadAll();
      this.watchUserSnippets((function(_this) {
        return function(watchDisposable) {
          return _this.subscriptions.add(watchDisposable);
        };
      })(this));
      snippets = this;
      this.subscriptions.add(atom.commands.add('atom-text-editor', {
        'snippets:expand': function(event) {
          var editor;
          editor = this.getModel();
          if (snippets.snippetToExpandUnderCursor(editor)) {
            snippets.clearExpansions(editor);
            return snippets.expandSnippetsUnderCursors(editor);
          } else {
            return event.abortKeyBinding();
          }
        },
        'snippets:next-tab-stop': function(event) {
          var editor;
          editor = this.getModel();
          if (!snippets.goToNextTabStop(editor)) {
            return event.abortKeyBinding();
          }
        },
        'snippets:previous-tab-stop': function(event) {
          var editor;
          editor = this.getModel();
          if (!snippets.goToPreviousTabStop(editor)) {
            return event.abortKeyBinding();
          }
        },
        'snippets:available': function(event) {
          var SnippetsAvailable, editor;
          editor = this.getModel();
          SnippetsAvailable = require('./snippets-available');
          if (snippets.availableSnippetsView == null) {
            snippets.availableSnippetsView = new SnippetsAvailable(snippets);
          }
          return snippets.availableSnippetsView.toggle(editor);
        }
      }));
      return this.subscriptions.add(atom.workspace.observeTextEditors((function(_this) {
        return function(editor) {
          return _this.clearExpansions(editor);
        };
      })(this)));
    },
    deactivate: function() {
      var ref1;
      if ((ref1 = this.emitter) != null) {
        ref1.dispose();
      }
      this.emitter = null;
      this.editorSnippetExpansions = null;
      return atom.config.transact((function(_this) {
        return function() {
          return _this.subscriptions.dispose();
        };
      })(this));
    },
    getUserSnippetsPath: function() {
      if (this.userSnippetsPath != null) {
        return this.userSnippetsPath;
      }
      this.userSnippetsPath = CSON.resolve(path.join(atom.getConfigDirPath(), 'snippets'));
      if (this.userSnippetsPath == null) {
        this.userSnippetsPath = path.join(atom.getConfigDirPath(), 'snippets.cson');
      }
      return this.userSnippetsPath;
    },
    loadAll: function(callback) {
      return this.loadBundledSnippets((function(_this) {
        return function(bundledSnippets) {
          return _this.loadPackageSnippets(function(packageSnippets) {
            return _this.loadUserSnippets(function(userSnippets) {
              atom.config.transact(function() {
                var filepath, i, len, ref1, results1, snippetSet, snippetsBySelector;
                ref1 = [bundledSnippets, packageSnippets, userSnippets];
                results1 = [];
                for (i = 0, len = ref1.length; i < len; i++) {
                  snippetSet = ref1[i];
                  results1.push((function() {
                    var results2;
                    results2 = [];
                    for (filepath in snippetSet) {
                      snippetsBySelector = snippetSet[filepath];
                      results2.push(this.add(filepath, snippetsBySelector));
                    }
                    return results2;
                  }).call(_this));
                }
                return results1;
              });
              return _this.doneLoading();
            });
          });
        };
      })(this));
    },
    loadBundledSnippets: function(callback) {
      var bundledSnippetsPath;
      bundledSnippetsPath = CSON.resolve(path.join(__dirname, 'snippets'));
      return this.loadSnippetsFile(bundledSnippetsPath, function(snippets) {
        var snippetsByPath;
        snippetsByPath = {};
        snippetsByPath[bundledSnippetsPath] = snippets;
        return callback(snippetsByPath);
      });
    },
    loadUserSnippets: function(callback) {
      var userSnippetsPath;
      userSnippetsPath = this.getUserSnippetsPath();
      return fs.stat(userSnippetsPath, (function(_this) {
        return function(error, stat) {
          if (stat != null ? stat.isFile() : void 0) {
            return _this.loadSnippetsFile(userSnippetsPath, function(snippets) {
              var result;
              result = {};
              result[userSnippetsPath] = snippets;
              return callback(result);
            });
          } else {
            return callback({});
          }
        };
      })(this));
    },
    watchUserSnippets: function(callback) {
      var userSnippetsPath;
      userSnippetsPath = this.getUserSnippetsPath();
      return fs.stat(userSnippetsPath, (function(_this) {
        return function(error, stat) {
          var e, message, userSnippetsFile, userSnippetsFileDisposable;
          if (stat != null ? stat.isFile() : void 0) {
            userSnippetsFileDisposable = new CompositeDisposable();
            userSnippetsFile = new File(userSnippetsPath);
            try {
              userSnippetsFileDisposable.add(userSnippetsFile.onDidChange(function() {
                return _this.handleUserSnippetsDidChange();
              }));
              userSnippetsFileDisposable.add(userSnippetsFile.onDidDelete(function() {
                return _this.handleUserSnippetsDidChange();
              }));
              userSnippetsFileDisposable.add(userSnippetsFile.onDidRename(function() {
                return _this.handleUserSnippetsDidChange();
              }));
            } catch (error1) {
              e = error1;
              message = "Unable to watch path: `snippets.cson`. Make sure you have permissions\nto the `~/.atom` directory and `" + userSnippetsPath + "`.\n\nOn linux there are currently problems with watch sizes. See\n[this document][watches] for more info.\n[watches]:https://github.com/atom/atom/blob/master/docs/build-instructions/linux.md#typeerror-unable-to-watch-path";
              atom.notifications.addError(message, {
                dismissable: true
              });
            }
            return callback(userSnippetsFileDisposable);
          } else {
            return callback(new Disposable(function() {}));
          }
        };
      })(this));
    },
    handleUserSnippetsDidChange: function() {
      var userSnippetsPath;
      userSnippetsPath = this.getUserSnippetsPath();
      return atom.config.transact((function(_this) {
        return function() {
          _this.clearSnippetsForPath(userSnippetsPath);
          return _this.loadSnippetsFile(userSnippetsPath, function(result) {
            return _this.add(userSnippetsPath, result);
          });
        };
      })(this));
    },
    loadPackageSnippets: function(callback) {
      var pack, packages, snippetsDirPaths;
      packages = atom.packages.getLoadedPackages();
      snippetsDirPaths = ((function() {
        var i, len, results1;
        results1 = [];
        for (i = 0, len = packages.length; i < len; i++) {
          pack = packages[i];
          results1.push(path.join(pack.path, 'snippets'));
        }
        return results1;
      })()).sort(function(a, b) {
        if (/\/app\.asar\/node_modules\//.test(a)) {
          return -1;
        } else {
          return 1;
        }
      });
      return async.map(snippetsDirPaths, this.loadSnippetsDirectory.bind(this), function(error, results) {
        return callback(_.extend.apply(_, [{}].concat(slice.call(results))));
      });
    },
    doneLoading: function() {
      this.loaded = true;
      return this.getEmitter().emit('did-load-snippets');
    },
    onDidLoadSnippets: function(callback) {
      return this.getEmitter().on('did-load-snippets', callback);
    },
    getEmitter: function() {
      return this.emitter != null ? this.emitter : this.emitter = new Emitter;
    },
    loadSnippetsDirectory: function(snippetsDirPath, callback) {
      return fs.isDirectory(snippetsDirPath, (function(_this) {
        return function(isDirectory) {
          if (!isDirectory) {
            return callback(null, {});
          }
          return fs.readdir(snippetsDirPath, function(error, entries) {
            if (error) {
              console.warn("Error reading snippets directory " + snippetsDirPath, error);
              return callback(null, {});
            }
            return async.map(entries, function(entry, done) {
              var filePath;
              filePath = path.join(snippetsDirPath, entry);
              return _this.loadSnippetsFile(filePath, function(snippets) {
                return done(null, {
                  filePath: filePath,
                  snippets: snippets
                });
              });
            }, function(error, results) {
              var filePath, i, len, ref1, snippets, snippetsByPath;
              snippetsByPath = {};
              for (i = 0, len = results.length; i < len; i++) {
                ref1 = results[i], filePath = ref1.filePath, snippets = ref1.snippets;
                snippetsByPath[filePath] = snippets;
              }
              return callback(null, snippetsByPath);
            });
          });
        };
      })(this));
    },
    loadSnippetsFile: function(filePath, callback) {
      if (!CSON.isObjectPath(filePath)) {
        return callback({});
      }
      return CSON.readFile(filePath, function(error, object) {
        var ref1, ref2;
        if (object == null) {
          object = {};
        }
        if (error != null) {
          console.warn("Error reading snippets file '" + filePath + "': " + ((ref1 = error.stack) != null ? ref1 : error));
          if ((ref2 = atom.notifications) != null) {
            ref2.addError("Failed to load snippets from '" + filePath + "'", {
              detail: error.message,
              dismissable: true
            });
          }
        }
        return callback(object);
      });
    },
    add: function(filePath, snippetsBySelector) {
      var attributes, body, name, prefix, selector, snippetsByName, unparsedSnippetsByPrefix;
      for (selector in snippetsBySelector) {
        snippetsByName = snippetsBySelector[selector];
        unparsedSnippetsByPrefix = {};
        for (name in snippetsByName) {
          attributes = snippetsByName[name];
          prefix = attributes.prefix, body = attributes.body;
          attributes.name = name;
          attributes.id = this.snippetIdCounter++;
          if (typeof body === 'string') {
            unparsedSnippetsByPrefix[prefix] = attributes;
          } else if (body == null) {
            unparsedSnippetsByPrefix[prefix] = null;
          }
        }
        this.storeUnparsedSnippets(unparsedSnippetsByPrefix, filePath, selector);
      }
    },
    getScopeChain: function(object) {
      var scopesArray;
      scopesArray = object != null ? typeof object.getScopesArray === "function" ? object.getScopesArray() : void 0 : void 0;
      if (scopesArray == null) {
        scopesArray = object;
      }
      return scopesArray.map(function(scope) {
        if (scope[0] !== '.') {
          scope = "." + scope;
        }
        return scope;
      }).join(' ');
    },
    storeUnparsedSnippets: function(value, path, selector) {
      var unparsedSnippets;
      unparsedSnippets = {};
      unparsedSnippets[selector] = {
        "snippets": value
      };
      return this.scopedPropertyStore.addProperties(path, unparsedSnippets, {
        priority: this.priorityForSource(path)
      });
    },
    clearSnippetsForPath: function(path) {
      var attributes, prefix, ref1, results1, scopeSelector;
      results1 = [];
      for (scopeSelector in this.scopedPropertyStore.propertiesForSource(path)) {
        ref1 = this.scopedPropertyStore.propertiesForSourceAndSelector(path, scopeSelector);
        for (prefix in ref1) {
          attributes = ref1[prefix];
          this.parsedSnippetsById["delete"](attributes.id);
        }
        results1.push(this.scopedPropertyStore.removePropertiesForSourceAndSelector(path, scopeSelector));
      }
      return results1;
    },
    parsedSnippetsForScopes: function(scopeDescriptor) {
      var attributes, body, bodyTree, description, descriptionMoreURL, id, leftLabel, leftLabelHTML, name, prefix, rightLabelHTML, snippet, snippets, unparsedSnippetsByPrefix;
      unparsedSnippetsByPrefix = this.scopedPropertyStore.getPropertyValue(this.getScopeChain(scopeDescriptor), "snippets");
      if (unparsedSnippetsByPrefix == null) {
        unparsedSnippetsByPrefix = {};
      }
      snippets = {};
      for (prefix in unparsedSnippetsByPrefix) {
        attributes = unparsedSnippetsByPrefix[prefix];
        if (typeof (attributes != null ? attributes.body : void 0) !== 'string') {
          continue;
        }
        id = attributes.id, name = attributes.name, body = attributes.body, bodyTree = attributes.bodyTree, description = attributes.description, descriptionMoreURL = attributes.descriptionMoreURL, rightLabelHTML = attributes.rightLabelHTML, leftLabel = attributes.leftLabel, leftLabelHTML = attributes.leftLabelHTML;
        if (!this.parsedSnippetsById.has(id)) {
          if (bodyTree == null) {
            bodyTree = this.getBodyParser().parse(body);
          }
          snippet = new Snippet({
            id: id,
            name: name,
            prefix: prefix,
            bodyTree: bodyTree,
            description: description,
            descriptionMoreURL: descriptionMoreURL,
            rightLabelHTML: rightLabelHTML,
            leftLabel: leftLabel,
            leftLabelHTML: leftLabelHTML,
            bodyText: body
          });
          this.parsedSnippetsById.set(id, snippet);
        }
        snippets[prefix] = this.parsedSnippetsById.get(id);
      }
      return snippets;
    },
    priorityForSource: function(source) {
      if (source === this.getUserSnippetsPath()) {
        return 1000;
      } else {
        return 0;
      }
    },
    getBodyParser: function() {
      return this.bodyParser != null ? this.bodyParser : this.bodyParser = require('./snippet-body-parser');
    },
    getPrefixText: function(snippets, editor) {
      var cursor, cursorSnippetPrefix, cursorWordPrefix, i, len, position, prefixStart, ref1, ref2, snippetPrefix, wordPrefix, wordRegex, wordStart;
      wordRegex = this.wordRegexForSnippets(snippets);
      ref1 = [], snippetPrefix = ref1[0], wordPrefix = ref1[1];
      ref2 = editor.getCursors();
      for (i = 0, len = ref2.length; i < len; i++) {
        cursor = ref2[i];
        position = cursor.getBufferPosition();
        prefixStart = cursor.getBeginningOfCurrentWordBufferPosition({
          wordRegex: wordRegex
        });
        cursorSnippetPrefix = editor.getTextInRange([prefixStart, position]);
        if ((snippetPrefix != null) && cursorSnippetPrefix !== snippetPrefix) {
          return null;
        }
        snippetPrefix = cursorSnippetPrefix;
        wordStart = cursor.getBeginningOfCurrentWordBufferPosition();
        cursorWordPrefix = editor.getTextInRange([wordStart, position]);
        if ((wordPrefix != null) && cursorWordPrefix !== wordPrefix) {
          return null;
        }
        wordPrefix = cursorWordPrefix;
      }
      return {
        snippetPrefix: snippetPrefix,
        wordPrefix: wordPrefix
      };
    },
    wordRegexForSnippets: function(snippets) {
      var character, i, len, prefix, prefixCharacters, prefixes;
      prefixes = {};
      for (prefix in snippets) {
        for (i = 0, len = prefix.length; i < len; i++) {
          character = prefix[i];
          prefixes[character] = true;
        }
      }
      prefixCharacters = Object.keys(prefixes).join('');
      return new RegExp("[" + (_.escapeRegExp(prefixCharacters)) + "]+");
    },
    snippetForPrefix: function(snippets, prefix, wordPrefix) {
      var longestPrefixMatch, snippet, snippetPrefix;
      longestPrefixMatch = null;
      for (snippetPrefix in snippets) {
        snippet = snippets[snippetPrefix];
        if (_.endsWith(prefix, snippetPrefix) && wordPrefix.length <= snippetPrefix.length) {
          if ((longestPrefixMatch == null) || snippetPrefix.length > longestPrefixMatch.prefix.length) {
            longestPrefixMatch = snippet;
          }
        }
      }
      return longestPrefixMatch;
    },
    getSnippets: function(editor) {
      return this.parsedSnippetsForScopes(editor.getLastCursor().getScopeDescriptor());
    },
    snippetToExpandUnderCursor: function(editor) {
      var prefixData, snippets;
      if (!editor.getLastSelection().isEmpty()) {
        return false;
      }
      snippets = this.getSnippets(editor);
      if (_.isEmpty(snippets)) {
        return false;
      }
      if (prefixData = this.getPrefixText(snippets, editor)) {
        return this.snippetForPrefix(snippets, prefixData.snippetPrefix, prefixData.wordPrefix);
      }
    },
    expandSnippetsUnderCursors: function(editor) {
      var snippet;
      if (!(snippet = this.snippetToExpandUnderCursor(editor))) {
        return false;
      }
      editor.transact((function(_this) {
        return function() {
          var cursor, cursorPosition, cursors, i, len, results1, startPoint;
          cursors = editor.getCursors();
          results1 = [];
          for (i = 0, len = cursors.length; i < len; i++) {
            cursor = cursors[i];
            cursorPosition = cursor.getBufferPosition();
            startPoint = cursorPosition.translate([0, -snippet.prefix.length], [0, 0]);
            cursor.selection.setBufferRange([startPoint, cursorPosition]);
            results1.push(_this.insert(snippet, editor, cursor));
          }
          return results1;
        };
      })(this));
      return true;
    },
    goToNextTabStop: function(editor) {
      var expansion, i, len, nextTabStopVisited, ref1;
      nextTabStopVisited = false;
      ref1 = this.getExpansions(editor);
      for (i = 0, len = ref1.length; i < len; i++) {
        expansion = ref1[i];
        if (expansion != null ? expansion.goToNextTabStop() : void 0) {
          nextTabStopVisited = true;
        }
      }
      return nextTabStopVisited;
    },
    goToPreviousTabStop: function(editor) {
      var expansion, i, len, previousTabStopVisited, ref1;
      previousTabStopVisited = false;
      ref1 = this.getExpansions(editor);
      for (i = 0, len = ref1.length; i < len; i++) {
        expansion = ref1[i];
        if (expansion != null ? expansion.goToPreviousTabStop() : void 0) {
          previousTabStopVisited = true;
        }
      }
      return previousTabStopVisited;
    },
    getExpansions: function(editor) {
      var ref1, ref2;
      return (ref1 = (ref2 = this.editorSnippetExpansions) != null ? ref2.get(editor) : void 0) != null ? ref1 : [];
    },
    clearExpansions: function(editor) {
      if (this.editorSnippetExpansions == null) {
        this.editorSnippetExpansions = new WeakMap();
      }
      return this.editorSnippetExpansions.set(editor, []);
    },
    addExpansion: function(editor, snippetExpansion) {
      return this.getExpansions(editor).push(snippetExpansion);
    },
    insert: function(snippet, editor, cursor) {
      var bodyTree;
      if (editor == null) {
        editor = atom.workspace.getActiveTextEditor();
      }
      if (cursor == null) {
        cursor = editor.getLastCursor();
      }
      if (typeof snippet === 'string') {
        bodyTree = this.getBodyParser().parse(snippet);
        snippet = new Snippet({
          name: '__anonymous',
          prefix: '',
          bodyTree: bodyTree,
          bodyText: snippet
        });
      }
      return new SnippetExpansion(snippet, editor, cursor, this);
    },
    getUnparsedSnippets: function() {
      return _.deepClone(this.scopedPropertyStore.propertySets);
    },
    provideSnippets: function() {
      return {
        bundledSnippetsLoaded: (function(_this) {
          return function() {
            return _this.loaded;
          };
        })(this),
        insertSnippet: this.insert.bind(this),
        snippetsForScopes: this.parsedSnippetsForScopes.bind(this),
        getUnparsedSnippets: this.getUnparsedSnippets.bind(this)
      };
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
