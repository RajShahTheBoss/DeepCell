(function() {
  var CompositeDisposable, SnippetExpansion;

  CompositeDisposable = require('atom').CompositeDisposable;

  module.exports = SnippetExpansion = (function() {
    SnippetExpansion.prototype.settingTabStop = false;

    function SnippetExpansion(snippet1, editor, cursor, snippets) {
      var startPosition;
      this.snippet = snippet1;
      this.editor = editor;
      this.cursor = cursor;
      this.snippets = snippets;
      this.subscriptions = new CompositeDisposable;
      this.tabStopMarkers = [];
      this.selections = [this.cursor.selection];
      startPosition = this.cursor.selection.getBufferRange().start;
      this.editor.transact((function(_this) {
        return function() {
          var newRange;
          newRange = _this.editor.transact(function() {
            return _this.cursor.selection.insertText(_this.snippet.body, {
              autoIndent: false
            });
          });
          if (_this.snippet.tabStops.length > 0) {
            _this.subscriptions.add(_this.cursor.onDidChangePosition(function(event) {
              return _this.cursorMoved(event);
            }));
            _this.subscriptions.add(_this.cursor.onDidDestroy(function() {
              return _this.cursorDestroyed();
            }));
            _this.placeTabStopMarkers(startPosition, _this.snippet.tabStops);
            _this.snippets.addExpansion(_this.editor, _this);
            _this.editor.normalizeTabsInBufferRange(newRange);
          }
          if (_this.snippet.lineCount > 1) {
            return _this.indentSubsequentLines(startPosition.row, _this.snippet);
          }
        };
      })(this));
    }

    SnippetExpansion.prototype.cursorMoved = function(arg) {
      var newBufferPosition, oldBufferPosition, textChanged;
      oldBufferPosition = arg.oldBufferPosition, newBufferPosition = arg.newBufferPosition, textChanged = arg.textChanged;
      if (this.settingTabStop || textChanged) {
        return;
      }
      if (!this.tabStopMarkers[this.tabStopIndex].some(function(marker) {
        return marker.getBufferRange().containsPoint(newBufferPosition);
      })) {
        return this.destroy();
      }
    };

    SnippetExpansion.prototype.cursorDestroyed = function() {
      if (!this.settingTabStop) {
        return this.destroy();
      }
    };

    SnippetExpansion.prototype.placeTabStopMarkers = function(startPosition, tabStopRanges) {
      var j, len, ranges;
      for (j = 0, len = tabStopRanges.length; j < len; j++) {
        ranges = tabStopRanges[j];
        this.tabStopMarkers.push(ranges.map((function(_this) {
          return function(arg) {
            var end, start;
            start = arg.start, end = arg.end;
            return _this.editor.markBufferRange([startPosition.traverse(start), startPosition.traverse(end)]);
          };
        })(this)));
      }
      return this.setTabStopIndex(0);
    };

    SnippetExpansion.prototype.indentSubsequentLines = function(startRow, snippet) {
      var initialIndent, j, ref, ref1, results, row;
      initialIndent = this.editor.lineTextForBufferRow(startRow).match(/^\s*/)[0];
      results = [];
      for (row = j = ref = startRow + 1, ref1 = startRow + snippet.lineCount; ref <= ref1 ? j < ref1 : j > ref1; row = ref <= ref1 ? ++j : --j) {
        results.push(this.editor.buffer.insert([row, 0], initialIndent));
      }
      return results;
    };

    SnippetExpansion.prototype.goToNextTabStop = function() {
      var nextIndex;
      nextIndex = this.tabStopIndex + 1;
      if (nextIndex < this.tabStopMarkers.length) {
        if (this.setTabStopIndex(nextIndex)) {
          return true;
        } else {
          return this.goToNextTabStop();
        }
      } else {
        this.destroy();
        return false;
      }
    };

    SnippetExpansion.prototype.goToPreviousTabStop = function() {
      if (this.tabStopIndex > 0) {
        return this.setTabStopIndex(this.tabStopIndex - 1);
      }
    };

    SnippetExpansion.prototype.setTabStopIndex = function(tabStopIndex) {
      var i, j, k, l, len, len1, len2, marker, markerSelected, newSelection, range, ranges, ref, ref1, selection;
      this.tabStopIndex = tabStopIndex;
      this.settingTabStop = true;
      markerSelected = false;
      ranges = [];
      ref = this.tabStopMarkers[this.tabStopIndex];
      for (j = 0, len = ref.length; j < len; j++) {
        marker = ref[j];
        if (marker.isValid()) {
          ranges.push(marker.getBufferRange());
        }
      }
      if (ranges.length > 0) {
        ref1 = this.selections.slice(ranges.length);
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          selection = ref1[k];
          selection.destroy();
        }
        this.selections = this.selections.slice(0, ranges.length);
        for (i = l = 0, len2 = ranges.length; l < len2; i = ++l) {
          range = ranges[i];
          if (this.selections[i]) {
            this.selections[i].setBufferRange(range);
          } else {
            newSelection = this.editor.addSelectionForBufferRange(range);
            this.subscriptions.add(newSelection.cursor.onDidChangePosition((function(_this) {
              return function(event) {
                return _this.cursorMoved(event);
              };
            })(this)));
            this.subscriptions.add(newSelection.cursor.onDidDestroy((function(_this) {
              return function() {
                return _this.cursorDestroyed();
              };
            })(this)));
            this.selections.push(newSelection);
          }
        }
        markerSelected = true;
      }
      this.settingTabStop = false;
      return markerSelected;
    };

    SnippetExpansion.prototype.destroy = function() {
      var j, k, len, len1, marker, markers, ref;
      this.subscriptions.dispose();
      ref = this.tabStopMarkers;
      for (j = 0, len = ref.length; j < len; j++) {
        markers = ref[j];
        for (k = 0, len1 = markers.length; k < len1; k++) {
          marker = markers[k];
          marker.destroy();
        }
      }
      this.tabStopMarkers = [];
      return this.snippets.clearExpansions(this.editor);
    };

    SnippetExpansion.prototype.restore = function(editor) {
      this.editor = editor;
      return this.snippets.addExpansion(this.editor, this);
    };

    return SnippetExpansion;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,
